
ledcube_firm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  00002980  00002a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024a  00800216  00800216  00002b2a  2**0
                  ALLOC
  3 .debug_aranges 000007c0  00000000  00000000  00002b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001242  00000000  00000000  000032ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007b8b  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bf0  00000000  00000000  0000c0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000048e9  00000000  00000000  0000dca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000da0  00000000  00000000  00012590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001f06  00000000  00000000  00013330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004a26  00000000  00000000  00015236  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  00019c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	this->_infiniteval  = 0;
}

Effect::~Effect() {

}
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__dtors_end>

}

LedSquare::~LedSquare() {
	// TODO Auto-generated destructor stub
}
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  TCCR1B = _BV(WGM13);        // set mode 8: phase and frequency correct pwm, stop the timer
  setPeriod(microseconds);
}


void TimerOne::setPeriod(long microseconds)		// AR modified for atomic access
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  is called with fr and fi pointing to index 0 and index N/2
  respectively in the original array. The above guarantees
  that fix_fft "sees" consecutive real samples as alternating
  real and imaginary samples in the complex array.
*/
int fix_fftr(char f[], int m, int inverse)
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
}

LedCube::~LedCube()
{

}
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__vector_16>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__vector_18>
      4c:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_19>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <_ZL8Sinewave>:
      68:	00 03 06 09 0c 0f 12 15 18 1c 1f 22 25 28 2b 2e     ..........."%(+.
      78:	30 33 36 39 3c 3f 41 44 47 49 4c 4e 51 53 55 58     0369<?ADGILNQSUX
      88:	5a 5c 5e 60 62 64 66 68 6a 6c 6d 6f 70 72 73 75     Z\^`bdfhjlmoprsu
      98:	76 77 78 79 7a 7b 7c 7c 7d 7e 7e 7f 7f 7f 7f 7f     vwxyz{||}~~.....
      a8:	7f 7f 7f 7f 7f 7f 7e 7e 7d 7c 7c 7b 7a 79 78 77     ......~~}||{zyxw
      b8:	76 75 73 72 70 6f 6d 6c 6a 68 66 64 62 60 5e 5c     vusrpomljhfdb`^\
      c8:	5a 58 55 53 51 4e 4c 49 47 44 41 3f 3c 39 36 33     ZXUSQNLIGDA?<963
      d8:	30 2e 2b 28 25 22 1f 1c 18 15 12 0f 0c 09 06 03     0.+(%"..........
      e8:	00 fd fa f7 f4 f1 ee eb e8 e4 e1 de db d8 d5 d2     ................
      f8:	d0 cd ca c7 c4 c1 bf bc b9 b7 b4 b2 af ad ab a8     ................
     108:	a6 a4 a2 a0 9e 9c 9a 98 96 94 93 91 90 8e 8d 8b     ................
     118:	8a 89 88 87 86 85 84 84 83 82 82 81 81 81 81 81     ................

00000128 <port_to_mode_PGM>:
     128:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000132 <port_to_output_PGM>:
     132:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013c <port_to_input_PGM>:
     13c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000146 <digital_pin_to_port_PGM>:
     146:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     156:	03 03 03 03                                         ....

0000015a <digital_pin_to_bit_mask_PGM>:
     15a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     16a:	04 08 10 20                                         ... 

0000016e <digital_pin_to_timer_PGM>:
     16e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     17e:	00 00 00 00                                         ....

00000182 <__ctors_start>:
     182:	67 02       	muls	r22, r23
     184:	60 10       	cpse	r6, r0

00000186 <__ctors_end>:
     186:	78 02       	muls	r23, r24

00000188 <__dtors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	d8 e0       	ldi	r29, 0x08	; 8
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	12 e0       	ldi	r17, 0x02	; 2
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	e0 e8       	ldi	r30, 0x80	; 128
     19c:	f9 e2       	ldi	r31, 0x29	; 41
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <.do_copy_data_start>

000001a0 <.do_copy_data_loop>:
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0

000001a4 <.do_copy_data_start>:
     1a4:	a6 31       	cpi	r26, 0x16	; 22
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <.do_copy_data_loop>

000001aa <__do_clear_bss>:
     1aa:	14 e0       	ldi	r17, 0x04	; 4
     1ac:	a6 e1       	ldi	r26, 0x16	; 22
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	a0 36       	cpi	r26, 0x60	; 96
     1b6:	b1 07       	cpc	r27, r17
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>

000001ba <__do_global_ctors>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	c6 e8       	ldi	r28, 0x86	; 134
     1be:	d1 e0       	ldi	r29, 0x01	; 1
     1c0:	04 c0       	rjmp	.+8      	; 0x1ca <.do_global_ctors_start>

000001c2 <.do_global_ctors_loop>:
     1c2:	22 97       	sbiw	r28, 0x02	; 2
     1c4:	fe 01       	movw	r30, r28
     1c6:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__tablejump__>

000001ca <.do_global_ctors_start>:
     1ca:	c2 38       	cpi	r28, 0x82	; 130
     1cc:	d1 07       	cpc	r29, r17
     1ce:	c9 f7       	brne	.-14     	; 0x1c2 <.do_global_ctors_loop>
     1d0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <main>
     1d4:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__do_global_dtors>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <malloc>:
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	bc 01       	movw	r22, r24
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	91 05       	cpc	r25, r1
     1e6:	10 f4       	brcc	.+4      	; 0x1ec <malloc+0x10>
     1e8:	62 e0       	ldi	r22, 0x02	; 2
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	a0 91 5e 04 	lds	r26, 0x045E
     1f0:	b0 91 5f 04 	lds	r27, 0x045F
     1f4:	ed 01       	movw	r28, r26
     1f6:	e0 e0       	ldi	r30, 0x00	; 0
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	21 c0       	rjmp	.+66     	; 0x242 <malloc+0x66>
     200:	88 81       	ld	r24, Y
     202:	99 81       	ldd	r25, Y+1	; 0x01
     204:	86 17       	cp	r24, r22
     206:	97 07       	cpc	r25, r23
     208:	69 f4       	brne	.+26     	; 0x224 <malloc+0x48>
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	9b 81       	ldd	r25, Y+3	; 0x03
     20e:	30 97       	sbiw	r30, 0x00	; 0
     210:	19 f0       	breq	.+6      	; 0x218 <malloc+0x3c>
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	04 c0       	rjmp	.+8      	; 0x220 <malloc+0x44>
     218:	90 93 5f 04 	sts	0x045F, r25
     21c:	80 93 5e 04 	sts	0x045E, r24
     220:	fe 01       	movw	r30, r28
     222:	34 c0       	rjmp	.+104    	; 0x28c <malloc+0xb0>
     224:	68 17       	cp	r22, r24
     226:	79 07       	cpc	r23, r25
     228:	38 f4       	brcc	.+14     	; 0x238 <malloc+0x5c>
     22a:	41 15       	cp	r20, r1
     22c:	51 05       	cpc	r21, r1
     22e:	19 f0       	breq	.+6      	; 0x236 <malloc+0x5a>
     230:	84 17       	cp	r24, r20
     232:	95 07       	cpc	r25, r21
     234:	08 f4       	brcc	.+2      	; 0x238 <malloc+0x5c>
     236:	ac 01       	movw	r20, r24
     238:	fe 01       	movw	r30, r28
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	9b 81       	ldd	r25, Y+3	; 0x03
     23e:	9c 01       	movw	r18, r24
     240:	e9 01       	movw	r28, r18
     242:	20 97       	sbiw	r28, 0x00	; 0
     244:	e9 f6       	brne	.-70     	; 0x200 <malloc+0x24>
     246:	41 15       	cp	r20, r1
     248:	51 05       	cpc	r21, r1
     24a:	a9 f1       	breq	.+106    	; 0x2b6 <malloc+0xda>
     24c:	ca 01       	movw	r24, r20
     24e:	86 1b       	sub	r24, r22
     250:	97 0b       	sbc	r25, r23
     252:	04 97       	sbiw	r24, 0x04	; 4
     254:	08 f4       	brcc	.+2      	; 0x258 <malloc+0x7c>
     256:	ba 01       	movw	r22, r20
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	2a c0       	rjmp	.+84     	; 0x2b2 <malloc+0xd6>
     25e:	8d 91       	ld	r24, X+
     260:	9c 91       	ld	r25, X
     262:	11 97       	sbiw	r26, 0x01	; 1
     264:	84 17       	cp	r24, r20
     266:	95 07       	cpc	r25, r21
     268:	f9 f4       	brne	.+62     	; 0x2a8 <malloc+0xcc>
     26a:	64 17       	cp	r22, r20
     26c:	75 07       	cpc	r23, r21
     26e:	81 f4       	brne	.+32     	; 0x290 <malloc+0xb4>
     270:	12 96       	adiw	r26, 0x02	; 2
     272:	8d 91       	ld	r24, X+
     274:	9c 91       	ld	r25, X
     276:	13 97       	sbiw	r26, 0x03	; 3
     278:	30 97       	sbiw	r30, 0x00	; 0
     27a:	19 f0       	breq	.+6      	; 0x282 <malloc+0xa6>
     27c:	93 83       	std	Z+3, r25	; 0x03
     27e:	82 83       	std	Z+2, r24	; 0x02
     280:	04 c0       	rjmp	.+8      	; 0x28a <malloc+0xae>
     282:	90 93 5f 04 	sts	0x045F, r25
     286:	80 93 5e 04 	sts	0x045E, r24
     28a:	fd 01       	movw	r30, r26
     28c:	32 96       	adiw	r30, 0x02	; 2
     28e:	4c c0       	rjmp	.+152    	; 0x328 <malloc+0x14c>
     290:	ca 01       	movw	r24, r20
     292:	86 1b       	sub	r24, r22
     294:	97 0b       	sbc	r25, r23
     296:	fd 01       	movw	r30, r26
     298:	e8 0f       	add	r30, r24
     29a:	f9 1f       	adc	r31, r25
     29c:	61 93       	st	Z+, r22
     29e:	71 93       	st	Z+, r23
     2a0:	02 97       	sbiw	r24, 0x02	; 2
     2a2:	8d 93       	st	X+, r24
     2a4:	9c 93       	st	X, r25
     2a6:	40 c0       	rjmp	.+128    	; 0x328 <malloc+0x14c>
     2a8:	fd 01       	movw	r30, r26
     2aa:	82 81       	ldd	r24, Z+2	; 0x02
     2ac:	93 81       	ldd	r25, Z+3	; 0x03
     2ae:	9c 01       	movw	r18, r24
     2b0:	d9 01       	movw	r26, r18
     2b2:	10 97       	sbiw	r26, 0x00	; 0
     2b4:	a1 f6       	brne	.-88     	; 0x25e <malloc+0x82>
     2b6:	80 91 5c 04 	lds	r24, 0x045C
     2ba:	90 91 5d 04 	lds	r25, 0x045D
     2be:	89 2b       	or	r24, r25
     2c0:	41 f4       	brne	.+16     	; 0x2d2 <malloc+0xf6>
     2c2:	80 91 1e 01 	lds	r24, 0x011E
     2c6:	90 91 1f 01 	lds	r25, 0x011F
     2ca:	90 93 5d 04 	sts	0x045D, r25
     2ce:	80 93 5c 04 	sts	0x045C, r24
     2d2:	40 91 20 01 	lds	r20, 0x0120
     2d6:	50 91 21 01 	lds	r21, 0x0121
     2da:	41 15       	cp	r20, r1
     2dc:	51 05       	cpc	r21, r1
     2de:	41 f4       	brne	.+16     	; 0x2f0 <malloc+0x114>
     2e0:	4d b7       	in	r20, 0x3d	; 61
     2e2:	5e b7       	in	r21, 0x3e	; 62
     2e4:	80 91 1c 01 	lds	r24, 0x011C
     2e8:	90 91 1d 01 	lds	r25, 0x011D
     2ec:	48 1b       	sub	r20, r24
     2ee:	59 0b       	sbc	r21, r25
     2f0:	20 91 5c 04 	lds	r18, 0x045C
     2f4:	30 91 5d 04 	lds	r19, 0x045D
     2f8:	ca 01       	movw	r24, r20
     2fa:	82 1b       	sub	r24, r18
     2fc:	93 0b       	sbc	r25, r19
     2fe:	86 17       	cp	r24, r22
     300:	97 07       	cpc	r25, r23
     302:	80 f0       	brcs	.+32     	; 0x324 <malloc+0x148>
     304:	ab 01       	movw	r20, r22
     306:	4e 5f       	subi	r20, 0xFE	; 254
     308:	5f 4f       	sbci	r21, 0xFF	; 255
     30a:	84 17       	cp	r24, r20
     30c:	95 07       	cpc	r25, r21
     30e:	50 f0       	brcs	.+20     	; 0x324 <malloc+0x148>
     310:	42 0f       	add	r20, r18
     312:	53 1f       	adc	r21, r19
     314:	50 93 5d 04 	sts	0x045D, r21
     318:	40 93 5c 04 	sts	0x045C, r20
     31c:	f9 01       	movw	r30, r18
     31e:	61 93       	st	Z+, r22
     320:	71 93       	st	Z+, r23
     322:	02 c0       	rjmp	.+4      	; 0x328 <malloc+0x14c>
     324:	e0 e0       	ldi	r30, 0x00	; 0
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	cf 01       	movw	r24, r30
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <free>:
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	09 f4       	brne	.+2      	; 0x33a <free+0xa>
     338:	50 c0       	rjmp	.+160    	; 0x3da <free+0xaa>
     33a:	ec 01       	movw	r28, r24
     33c:	22 97       	sbiw	r28, 0x02	; 2
     33e:	1b 82       	std	Y+3, r1	; 0x03
     340:	1a 82       	std	Y+2, r1	; 0x02
     342:	a0 91 5e 04 	lds	r26, 0x045E
     346:	b0 91 5f 04 	lds	r27, 0x045F
     34a:	10 97       	sbiw	r26, 0x00	; 0
     34c:	09 f1       	breq	.+66     	; 0x390 <free+0x60>
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	ac 17       	cp	r26, r28
     354:	bd 07       	cpc	r27, r29
     356:	08 f1       	brcs	.+66     	; 0x39a <free+0x6a>
     358:	bb 83       	std	Y+3, r27	; 0x03
     35a:	aa 83       	std	Y+2, r26	; 0x02
     35c:	fe 01       	movw	r30, r28
     35e:	21 91       	ld	r18, Z+
     360:	31 91       	ld	r19, Z+
     362:	e2 0f       	add	r30, r18
     364:	f3 1f       	adc	r31, r19
     366:	ae 17       	cp	r26, r30
     368:	bf 07       	cpc	r27, r31
     36a:	79 f4       	brne	.+30     	; 0x38a <free+0x5a>
     36c:	8d 91       	ld	r24, X+
     36e:	9c 91       	ld	r25, X
     370:	11 97       	sbiw	r26, 0x01	; 1
     372:	28 0f       	add	r18, r24
     374:	39 1f       	adc	r19, r25
     376:	2e 5f       	subi	r18, 0xFE	; 254
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	39 83       	std	Y+1, r19	; 0x01
     37c:	28 83       	st	Y, r18
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	8d 91       	ld	r24, X+
     382:	9c 91       	ld	r25, X
     384:	13 97       	sbiw	r26, 0x03	; 3
     386:	9b 83       	std	Y+3, r25	; 0x03
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	41 15       	cp	r20, r1
     38c:	51 05       	cpc	r21, r1
     38e:	71 f4       	brne	.+28     	; 0x3ac <free+0x7c>
     390:	d0 93 5f 04 	sts	0x045F, r29
     394:	c0 93 5e 04 	sts	0x045E, r28
     398:	20 c0       	rjmp	.+64     	; 0x3da <free+0xaa>
     39a:	12 96       	adiw	r26, 0x02	; 2
     39c:	8d 91       	ld	r24, X+
     39e:	9c 91       	ld	r25, X
     3a0:	13 97       	sbiw	r26, 0x03	; 3
     3a2:	ad 01       	movw	r20, r26
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	11 f0       	breq	.+4      	; 0x3ac <free+0x7c>
     3a8:	dc 01       	movw	r26, r24
     3aa:	d3 cf       	rjmp	.-90     	; 0x352 <free+0x22>
     3ac:	fa 01       	movw	r30, r20
     3ae:	d3 83       	std	Z+3, r29	; 0x03
     3b0:	c2 83       	std	Z+2, r28	; 0x02
     3b2:	21 91       	ld	r18, Z+
     3b4:	31 91       	ld	r19, Z+
     3b6:	e2 0f       	add	r30, r18
     3b8:	f3 1f       	adc	r31, r19
     3ba:	ce 17       	cp	r28, r30
     3bc:	df 07       	cpc	r29, r31
     3be:	69 f4       	brne	.+26     	; 0x3da <free+0xaa>
     3c0:	88 81       	ld	r24, Y
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
     3c4:	28 0f       	add	r18, r24
     3c6:	39 1f       	adc	r19, r25
     3c8:	2e 5f       	subi	r18, 0xFE	; 254
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	fa 01       	movw	r30, r20
     3ce:	31 83       	std	Z+1, r19	; 0x01
     3d0:	20 83       	st	Z, r18
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	9b 81       	ldd	r25, Y+3	; 0x03
     3d6:	93 83       	std	Z+3, r25	; 0x03
     3d8:	82 83       	std	Z+2, r24	; 0x02
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <do_random>:
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e6 ef       	ldi	r30, 0xF6	; 246
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x10>
     3ec:	ec 01       	movw	r28, r24
     3ee:	a8 80       	ld	r10, Y
     3f0:	b9 80       	ldd	r11, Y+1	; 0x01
     3f2:	ca 80       	ldd	r12, Y+2	; 0x02
     3f4:	db 80       	ldd	r13, Y+3	; 0x03
     3f6:	a1 14       	cp	r10, r1
     3f8:	b1 04       	cpc	r11, r1
     3fa:	c1 04       	cpc	r12, r1
     3fc:	d1 04       	cpc	r13, r1
     3fe:	41 f4       	brne	.+16     	; 0x410 <do_random+0x30>
     400:	84 e2       	ldi	r24, 0x24	; 36
     402:	a8 2e       	mov	r10, r24
     404:	89 ed       	ldi	r24, 0xD9	; 217
     406:	b8 2e       	mov	r11, r24
     408:	8b e5       	ldi	r24, 0x5B	; 91
     40a:	c8 2e       	mov	r12, r24
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	d8 2e       	mov	r13, r24
     410:	c6 01       	movw	r24, r12
     412:	b5 01       	movw	r22, r10
     414:	2d e1       	ldi	r18, 0x1D	; 29
     416:	33 ef       	ldi	r19, 0xF3	; 243
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__divmodsi4>
     420:	27 ea       	ldi	r18, 0xA7	; 167
     422:	31 e4       	ldi	r19, 0x41	; 65
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__mulsi3>
     42c:	7b 01       	movw	r14, r22
     42e:	8c 01       	movw	r16, r24
     430:	c6 01       	movw	r24, r12
     432:	b5 01       	movw	r22, r10
     434:	2d e1       	ldi	r18, 0x1D	; 29
     436:	33 ef       	ldi	r19, 0xF3	; 243
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__divmodsi4>
     440:	ca 01       	movw	r24, r20
     442:	b9 01       	movw	r22, r18
     444:	2c ee       	ldi	r18, 0xEC	; 236
     446:	34 ef       	ldi	r19, 0xF4	; 244
     448:	4f ef       	ldi	r20, 0xFF	; 255
     44a:	5f ef       	ldi	r21, 0xFF	; 255
     44c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__mulsi3>
     450:	6e 0d       	add	r22, r14
     452:	7f 1d       	adc	r23, r15
     454:	80 1f       	adc	r24, r16
     456:	91 1f       	adc	r25, r17
     458:	97 ff       	sbrs	r25, 7
     45a:	04 c0       	rjmp	.+8      	; 0x464 <do_random+0x84>
     45c:	61 50       	subi	r22, 0x01	; 1
     45e:	70 40       	sbci	r23, 0x00	; 0
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 48       	sbci	r25, 0x80	; 128
     464:	68 83       	st	Y, r22
     466:	79 83       	std	Y+1, r23	; 0x01
     468:	8a 83       	std	Y+2, r24	; 0x02
     46a:	9b 83       	std	Y+3, r25	; 0x03
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	5f 77       	andi	r21, 0x7F	; 127
     472:	b9 01       	movw	r22, r18
     474:	ca 01       	movw	r24, r20
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	ea e0       	ldi	r30, 0x0A	; 10
     47c:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x10>

00000480 <random_r>:
     480:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <do_random>
     484:	08 95       	ret

00000486 <random>:
     486:	82 e2       	ldi	r24, 0x22	; 34
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <do_random>
     48e:	08 95       	ret

00000490 <srandom>:
     490:	60 93 22 01 	sts	0x0122, r22
     494:	70 93 23 01 	sts	0x0123, r23
     498:	80 93 24 01 	sts	0x0124, r24
     49c:	90 93 25 01 	sts	0x0125, r25
     4a0:	08 95       	ret

000004a2 <strcpy>:
     4a2:	fb 01       	movw	r30, r22
     4a4:	dc 01       	movw	r26, r24
     4a6:	01 90       	ld	r0, Z+
     4a8:	0d 92       	st	X+, r0
     4aa:	00 20       	and	r0, r0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <strcpy+0x4>
     4ae:	08 95       	ret

000004b0 <_ZN6EffectD1Ev>:
Effect::Effect() {
	this->_milli  	    = 100;
	this->_infiniteval  = 0;
}

Effect::~Effect() {
     4b0:	fc 01       	movw	r30, r24
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24

}
     4ba:	08 95       	ret

000004bc <_ZN6Effect6setmodEh>:

void Effect::setmod(byte mod)
     4bc:	fc 01       	movw	r30, r24
			break;
		case MOD_SLIDE:
			_framecount = 5;
			break;
		default:
			_framecount = 5;
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	86 83       	std	Z+6, r24	; 0x06
			break;
		}

	this->_mod = mod;
     4c2:	64 83       	std	Z+4, r22	; 0x04
}
     4c4:	08 95       	ret

000004c6 <_ZN6Effect8setspeedEj>:
	LedCube::setpixel(x,y,z);
}

void Effect::setspeed(unsigned int t)
{
	this->_milli  = t;
     4c6:	fc 01       	movw	r30, r24
     4c8:	73 83       	std	Z+3, r23	; 0x03
     4ca:	62 83       	std	Z+2, r22	; 0x02
}
     4cc:	08 95       	ret

000004ce <_GLOBAL__I_ascii_map>:
		{0,1,2,3,4}
};

Effect Effect1;

Effect::Effect() {
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	90 93 17 02 	sts	0x0217, r25
     4d6:	80 93 16 02 	sts	0x0216, r24
	this->_milli  	    = 100;
     4da:	84 e6       	ldi	r24, 0x64	; 100
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 19 02 	sts	0x0219, r25
     4e2:	80 93 18 02 	sts	0x0218, r24
	this->_infiniteval  = 0;
     4e6:	10 92 1e 02 	sts	0x021E, r1
     4ea:	10 92 1d 02 	sts	0x021D, r1
    for (int i=1; i< 64;i++){
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
	    _fft_last[i] = _fft_data[i];
    };

}
     4ee:	08 95       	ret

000004f0 <_GLOBAL__D_ascii_map>:
Effect::Effect() {
	this->_milli  	    = 100;
	this->_infiniteval  = 0;
}

Effect::~Effect() {
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	90 93 17 02 	sts	0x0217, r25
     4f8:	80 93 16 02 	sts	0x0216, r24
    for (int i=1; i< 64;i++){
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
	    _fft_last[i] = _fft_data[i];
    };

}
     4fc:	08 95       	ret

000004fe <_ZN6Effect12fft_generateEv>:
		_fft_data[i] = val/4 -128;
		_fft_img[i] = 0;
	 };
}

void Effect::fft_generate()
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	8c 01       	movw	r16, r24
{
    fix_fft(_fft_data,_fft_img,7,0);
     508:	87 57       	subi	r24, 0x77	; 119
     50a:	9f 4f       	sbci	r25, 0xFF	; 255
     50c:	07 5f       	subi	r16, 0xF7	; 247
     50e:	1f 4f       	sbci	r17, 0xFF	; 255
     510:	b8 01       	movw	r22, r16
     512:	47 e0       	ldi	r20, 0x07	; 7
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_Z7fix_fftPcS_ii>
     51e:	e8 01       	movw	r28, r16
     520:	cf 57       	subi	r28, 0x7F	; 127
     522:	df 4f       	sbci	r29, 0xFF	; 255
     524:	01 e0       	ldi	r16, 0x01	; 1
     526:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=1; i< 64;i++){
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
     528:	28 81       	ld	r18, Y
     52a:	33 27       	eor	r19, r19
     52c:	27 fd       	sbrc	r18, 7
     52e:	30 95       	com	r19
     530:	c0 58       	subi	r28, 0x80	; 128
     532:	d0 40       	sbci	r29, 0x00	; 0
     534:	88 81       	ld	r24, Y
     536:	c0 58       	subi	r28, 0x80	; 128
     538:	df 4f       	sbci	r29, 0xFF	; 255
     53a:	99 27       	eor	r25, r25
     53c:	87 fd       	sbrc	r24, 7
     53e:	90 95       	com	r25
     540:	88 9f       	mul	r24, r24
     542:	b0 01       	movw	r22, r0
     544:	89 9f       	mul	r24, r25
     546:	70 0d       	add	r23, r0
     548:	98 9f       	mul	r25, r24
     54a:	70 0d       	add	r23, r0
     54c:	11 24       	eor	r1, r1
     54e:	c9 01       	movw	r24, r18
     550:	88 9f       	mul	r24, r24
     552:	90 01       	movw	r18, r0
     554:	89 9f       	mul	r24, r25
     556:	30 0d       	add	r19, r0
     558:	98 9f       	mul	r25, r24
     55a:	30 0d       	add	r19, r0
     55c:	11 24       	eor	r1, r1
     55e:	62 0f       	add	r22, r18
     560:	73 1f       	adc	r23, r19
     562:	88 27       	eor	r24, r24
     564:	77 fd       	sbrc	r23, 7
     566:	80 95       	com	r24
     568:	98 2f       	mov	r25, r24
     56a:	0e 94 27 13 	call	0x264e	; 0x264e <__floatsisf>
     56e:	0e 94 92 13 	call	0x2724	; 0x2724 <sqrt>
     572:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
     576:	68 83       	st	Y, r22
	    _fft_last[i] = _fft_data[i];
     578:	c0 58       	subi	r28, 0x80	; 128
     57a:	df 4f       	sbci	r29, 0xFF	; 255
     57c:	68 83       	st	Y, r22

void Effect::fft_generate()
{
    fix_fft(_fft_data,_fft_img,7,0);

    for (int i=1; i< 64;i++){
     57e:	0f 5f       	subi	r16, 0xFF	; 255
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	cf 57       	subi	r28, 0x7F	; 127
     584:	d0 40       	sbci	r29, 0x00	; 0
     586:	00 34       	cpi	r16, 0x40	; 64
     588:	11 05       	cpc	r17, r1
     58a:	71 f6       	brne	.-100    	; 0x528 <_ZN6Effect12fft_generateEv+0x2a>
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
	    _fft_last[i] = _fft_data[i];
    };

}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	08 95       	ret

00000596 <_ZN6Effect6getmicEv>:
	delay(this->_milli);
}

////// AUDIO PROCESSING

void Effect::getmic()
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
     5a0:	00 e0       	ldi	r16, 0x00	; 0
     5a2:	10 e0       	ldi	r17, 0x00	; 0
{
	int i=0,val;
	for(i=0; i < 128; i++){
		val = analogRead(0);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 05 12 	call	0x240a	; 0x240a <analogRead>
		_fft_data[i] = val/4 -128;
     5aa:	c7 57       	subi	r28, 0x77	; 119
     5ac:	df 4f       	sbci	r29, 0xFF	; 255
     5ae:	64 e0       	ldi	r22, 0x04	; 4
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	0e 94 26 14 	call	0x284c	; 0x284c <__divmodhi4>
     5b6:	60 58       	subi	r22, 0x80	; 128
     5b8:	68 83       	st	Y, r22
     5ba:	c9 58       	subi	r28, 0x89	; 137
     5bc:	d0 40       	sbci	r29, 0x00	; 0
		_fft_img[i] = 0;
     5be:	19 86       	std	Y+9, r1	; 0x09
////// AUDIO PROCESSING

void Effect::getmic()
{
	int i=0,val;
	for(i=0; i < 128; i++){
     5c0:	0f 5f       	subi	r16, 0xFF	; 255
     5c2:	1f 4f       	sbci	r17, 0xFF	; 255
     5c4:	21 96       	adiw	r28, 0x01	; 1
     5c6:	00 38       	cpi	r16, 0x80	; 128
     5c8:	11 05       	cpc	r17, r1
     5ca:	61 f7       	brne	.-40     	; 0x5a4 <_ZN6Effect6getmicEv+0xe>
		val = analogRead(0);
		_fft_data[i] = val/4 -128;
		_fft_img[i] = 0;
	 };
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	08 95       	ret

000005d6 <_ZN6Effect17renderfunc_rotateEm>:
			if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
				LedCube::setpixel(0,_frame,z);
		}
}

void Effect::renderfunc_rotate(uint32_t matrix)
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	7a 01       	movw	r14, r20
     5f0:	8b 01       	movw	r16, r22
{
	byte i = 0,z=4;
	switch(_frame){
     5f2:	fc 01       	movw	r30, r24
     5f4:	85 81       	ldd	r24, Z+5	; 0x05
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	09 f4       	brne	.+2      	; 0x5fc <_ZN6Effect17renderfunc_rotateEm+0x26>
     5fa:	73 c1       	rjmp	.+742    	; 0x8e2 <_ZN6Effect17renderfunc_rotateEm+0x30c>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	30 f4       	brcc	.+12     	; 0x60c <_ZN6Effect17renderfunc_rotateEm+0x36>
     600:	88 23       	and	r24, r24
     602:	59 f0       	breq	.+22     	; 0x61a <_ZN6Effect17renderfunc_rotateEm+0x44>
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	09 f0       	breq	.+2      	; 0x60a <_ZN6Effect17renderfunc_rotateEm+0x34>
     608:	81 c3       	rjmp	.+1794   	; 0xd0c <__stack+0x40d>
     60a:	b9 c0       	rjmp	.+370    	; 0x77e <_ZN6Effect17renderfunc_rotateEm+0x1a8>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	09 f4       	brne	.+2      	; 0x612 <_ZN6Effect17renderfunc_rotateEm+0x3c>
     610:	1a c2       	rjmp	.+1076   	; 0xa46 <__stack+0x147>
     612:	84 30       	cpi	r24, 0x04	; 4
     614:	09 f0       	breq	.+2      	; 0x618 <_ZN6Effect17renderfunc_rotateEm+0x42>
     616:	7a c3       	rjmp	.+1780   	; 0xd0c <__stack+0x40d>
     618:	c8 c2       	rjmp	.+1424   	; 0xbaa <__stack+0x2ab>
     61a:	f4 e0       	ldi	r31, 0x04	; 4
     61c:	df 2e       	mov	r13, r31
     61e:	c0 e0       	ldi	r28, 0x00	; 0
     620:	d0 e0       	ldi	r29, 0x00	; 0
	case 0:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     622:	e1 e0       	ldi	r30, 0x01	; 1
     624:	8e 2e       	mov	r8, r30
     626:	91 2c       	mov	r9, r1
     628:	a1 2c       	mov	r10, r1
     62a:	b1 2c       	mov	r11, r1
}

void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
     62c:	cc 2e       	mov	r12, r28
     62e:	9e 01       	movw	r18, r28
     630:	2c 5f       	subi	r18, 0xFC	; 252
     632:	3f 4f       	sbci	r19, 0xFF	; 255
	case 0:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     634:	d5 01       	movw	r26, r10
     636:	c4 01       	movw	r24, r8
     638:	02 2e       	mov	r0, r18
     63a:	04 c0       	rjmp	.+8      	; 0x644 <_ZN6Effect17renderfunc_rotateEm+0x6e>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	aa 1f       	adc	r26, r26
     642:	bb 1f       	adc	r27, r27
     644:	0a 94       	dec	r0
     646:	d2 f7       	brpl	.-12     	; 0x63c <_ZN6Effect17renderfunc_rotateEm+0x66>
     648:	8e 21       	and	r24, r14
     64a:	9f 21       	and	r25, r15
     64c:	a0 23       	and	r26, r16
     64e:	b1 23       	and	r27, r17
     650:	04 c0       	rjmp	.+8      	; 0x65a <_ZN6Effect17renderfunc_rotateEm+0x84>
     652:	b6 95       	lsr	r27
     654:	a7 95       	ror	r26
     656:	97 95       	ror	r25
     658:	87 95       	ror	r24
     65a:	2a 95       	dec	r18
     65c:	d2 f7       	brpl	.-12     	; 0x652 <_ZN6Effect17renderfunc_rotateEm+0x7c>
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	a1 05       	cpc	r26, r1
     662:	b1 05       	cpc	r27, r1
     664:	29 f4       	brne	.+10     	; 0x670 <_ZN6Effect17renderfunc_rotateEm+0x9a>
					LedCube::setpixel(4,2,z);
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	4d 2d       	mov	r20, r13
     66c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     670:	9e 01       	movw	r18, r28
     672:	2d 5f       	subi	r18, 0xFD	; 253
     674:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     676:	d5 01       	movw	r26, r10
     678:	c4 01       	movw	r24, r8
     67a:	02 2e       	mov	r0, r18
     67c:	04 c0       	rjmp	.+8      	; 0x686 <_ZN6Effect17renderfunc_rotateEm+0xb0>
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	aa 1f       	adc	r26, r26
     684:	bb 1f       	adc	r27, r27
     686:	0a 94       	dec	r0
     688:	d2 f7       	brpl	.-12     	; 0x67e <_ZN6Effect17renderfunc_rotateEm+0xa8>
     68a:	8e 21       	and	r24, r14
     68c:	9f 21       	and	r25, r15
     68e:	a0 23       	and	r26, r16
     690:	b1 23       	and	r27, r17
     692:	04 c0       	rjmp	.+8      	; 0x69c <_ZN6Effect17renderfunc_rotateEm+0xc6>
     694:	b6 95       	lsr	r27
     696:	a7 95       	ror	r26
     698:	97 95       	ror	r25
     69a:	87 95       	ror	r24
     69c:	2a 95       	dec	r18
     69e:	d2 f7       	brpl	.-12     	; 0x694 <_ZN6Effect17renderfunc_rotateEm+0xbe>
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	a1 05       	cpc	r26, r1
     6a4:	b1 05       	cpc	r27, r1
     6a6:	29 f4       	brne	.+10     	; 0x6b2 <_ZN6Effect17renderfunc_rotateEm+0xdc>
					LedCube::setpixel(3,2,z);
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	62 e0       	ldi	r22, 0x02	; 2
     6ac:	4d 2d       	mov	r20, r13
     6ae:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     6b2:	9e 01       	movw	r18, r28
     6b4:	2e 5f       	subi	r18, 0xFE	; 254
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     6b8:	d5 01       	movw	r26, r10
     6ba:	c4 01       	movw	r24, r8
     6bc:	02 2e       	mov	r0, r18
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <_ZN6Effect17renderfunc_rotateEm+0xf2>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	aa 1f       	adc	r26, r26
     6c6:	bb 1f       	adc	r27, r27
     6c8:	0a 94       	dec	r0
     6ca:	d2 f7       	brpl	.-12     	; 0x6c0 <_ZN6Effect17renderfunc_rotateEm+0xea>
     6cc:	8e 21       	and	r24, r14
     6ce:	9f 21       	and	r25, r15
     6d0:	a0 23       	and	r26, r16
     6d2:	b1 23       	and	r27, r17
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <_ZN6Effect17renderfunc_rotateEm+0x108>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	2a 95       	dec	r18
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <_ZN6Effect17renderfunc_rotateEm+0x100>
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	a1 05       	cpc	r26, r1
     6e6:	b1 05       	cpc	r27, r1
     6e8:	29 f4       	brne	.+10     	; 0x6f4 <_ZN6Effect17renderfunc_rotateEm+0x11e>
					LedCube::setpixel(2,2,z);
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	4d 2d       	mov	r20, r13
     6f0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     6f4:	9e 01       	movw	r18, r28
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     6fa:	d5 01       	movw	r26, r10
     6fc:	c4 01       	movw	r24, r8
     6fe:	02 2e       	mov	r0, r18
     700:	04 c0       	rjmp	.+8      	; 0x70a <_ZN6Effect17renderfunc_rotateEm+0x134>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	aa 1f       	adc	r26, r26
     708:	bb 1f       	adc	r27, r27
     70a:	0a 94       	dec	r0
     70c:	d2 f7       	brpl	.-12     	; 0x702 <_ZN6Effect17renderfunc_rotateEm+0x12c>
     70e:	8e 21       	and	r24, r14
     710:	9f 21       	and	r25, r15
     712:	a0 23       	and	r26, r16
     714:	b1 23       	and	r27, r17
     716:	04 c0       	rjmp	.+8      	; 0x720 <_ZN6Effect17renderfunc_rotateEm+0x14a>
     718:	b6 95       	lsr	r27
     71a:	a7 95       	ror	r26
     71c:	97 95       	ror	r25
     71e:	87 95       	ror	r24
     720:	2a 95       	dec	r18
     722:	d2 f7       	brpl	.-12     	; 0x718 <_ZN6Effect17renderfunc_rotateEm+0x142>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 05       	cpc	r26, r1
     728:	b1 05       	cpc	r27, r1
     72a:	29 f4       	brne	.+10     	; 0x736 <_ZN6Effect17renderfunc_rotateEm+0x160>
					LedCube::setpixel(1,2,z);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	62 e0       	ldi	r22, 0x02	; 2
     730:	4d 2d       	mov	r20, r13
     732:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     736:	d5 01       	movw	r26, r10
     738:	c4 01       	movw	r24, r8
     73a:	0c 2c       	mov	r0, r12
     73c:	04 c0       	rjmp	.+8      	; 0x746 <_ZN6Effect17renderfunc_rotateEm+0x170>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	aa 1f       	adc	r26, r26
     744:	bb 1f       	adc	r27, r27
     746:	0a 94       	dec	r0
     748:	d2 f7       	brpl	.-12     	; 0x73e <_ZN6Effect17renderfunc_rotateEm+0x168>
     74a:	8e 21       	and	r24, r14
     74c:	9f 21       	and	r25, r15
     74e:	a0 23       	and	r26, r16
     750:	b1 23       	and	r27, r17
     752:	04 c0       	rjmp	.+8      	; 0x75c <_ZN6Effect17renderfunc_rotateEm+0x186>
     754:	b6 95       	lsr	r27
     756:	a7 95       	ror	r26
     758:	97 95       	ror	r25
     75a:	87 95       	ror	r24
     75c:	ca 94       	dec	r12
     75e:	d2 f7       	brpl	.-12     	; 0x754 <_ZN6Effect17renderfunc_rotateEm+0x17e>
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	a1 05       	cpc	r26, r1
     764:	b1 05       	cpc	r27, r1
     766:	29 f4       	brne	.+10     	; 0x772 <_ZN6Effect17renderfunc_rotateEm+0x19c>
					LedCube::setpixel(0,2,z);
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	62 e0       	ldi	r22, 0x02	; 2
     76c:	4d 2d       	mov	r20, r13
     76e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     772:	25 96       	adiw	r28, 0x05	; 5
void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
	case 0:
		for(;i<CUBESIZE;i++,z--){
     774:	dd 20       	and	r13, r13
     776:	09 f4       	brne	.+2      	; 0x77a <_ZN6Effect17renderfunc_rotateEm+0x1a4>
     778:	c9 c2       	rjmp	.+1426   	; 0xd0c <__stack+0x40d>
     77a:	da 94       	dec	r13
     77c:	57 cf       	rjmp	.-338    	; 0x62c <_ZN6Effect17renderfunc_rotateEm+0x56>
     77e:	74 e0       	ldi	r23, 0x04	; 4
     780:	d7 2e       	mov	r13, r23
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	86 2e       	mov	r8, r22
     78a:	91 2c       	mov	r9, r1
     78c:	a1 2c       	mov	r10, r1
     78e:	b1 2c       	mov	r11, r1
void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
	case 0:
		for(;i<CUBESIZE;i++,z--){
     790:	cc 2e       	mov	r12, r28
     792:	9e 01       	movw	r18, r28
     794:	2c 5f       	subi	r18, 0xFC	; 252
     796:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     798:	d5 01       	movw	r26, r10
     79a:	c4 01       	movw	r24, r8
     79c:	02 2e       	mov	r0, r18
     79e:	04 c0       	rjmp	.+8      	; 0x7a8 <_ZN6Effect17renderfunc_rotateEm+0x1d2>
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	aa 1f       	adc	r26, r26
     7a6:	bb 1f       	adc	r27, r27
     7a8:	0a 94       	dec	r0
     7aa:	d2 f7       	brpl	.-12     	; 0x7a0 <_ZN6Effect17renderfunc_rotateEm+0x1ca>
     7ac:	8e 21       	and	r24, r14
     7ae:	9f 21       	and	r25, r15
     7b0:	a0 23       	and	r26, r16
     7b2:	b1 23       	and	r27, r17
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <_ZN6Effect17renderfunc_rotateEm+0x1e8>
     7b6:	b6 95       	lsr	r27
     7b8:	a7 95       	ror	r26
     7ba:	97 95       	ror	r25
     7bc:	87 95       	ror	r24
     7be:	2a 95       	dec	r18
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <_ZN6Effect17renderfunc_rotateEm+0x1e0>
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	a1 05       	cpc	r26, r1
     7c6:	b1 05       	cpc	r27, r1
     7c8:	29 f4       	brne	.+10     	; 0x7d4 <_ZN6Effect17renderfunc_rotateEm+0x1fe>
					LedCube::setpixel(4,4,z);
     7ca:	84 e0       	ldi	r24, 0x04	; 4
     7cc:	64 e0       	ldi	r22, 0x04	; 4
     7ce:	4d 2d       	mov	r20, r13
     7d0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     7d4:	9e 01       	movw	r18, r28
     7d6:	2d 5f       	subi	r18, 0xFD	; 253
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     7da:	d5 01       	movw	r26, r10
     7dc:	c4 01       	movw	r24, r8
     7de:	02 2e       	mov	r0, r18
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <_ZN6Effect17renderfunc_rotateEm+0x214>
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	aa 1f       	adc	r26, r26
     7e8:	bb 1f       	adc	r27, r27
     7ea:	0a 94       	dec	r0
     7ec:	d2 f7       	brpl	.-12     	; 0x7e2 <_ZN6Effect17renderfunc_rotateEm+0x20c>
     7ee:	8e 21       	and	r24, r14
     7f0:	9f 21       	and	r25, r15
     7f2:	a0 23       	and	r26, r16
     7f4:	b1 23       	and	r27, r17
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <_ZN6Effect17renderfunc_rotateEm+0x22a>
     7f8:	b6 95       	lsr	r27
     7fa:	a7 95       	ror	r26
     7fc:	97 95       	ror	r25
     7fe:	87 95       	ror	r24
     800:	2a 95       	dec	r18
     802:	d2 f7       	brpl	.-12     	; 0x7f8 <_ZN6Effect17renderfunc_rotateEm+0x222>
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	a1 05       	cpc	r26, r1
     808:	b1 05       	cpc	r27, r1
     80a:	29 f4       	brne	.+10     	; 0x816 <_ZN6Effect17renderfunc_rotateEm+0x240>
					LedCube::setpixel(3,3,z);
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	63 e0       	ldi	r22, 0x03	; 3
     810:	4d 2d       	mov	r20, r13
     812:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     816:	9e 01       	movw	r18, r28
     818:	2e 5f       	subi	r18, 0xFE	; 254
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     81c:	d5 01       	movw	r26, r10
     81e:	c4 01       	movw	r24, r8
     820:	02 2e       	mov	r0, r18
     822:	04 c0       	rjmp	.+8      	; 0x82c <_ZN6Effect17renderfunc_rotateEm+0x256>
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	aa 1f       	adc	r26, r26
     82a:	bb 1f       	adc	r27, r27
     82c:	0a 94       	dec	r0
     82e:	d2 f7       	brpl	.-12     	; 0x824 <_ZN6Effect17renderfunc_rotateEm+0x24e>
     830:	8e 21       	and	r24, r14
     832:	9f 21       	and	r25, r15
     834:	a0 23       	and	r26, r16
     836:	b1 23       	and	r27, r17
     838:	04 c0       	rjmp	.+8      	; 0x842 <_ZN6Effect17renderfunc_rotateEm+0x26c>
     83a:	b6 95       	lsr	r27
     83c:	a7 95       	ror	r26
     83e:	97 95       	ror	r25
     840:	87 95       	ror	r24
     842:	2a 95       	dec	r18
     844:	d2 f7       	brpl	.-12     	; 0x83a <_ZN6Effect17renderfunc_rotateEm+0x264>
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	a1 05       	cpc	r26, r1
     84a:	b1 05       	cpc	r27, r1
     84c:	29 f4       	brne	.+10     	; 0x858 <_ZN6Effect17renderfunc_rotateEm+0x282>
					LedCube::setpixel(2,2,z);
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	62 e0       	ldi	r22, 0x02	; 2
     852:	4d 2d       	mov	r20, r13
     854:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     858:	9e 01       	movw	r18, r28
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     85e:	d5 01       	movw	r26, r10
     860:	c4 01       	movw	r24, r8
     862:	02 2e       	mov	r0, r18
     864:	04 c0       	rjmp	.+8      	; 0x86e <_ZN6Effect17renderfunc_rotateEm+0x298>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	aa 1f       	adc	r26, r26
     86c:	bb 1f       	adc	r27, r27
     86e:	0a 94       	dec	r0
     870:	d2 f7       	brpl	.-12     	; 0x866 <_ZN6Effect17renderfunc_rotateEm+0x290>
     872:	8e 21       	and	r24, r14
     874:	9f 21       	and	r25, r15
     876:	a0 23       	and	r26, r16
     878:	b1 23       	and	r27, r17
     87a:	04 c0       	rjmp	.+8      	; 0x884 <_ZN6Effect17renderfunc_rotateEm+0x2ae>
     87c:	b6 95       	lsr	r27
     87e:	a7 95       	ror	r26
     880:	97 95       	ror	r25
     882:	87 95       	ror	r24
     884:	2a 95       	dec	r18
     886:	d2 f7       	brpl	.-12     	; 0x87c <_ZN6Effect17renderfunc_rotateEm+0x2a6>
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	29 f4       	brne	.+10     	; 0x89a <_ZN6Effect17renderfunc_rotateEm+0x2c4>
					LedCube::setpixel(1,1,z);
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	4d 2d       	mov	r20, r13
     896:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     89a:	d5 01       	movw	r26, r10
     89c:	c4 01       	movw	r24, r8
     89e:	0c 2c       	mov	r0, r12
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <_ZN6Effect17renderfunc_rotateEm+0x2d4>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	aa 1f       	adc	r26, r26
     8a8:	bb 1f       	adc	r27, r27
     8aa:	0a 94       	dec	r0
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <_ZN6Effect17renderfunc_rotateEm+0x2cc>
     8ae:	8e 21       	and	r24, r14
     8b0:	9f 21       	and	r25, r15
     8b2:	a0 23       	and	r26, r16
     8b4:	b1 23       	and	r27, r17
     8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <_ZN6Effect17renderfunc_rotateEm+0x2ea>
     8b8:	b6 95       	lsr	r27
     8ba:	a7 95       	ror	r26
     8bc:	97 95       	ror	r25
     8be:	87 95       	ror	r24
     8c0:	ca 94       	dec	r12
     8c2:	d2 f7       	brpl	.-12     	; 0x8b8 <_ZN6Effect17renderfunc_rotateEm+0x2e2>
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 05       	cpc	r27, r1
     8ca:	29 f4       	brne	.+10     	; 0x8d6 <_ZN6Effect17renderfunc_rotateEm+0x300>
					LedCube::setpixel(0,0,z);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	4d 2d       	mov	r20, r13
     8d2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     8d6:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
     8d8:	dd 20       	and	r13, r13
     8da:	09 f4       	brne	.+2      	; 0x8de <_ZN6Effect17renderfunc_rotateEm+0x308>
     8dc:	17 c2       	rjmp	.+1070   	; 0xd0c <__stack+0x40d>
     8de:	da 94       	dec	r13
     8e0:	57 cf       	rjmp	.-338    	; 0x790 <_ZN6Effect17renderfunc_rotateEm+0x1ba>
     8e2:	54 e0       	ldi	r21, 0x04	; 4
     8e4:	d5 2e       	mov	r13, r21
     8e6:	c0 e0       	ldi	r28, 0x00	; 0
     8e8:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	84 2e       	mov	r8, r20
     8ee:	91 2c       	mov	r9, r1
     8f0:	a1 2c       	mov	r10, r1
     8f2:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
     8f4:	cc 2e       	mov	r12, r28
     8f6:	9e 01       	movw	r18, r28
     8f8:	2c 5f       	subi	r18, 0xFC	; 252
     8fa:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     8fc:	d5 01       	movw	r26, r10
     8fe:	c4 01       	movw	r24, r8
     900:	02 2e       	mov	r0, r18
     902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	0a 94       	dec	r0
     90e:	d2 f7       	brpl	.-12     	; 0x904 <__stack+0x5>
     910:	8e 21       	and	r24, r14
     912:	9f 21       	and	r25, r15
     914:	a0 23       	and	r26, r16
     916:	b1 23       	and	r27, r17
     918:	04 c0       	rjmp	.+8      	; 0x922 <__stack+0x23>
     91a:	b6 95       	lsr	r27
     91c:	a7 95       	ror	r26
     91e:	97 95       	ror	r25
     920:	87 95       	ror	r24
     922:	2a 95       	dec	r18
     924:	d2 f7       	brpl	.-12     	; 0x91a <__stack+0x1b>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	29 f4       	brne	.+10     	; 0x938 <__stack+0x39>
					LedCube::setpixel(2,4,z);
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	64 e0       	ldi	r22, 0x04	; 4
     932:	4d 2d       	mov	r20, r13
     934:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     938:	9e 01       	movw	r18, r28
     93a:	2d 5f       	subi	r18, 0xFD	; 253
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     93e:	d5 01       	movw	r26, r10
     940:	c4 01       	movw	r24, r8
     942:	02 2e       	mov	r0, r18
     944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0x4f>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	aa 1f       	adc	r26, r26
     94c:	bb 1f       	adc	r27, r27
     94e:	0a 94       	dec	r0
     950:	d2 f7       	brpl	.-12     	; 0x946 <__stack+0x47>
     952:	8e 21       	and	r24, r14
     954:	9f 21       	and	r25, r15
     956:	a0 23       	and	r26, r16
     958:	b1 23       	and	r27, r17
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__stack+0x65>
     95c:	b6 95       	lsr	r27
     95e:	a7 95       	ror	r26
     960:	97 95       	ror	r25
     962:	87 95       	ror	r24
     964:	2a 95       	dec	r18
     966:	d2 f7       	brpl	.-12     	; 0x95c <__stack+0x5d>
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	a1 05       	cpc	r26, r1
     96c:	b1 05       	cpc	r27, r1
     96e:	29 f4       	brne	.+10     	; 0x97a <__stack+0x7b>
					LedCube::setpixel(2,3,z);
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	63 e0       	ldi	r22, 0x03	; 3
     974:	4d 2d       	mov	r20, r13
     976:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     97a:	9e 01       	movw	r18, r28
     97c:	2e 5f       	subi	r18, 0xFE	; 254
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     980:	d5 01       	movw	r26, r10
     982:	c4 01       	movw	r24, r8
     984:	02 2e       	mov	r0, r18
     986:	04 c0       	rjmp	.+8      	; 0x990 <__stack+0x91>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__stack+0x89>
     994:	8e 21       	and	r24, r14
     996:	9f 21       	and	r25, r15
     998:	a0 23       	and	r26, r16
     99a:	b1 23       	and	r27, r17
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0xa7>
     99e:	b6 95       	lsr	r27
     9a0:	a7 95       	ror	r26
     9a2:	97 95       	ror	r25
     9a4:	87 95       	ror	r24
     9a6:	2a 95       	dec	r18
     9a8:	d2 f7       	brpl	.-12     	; 0x99e <__stack+0x9f>
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	a1 05       	cpc	r26, r1
     9ae:	b1 05       	cpc	r27, r1
     9b0:	29 f4       	brne	.+10     	; 0x9bc <__stack+0xbd>
					LedCube::setpixel(2,2,z);
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	62 e0       	ldi	r22, 0x02	; 2
     9b6:	4d 2d       	mov	r20, r13
     9b8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     9bc:	9e 01       	movw	r18, r28
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     9c2:	d5 01       	movw	r26, r10
     9c4:	c4 01       	movw	r24, r8
     9c6:	02 2e       	mov	r0, r18
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__stack+0xd3>
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	aa 1f       	adc	r26, r26
     9d0:	bb 1f       	adc	r27, r27
     9d2:	0a 94       	dec	r0
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__stack+0xcb>
     9d6:	8e 21       	and	r24, r14
     9d8:	9f 21       	and	r25, r15
     9da:	a0 23       	and	r26, r16
     9dc:	b1 23       	and	r27, r17
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__stack+0xe9>
     9e0:	b6 95       	lsr	r27
     9e2:	a7 95       	ror	r26
     9e4:	97 95       	ror	r25
     9e6:	87 95       	ror	r24
     9e8:	2a 95       	dec	r18
     9ea:	d2 f7       	brpl	.-12     	; 0x9e0 <__stack+0xe1>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	a1 05       	cpc	r26, r1
     9f0:	b1 05       	cpc	r27, r1
     9f2:	29 f4       	brne	.+10     	; 0x9fe <__stack+0xff>
					LedCube::setpixel(2,1,z);
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	4d 2d       	mov	r20, r13
     9fa:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     9fe:	d5 01       	movw	r26, r10
     a00:	c4 01       	movw	r24, r8
     a02:	0c 2c       	mov	r0, r12
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__stack+0x10f>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	aa 1f       	adc	r26, r26
     a0c:	bb 1f       	adc	r27, r27
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__stack+0x107>
     a12:	8e 21       	and	r24, r14
     a14:	9f 21       	and	r25, r15
     a16:	a0 23       	and	r26, r16
     a18:	b1 23       	and	r27, r17
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__stack+0x125>
     a1c:	b6 95       	lsr	r27
     a1e:	a7 95       	ror	r26
     a20:	97 95       	ror	r25
     a22:	87 95       	ror	r24
     a24:	ca 94       	dec	r12
     a26:	d2 f7       	brpl	.-12     	; 0xa1c <__stack+0x11d>
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	29 f4       	brne	.+10     	; 0xa3a <__stack+0x13b>
					LedCube::setpixel(2,0,z);
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	4d 2d       	mov	r20, r13
     a36:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     a3a:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
     a3c:	dd 20       	and	r13, r13
     a3e:	09 f4       	brne	.+2      	; 0xa42 <__stack+0x143>
     a40:	65 c1       	rjmp	.+714    	; 0xd0c <__stack+0x40d>
     a42:	da 94       	dec	r13
     a44:	57 cf       	rjmp	.-338    	; 0x8f4 <_ZN6Effect17renderfunc_rotateEm+0x31e>
     a46:	34 e0       	ldi	r19, 0x04	; 4
     a48:	d3 2e       	mov	r13, r19
     a4a:	c0 e0       	ldi	r28, 0x00	; 0
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	82 2e       	mov	r8, r18
     a52:	91 2c       	mov	r9, r1
     a54:	a1 2c       	mov	r10, r1
     a56:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
     a58:	cc 2e       	mov	r12, r28
     a5a:	9e 01       	movw	r18, r28
     a5c:	2c 5f       	subi	r18, 0xFC	; 252
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     a60:	d5 01       	movw	r26, r10
     a62:	c4 01       	movw	r24, r8
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__stack+0x171>
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	aa 1f       	adc	r26, r26
     a6e:	bb 1f       	adc	r27, r27
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__stack+0x169>
     a74:	8e 21       	and	r24, r14
     a76:	9f 21       	and	r25, r15
     a78:	a0 23       	and	r26, r16
     a7a:	b1 23       	and	r27, r17
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__stack+0x187>
     a7e:	b6 95       	lsr	r27
     a80:	a7 95       	ror	r26
     a82:	97 95       	ror	r25
     a84:	87 95       	ror	r24
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__stack+0x17f>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	29 f4       	brne	.+10     	; 0xa9c <__stack+0x19d>
					LedCube::setpixel(4,0,z);
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	4d 2d       	mov	r20, r13
     a98:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     a9c:	9e 01       	movw	r18, r28
     a9e:	2d 5f       	subi	r18, 0xFD	; 253
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     aa2:	d5 01       	movw	r26, r10
     aa4:	c4 01       	movw	r24, r8
     aa6:	02 2e       	mov	r0, r18
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__stack+0x1b3>
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	aa 1f       	adc	r26, r26
     ab0:	bb 1f       	adc	r27, r27
     ab2:	0a 94       	dec	r0
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__stack+0x1ab>
     ab6:	8e 21       	and	r24, r14
     ab8:	9f 21       	and	r25, r15
     aba:	a0 23       	and	r26, r16
     abc:	b1 23       	and	r27, r17
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x1c9>
     ac0:	b6 95       	lsr	r27
     ac2:	a7 95       	ror	r26
     ac4:	97 95       	ror	r25
     ac6:	87 95       	ror	r24
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x1c1>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	29 f4       	brne	.+10     	; 0xade <__stack+0x1df>
					LedCube::setpixel(3,1,z);
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	4d 2d       	mov	r20, r13
     ada:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     ade:	9e 01       	movw	r18, r28
     ae0:	2e 5f       	subi	r18, 0xFE	; 254
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     ae4:	d5 01       	movw	r26, r10
     ae6:	c4 01       	movw	r24, r8
     ae8:	02 2e       	mov	r0, r18
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <__stack+0x1f5>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	aa 1f       	adc	r26, r26
     af2:	bb 1f       	adc	r27, r27
     af4:	0a 94       	dec	r0
     af6:	d2 f7       	brpl	.-12     	; 0xaec <__stack+0x1ed>
     af8:	8e 21       	and	r24, r14
     afa:	9f 21       	and	r25, r15
     afc:	a0 23       	and	r26, r16
     afe:	b1 23       	and	r27, r17
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__stack+0x20b>
     b02:	b6 95       	lsr	r27
     b04:	a7 95       	ror	r26
     b06:	97 95       	ror	r25
     b08:	87 95       	ror	r24
     b0a:	2a 95       	dec	r18
     b0c:	d2 f7       	brpl	.-12     	; 0xb02 <__stack+0x203>
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	a1 05       	cpc	r26, r1
     b12:	b1 05       	cpc	r27, r1
     b14:	29 f4       	brne	.+10     	; 0xb20 <__stack+0x221>
					LedCube::setpixel(2,2,z);
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	4d 2d       	mov	r20, r13
     b1c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     b20:	9e 01       	movw	r18, r28
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     b26:	d5 01       	movw	r26, r10
     b28:	c4 01       	movw	r24, r8
     b2a:	02 2e       	mov	r0, r18
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x237>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	aa 1f       	adc	r26, r26
     b34:	bb 1f       	adc	r27, r27
     b36:	0a 94       	dec	r0
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x22f>
     b3a:	8e 21       	and	r24, r14
     b3c:	9f 21       	and	r25, r15
     b3e:	a0 23       	and	r26, r16
     b40:	b1 23       	and	r27, r17
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <__stack+0x24d>
     b44:	b6 95       	lsr	r27
     b46:	a7 95       	ror	r26
     b48:	97 95       	ror	r25
     b4a:	87 95       	ror	r24
     b4c:	2a 95       	dec	r18
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <__stack+0x245>
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	29 f4       	brne	.+10     	; 0xb62 <__stack+0x263>
					LedCube::setpixel(1,3,z);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	4d 2d       	mov	r20, r13
     b5e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     b62:	d5 01       	movw	r26, r10
     b64:	c4 01       	movw	r24, r8
     b66:	0c 2c       	mov	r0, r12
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <__stack+0x273>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	0a 94       	dec	r0
     b74:	d2 f7       	brpl	.-12     	; 0xb6a <__stack+0x26b>
     b76:	8e 21       	and	r24, r14
     b78:	9f 21       	and	r25, r15
     b7a:	a0 23       	and	r26, r16
     b7c:	b1 23       	and	r27, r17
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__stack+0x289>
     b80:	b6 95       	lsr	r27
     b82:	a7 95       	ror	r26
     b84:	97 95       	ror	r25
     b86:	87 95       	ror	r24
     b88:	ca 94       	dec	r12
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <__stack+0x281>
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	29 f4       	brne	.+10     	; 0xb9e <__stack+0x29f>
					LedCube::setpixel(0,4,z);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	64 e0       	ldi	r22, 0x04	; 4
     b98:	4d 2d       	mov	r20, r13
     b9a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     b9e:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
     ba0:	dd 20       	and	r13, r13
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__stack+0x2a7>
     ba4:	b3 c0       	rjmp	.+358    	; 0xd0c <__stack+0x40d>
     ba6:	da 94       	dec	r13
     ba8:	57 cf       	rjmp	.-338    	; 0xa58 <__stack+0x159>
     baa:	94 e0       	ldi	r25, 0x04	; 4
     bac:	d9 2e       	mov	r13, r25
     bae:	c0 e0       	ldi	r28, 0x00	; 0
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	88 2e       	mov	r8, r24
     bb6:	91 2c       	mov	r9, r1
     bb8:	a1 2c       	mov	r10, r1
     bba:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
     bbc:	cc 2e       	mov	r12, r28
     bbe:	9e 01       	movw	r18, r28
     bc0:	2c 5f       	subi	r18, 0xFC	; 252
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     bc4:	d5 01       	movw	r26, r10
     bc6:	c4 01       	movw	r24, r8
     bc8:	02 2e       	mov	r0, r18
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__stack+0x2d5>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	aa 1f       	adc	r26, r26
     bd2:	bb 1f       	adc	r27, r27
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__stack+0x2cd>
     bd8:	8e 21       	and	r24, r14
     bda:	9f 21       	and	r25, r15
     bdc:	a0 23       	and	r26, r16
     bde:	b1 23       	and	r27, r17
     be0:	04 c0       	rjmp	.+8      	; 0xbea <__stack+0x2eb>
     be2:	b6 95       	lsr	r27
     be4:	a7 95       	ror	r26
     be6:	97 95       	ror	r25
     be8:	87 95       	ror	r24
     bea:	2a 95       	dec	r18
     bec:	d2 f7       	brpl	.-12     	; 0xbe2 <__stack+0x2e3>
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	a1 05       	cpc	r26, r1
     bf2:	b1 05       	cpc	r27, r1
     bf4:	29 f4       	brne	.+10     	; 0xc00 <__stack+0x301>
					LedCube::setpixel(0,2,z);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	4d 2d       	mov	r20, r13
     bfc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     c00:	9e 01       	movw	r18, r28
     c02:	2d 5f       	subi	r18, 0xFD	; 253
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     c06:	d5 01       	movw	r26, r10
     c08:	c4 01       	movw	r24, r8
     c0a:	02 2e       	mov	r0, r18
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <__stack+0x317>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	aa 1f       	adc	r26, r26
     c14:	bb 1f       	adc	r27, r27
     c16:	0a 94       	dec	r0
     c18:	d2 f7       	brpl	.-12     	; 0xc0e <__stack+0x30f>
     c1a:	8e 21       	and	r24, r14
     c1c:	9f 21       	and	r25, r15
     c1e:	a0 23       	and	r26, r16
     c20:	b1 23       	and	r27, r17
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__stack+0x32d>
     c24:	b6 95       	lsr	r27
     c26:	a7 95       	ror	r26
     c28:	97 95       	ror	r25
     c2a:	87 95       	ror	r24
     c2c:	2a 95       	dec	r18
     c2e:	d2 f7       	brpl	.-12     	; 0xc24 <__stack+0x325>
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	a1 05       	cpc	r26, r1
     c34:	b1 05       	cpc	r27, r1
     c36:	29 f4       	brne	.+10     	; 0xc42 <__stack+0x343>
					LedCube::setpixel(1,2,z);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	4d 2d       	mov	r20, r13
     c3e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     c42:	9e 01       	movw	r18, r28
     c44:	2e 5f       	subi	r18, 0xFE	; 254
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     c48:	d5 01       	movw	r26, r10
     c4a:	c4 01       	movw	r24, r8
     c4c:	02 2e       	mov	r0, r18
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__stack+0x359>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	aa 1f       	adc	r26, r26
     c56:	bb 1f       	adc	r27, r27
     c58:	0a 94       	dec	r0
     c5a:	d2 f7       	brpl	.-12     	; 0xc50 <__stack+0x351>
     c5c:	8e 21       	and	r24, r14
     c5e:	9f 21       	and	r25, r15
     c60:	a0 23       	and	r26, r16
     c62:	b1 23       	and	r27, r17
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <__stack+0x36f>
     c66:	b6 95       	lsr	r27
     c68:	a7 95       	ror	r26
     c6a:	97 95       	ror	r25
     c6c:	87 95       	ror	r24
     c6e:	2a 95       	dec	r18
     c70:	d2 f7       	brpl	.-12     	; 0xc66 <__stack+0x367>
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	a1 05       	cpc	r26, r1
     c76:	b1 05       	cpc	r27, r1
     c78:	29 f4       	brne	.+10     	; 0xc84 <__stack+0x385>
					LedCube::setpixel(2,2,z);
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	62 e0       	ldi	r22, 0x02	; 2
     c7e:	4d 2d       	mov	r20, r13
     c80:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     c84:	9e 01       	movw	r18, r28
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     c8a:	d5 01       	movw	r26, r10
     c8c:	c4 01       	movw	r24, r8
     c8e:	02 2e       	mov	r0, r18
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__stack+0x39b>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	0a 94       	dec	r0
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__stack+0x393>
     c9e:	8e 21       	and	r24, r14
     ca0:	9f 21       	and	r25, r15
     ca2:	a0 23       	and	r26, r16
     ca4:	b1 23       	and	r27, r17
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <__stack+0x3b1>
     ca8:	b6 95       	lsr	r27
     caa:	a7 95       	ror	r26
     cac:	97 95       	ror	r25
     cae:	87 95       	ror	r24
     cb0:	2a 95       	dec	r18
     cb2:	d2 f7       	brpl	.-12     	; 0xca8 <__stack+0x3a9>
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	29 f4       	brne	.+10     	; 0xcc6 <__stack+0x3c7>
					LedCube::setpixel(3,2,z);
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	4d 2d       	mov	r20, r13
     cc2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     cc6:	d5 01       	movw	r26, r10
     cc8:	c4 01       	movw	r24, r8
     cca:	0c 2c       	mov	r0, r12
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <__stack+0x3d7>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	aa 1f       	adc	r26, r26
     cd4:	bb 1f       	adc	r27, r27
     cd6:	0a 94       	dec	r0
     cd8:	d2 f7       	brpl	.-12     	; 0xcce <__stack+0x3cf>
     cda:	8e 21       	and	r24, r14
     cdc:	9f 21       	and	r25, r15
     cde:	a0 23       	and	r26, r16
     ce0:	b1 23       	and	r27, r17
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__stack+0x3ed>
     ce4:	b6 95       	lsr	r27
     ce6:	a7 95       	ror	r26
     ce8:	97 95       	ror	r25
     cea:	87 95       	ror	r24
     cec:	ca 94       	dec	r12
     cee:	d2 f7       	brpl	.-12     	; 0xce4 <__stack+0x3e5>
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	29 f4       	brne	.+10     	; 0xd02 <__stack+0x403>
					LedCube::setpixel(4,2,z);
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	4d 2d       	mov	r20, r13
     cfe:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     d02:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
     d04:	dd 20       	and	r13, r13
     d06:	11 f0       	breq	.+4      	; 0xd0c <__stack+0x40d>
     d08:	da 94       	dec	r13
     d0a:	58 cf       	rjmp	.-336    	; 0xbbc <__stack+0x2bd>
					LedCube::setpixel(4,2,z);
			}
		break;
	}

}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	08 95       	ret

00000d26 <_ZN6Effect16renderfunc_slideEm>:
	default:
		break;
	}
}

void Effect::renderfunc_slide(uint32_t matrix)
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	3c 01       	movw	r6, r24
     d42:	7a 01       	movw	r14, r20
     d44:	8b 01       	movw	r16, r22
     d46:	b4 e0       	ldi	r27, 0x04	; 4
     d48:	db 2e       	mov	r13, r27
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
			if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     d4e:	a1 e0       	ldi	r26, 0x01	; 1
     d50:	8a 2e       	mov	r8, r26
     d52:	91 2c       	mov	r9, r1
     d54:	a1 2c       	mov	r10, r1
     d56:	b1 2c       	mov	r11, r1
     d58:	d5 01       	movw	r26, r10
     d5a:	c4 01       	movw	r24, r8
     d5c:	0c 2e       	mov	r0, r28
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <_ZN6Effect16renderfunc_slideEm+0x42>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	aa 1f       	adc	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	0a 94       	dec	r0
     d6a:	d2 f7       	brpl	.-12     	; 0xd60 <_ZN6Effect16renderfunc_slideEm+0x3a>
     d6c:	8e 21       	and	r24, r14
     d6e:	9f 21       	and	r25, r15
     d70:	a0 23       	and	r26, r16
     d72:	b1 23       	and	r27, r17
     d74:	0c 2e       	mov	r0, r28
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <_ZN6Effect16renderfunc_slideEm+0x5a>
     d78:	b6 95       	lsr	r27
     d7a:	a7 95       	ror	r26
     d7c:	97 95       	ror	r25
     d7e:	87 95       	ror	r24
     d80:	0a 94       	dec	r0
     d82:	d2 f7       	brpl	.-12     	; 0xd78 <_ZN6Effect16renderfunc_slideEm+0x52>
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	a1 05       	cpc	r26, r1
     d88:	b1 05       	cpc	r27, r1
     d8a:	31 f4       	brne	.+12     	; 0xd98 <_ZN6Effect16renderfunc_slideEm+0x72>
				LedCube::setpixel(4,_frame,z);
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	f3 01       	movw	r30, r6
     d90:	65 81       	ldd	r22, Z+5	; 0x05
     d92:	4d 2d       	mov	r20, r13
     d94:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     d98:	9e 01       	movw	r18, r28
     d9a:	2f 5f       	subi	r18, 0xFF	; 255
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     d9e:	d5 01       	movw	r26, r10
     da0:	c4 01       	movw	r24, r8
     da2:	02 2e       	mov	r0, r18
     da4:	04 c0       	rjmp	.+8      	; 0xdae <_ZN6Effect16renderfunc_slideEm+0x88>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 1f       	adc	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	0a 94       	dec	r0
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <_ZN6Effect16renderfunc_slideEm+0x80>
     db2:	8e 21       	and	r24, r14
     db4:	9f 21       	and	r25, r15
     db6:	a0 23       	and	r26, r16
     db8:	b1 23       	and	r27, r17
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <_ZN6Effect16renderfunc_slideEm+0x9e>
     dbc:	b6 95       	lsr	r27
     dbe:	a7 95       	ror	r26
     dc0:	97 95       	ror	r25
     dc2:	87 95       	ror	r24
     dc4:	2a 95       	dec	r18
     dc6:	d2 f7       	brpl	.-12     	; 0xdbc <_ZN6Effect16renderfunc_slideEm+0x96>
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	a1 05       	cpc	r26, r1
     dcc:	b1 05       	cpc	r27, r1
     dce:	31 f4       	brne	.+12     	; 0xddc <_ZN6Effect16renderfunc_slideEm+0xb6>
				LedCube::setpixel(3,_frame,z);
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	f3 01       	movw	r30, r6
     dd4:	65 81       	ldd	r22, Z+5	; 0x05
     dd6:	4d 2d       	mov	r20, r13
     dd8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     ddc:	9e 01       	movw	r18, r28
     dde:	2e 5f       	subi	r18, 0xFE	; 254
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     de2:	d5 01       	movw	r26, r10
     de4:	c4 01       	movw	r24, r8
     de6:	02 2e       	mov	r0, r18
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <_ZN6Effect16renderfunc_slideEm+0xcc>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	aa 1f       	adc	r26, r26
     df0:	bb 1f       	adc	r27, r27
     df2:	0a 94       	dec	r0
     df4:	d2 f7       	brpl	.-12     	; 0xdea <_ZN6Effect16renderfunc_slideEm+0xc4>
     df6:	8e 21       	and	r24, r14
     df8:	9f 21       	and	r25, r15
     dfa:	a0 23       	and	r26, r16
     dfc:	b1 23       	and	r27, r17
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <_ZN6Effect16renderfunc_slideEm+0xe2>
     e00:	b6 95       	lsr	r27
     e02:	a7 95       	ror	r26
     e04:	97 95       	ror	r25
     e06:	87 95       	ror	r24
     e08:	2a 95       	dec	r18
     e0a:	d2 f7       	brpl	.-12     	; 0xe00 <_ZN6Effect16renderfunc_slideEm+0xda>
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	a1 05       	cpc	r26, r1
     e10:	b1 05       	cpc	r27, r1
     e12:	31 f4       	brne	.+12     	; 0xe20 <_ZN6Effect16renderfunc_slideEm+0xfa>
				LedCube::setpixel(2,_frame,z);
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	f3 01       	movw	r30, r6
     e18:	65 81       	ldd	r22, Z+5	; 0x05
     e1a:	4d 2d       	mov	r20, r13
     e1c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     e20:	9e 01       	movw	r18, r28
     e22:	2d 5f       	subi	r18, 0xFD	; 253
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     e26:	d5 01       	movw	r26, r10
     e28:	c4 01       	movw	r24, r8
     e2a:	02 2e       	mov	r0, r18
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <_ZN6Effect16renderfunc_slideEm+0x110>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	0a 94       	dec	r0
     e38:	d2 f7       	brpl	.-12     	; 0xe2e <_ZN6Effect16renderfunc_slideEm+0x108>
     e3a:	8e 21       	and	r24, r14
     e3c:	9f 21       	and	r25, r15
     e3e:	a0 23       	and	r26, r16
     e40:	b1 23       	and	r27, r17
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <_ZN6Effect16renderfunc_slideEm+0x126>
     e44:	b6 95       	lsr	r27
     e46:	a7 95       	ror	r26
     e48:	97 95       	ror	r25
     e4a:	87 95       	ror	r24
     e4c:	2a 95       	dec	r18
     e4e:	d2 f7       	brpl	.-12     	; 0xe44 <_ZN6Effect16renderfunc_slideEm+0x11e>
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	a1 05       	cpc	r26, r1
     e54:	b1 05       	cpc	r27, r1
     e56:	31 f4       	brne	.+12     	; 0xe64 <_ZN6Effect16renderfunc_slideEm+0x13e>
				LedCube::setpixel(1,_frame,z);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	f3 01       	movw	r30, r6
     e5c:	65 81       	ldd	r22, Z+5	; 0x05
     e5e:	4d 2d       	mov	r20, r13
     e60:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     e64:	9e 01       	movw	r18, r28
     e66:	2c 5f       	subi	r18, 0xFC	; 252
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     e6a:	d5 01       	movw	r26, r10
     e6c:	c4 01       	movw	r24, r8
     e6e:	02 2e       	mov	r0, r18
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <_ZN6Effect16renderfunc_slideEm+0x154>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	aa 1f       	adc	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	0a 94       	dec	r0
     e7c:	d2 f7       	brpl	.-12     	; 0xe72 <_ZN6Effect16renderfunc_slideEm+0x14c>
     e7e:	8e 21       	and	r24, r14
     e80:	9f 21       	and	r25, r15
     e82:	a0 23       	and	r26, r16
     e84:	b1 23       	and	r27, r17
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <_ZN6Effect16renderfunc_slideEm+0x16a>
     e88:	b6 95       	lsr	r27
     e8a:	a7 95       	ror	r26
     e8c:	97 95       	ror	r25
     e8e:	87 95       	ror	r24
     e90:	2a 95       	dec	r18
     e92:	d2 f7       	brpl	.-12     	; 0xe88 <_ZN6Effect16renderfunc_slideEm+0x162>
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	a1 05       	cpc	r26, r1
     e98:	b1 05       	cpc	r27, r1
     e9a:	31 f4       	brne	.+12     	; 0xea8 <_ZN6Effect16renderfunc_slideEm+0x182>
				LedCube::setpixel(0,_frame,z);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	f3 01       	movw	r30, r6
     ea0:	65 81       	ldd	r22, Z+5	; 0x05
     ea2:	4d 2d       	mov	r20, r13
     ea4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
     ea8:	25 96       	adiw	r28, 0x05	; 5
}

void Effect::renderfunc_slide(uint32_t matrix)
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
     eaa:	dd 20       	and	r13, r13
     eac:	11 f0       	breq	.+4      	; 0xeb2 <_ZN6Effect16renderfunc_slideEm+0x18c>
     eae:	da 94       	dec	r13
     eb0:	53 cf       	rjmp	.-346    	; 0xd58 <_ZN6Effect16renderfunc_slideEm+0x32>
			if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
				LedCube::setpixel(1,_frame,z);
			if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
				LedCube::setpixel(0,_frame,z);
		}
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	7f 90       	pop	r7
     eca:	6f 90       	pop	r6
     ecc:	08 95       	ret

00000ece <_ZN6Effect13render_matrixEm>:
			}
		}
	}
}

void Effect::render_matrix(uint32_t matrix)
     ece:	fc 01       	movw	r30, r24
{
	switch(this->_mod){
     ed0:	84 81       	ldd	r24, Z+4	; 0x04
     ed2:	81 32       	cpi	r24, 0x21	; 33
     ed4:	31 f0       	breq	.+12     	; 0xee2 <_ZN6Effect13render_matrixEm+0x14>
     ed6:	82 32       	cpi	r24, 0x22	; 34
     ed8:	39 f4       	brne	.+14     	; 0xee8 <_ZN6Effect13render_matrixEm+0x1a>
	case MOD_ROTATE:
		this->renderfunc_rotate(matrix);
     eda:	cf 01       	movw	r24, r30
     edc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_ZN6Effect17renderfunc_rotateEm>
     ee0:	08 95       	ret
		break;
	case MOD_SLIDE:
		this->renderfunc_slide(matrix);
     ee2:	cf 01       	movw	r24, r30
     ee4:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN6Effect16renderfunc_slideEm>
     ee8:	08 95       	ret

00000eea <_ZN6Effect5debugEhhh>:
{
	LedCube::plane(z);
	LedCube::transfer(number);
}

void Effect::debug(byte x, byte y, byte z)
     eea:	86 2f       	mov	r24, r22
{
	LedCube::setpixel(x,y,z);
     eec:	64 2f       	mov	r22, r20
     eee:	42 2f       	mov	r20, r18
     ef0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
}
     ef4:	08 95       	ret

00000ef6 <_ZN6Effect7bubblesEv>:
	LedCube::plane(random(5));
	LedCube::transfer(random(25));
	delay(this->_milli);
}

void Effect::bubbles()
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ec 01       	movw	r28, r24
{
	byte x = random(5),y=random(5);
     f02:	65 e0       	ldi	r22, 0x05	; 5
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_Z6randoml>
     f0e:	f6 2e       	mov	r15, r22
     f10:	65 e0       	ldi	r22, 0x05	; 5
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_Z6randoml>
     f1c:	06 2f       	mov	r16, r22
     f1e:	10 e0       	ldi	r17, 0x00	; 0
	for(byte z=0;z<5;z++){
			LedCube::setpixel(x,y,z);
     f20:	8f 2d       	mov	r24, r15
     f22:	60 2f       	mov	r22, r16
     f24:	41 2f       	mov	r20, r17
     f26:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
			if(this->_milli > 1)
     f2a:	6a 81       	ldd	r22, Y+2	; 0x02
     f2c:	7b 81       	ldd	r23, Y+3	; 0x03
     f2e:	62 30       	cpi	r22, 0x02	; 2
     f30:	71 05       	cpc	r23, r1
     f32:	30 f0       	brcs	.+12     	; 0xf40 <_ZN6Effect7bubblesEv+0x4a>
				delay(this->_milli/2);
     f34:	76 95       	lsr	r23
     f36:	67 95       	ror	r22
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <delay>
}

void Effect::bubbles()
{
	byte x = random(5),y=random(5);
	for(byte z=0;z<5;z++){
     f40:	1f 5f       	subi	r17, 0xFF	; 255
     f42:	15 30       	cpi	r17, 0x05	; 5
     f44:	69 f7       	brne	.-38     	; 0xf20 <_ZN6Effect7bubblesEv+0x2a>
			LedCube::setpixel(x,y,z);
			if(this->_milli > 1)
				delay(this->_milli/2);
	}
	delay(this->_milli);
     f46:	6a 81       	ldd	r22, Y+2	; 0x02
     f48:	7b 81       	ldd	r23, Y+3	; 0x03
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <delay>
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	08 95       	ret

00000f5e <_ZN6Effect5debugEhh>:
		}

	this->_mod = mod;
}

void Effect::debug(byte number, byte z)
     f5e:	1f 93       	push	r17
     f60:	16 2f       	mov	r17, r22
     f62:	84 2f       	mov	r24, r20
{
	LedCube::plane(z);
     f64:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN7LedCube5planeEh>
	LedCube::transfer(number);
     f68:	81 2f       	mov	r24, r17
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
}
     f70:	1f 91       	pop	r17
     f72:	08 95       	ret

00000f74 <_ZN6Effect5musicEv>:

		}
	}
}

void Effect::music()
     f74:	4f 92       	push	r4
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	e3 97       	sbiw	r28, 0x33	; 51
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	8c 01       	movw	r16, r24
{
	int i = 1,y=0,z=0,bar[25],avg;

	unsigned int milli = 10;
	unsigned long t = millis();
     fa4:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>

	getmic();
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN6Effect6getmicEv>
	fft_generate();
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6Effect12fft_generateEv>
     fb4:	2e 01       	movw	r4, r28
     fb6:	08 94       	sec
     fb8:	41 1c       	adc	r4, r1
     fba:	51 1c       	adc	r5, r1
     fbc:	5a e0       	ldi	r21, 0x0A	; 10
     fbe:	e5 2e       	mov	r14, r21
     fc0:	51 e0       	ldi	r21, 0x01	; 1
     fc2:	f5 2e       	mov	r15, r21
     fc4:	e0 0e       	add	r14, r16
     fc6:	f1 1e       	adc	r15, r17
     fc8:	82 01       	movw	r16, r4
	for(int i = 1; i < 64 ;t = millis(), i++,z++){
		for(avg = 0;avg<2;avg++){
			bar[z] += _fft_last[i++];
		}

		if((bar[z] /= 2) > 5) bar[z] = 5;
     fca:	45 e0       	ldi	r20, 0x05	; 5
     fcc:	84 2e       	mov	r8, r20
     fce:	91 2c       	mov	r9, r1
	unsigned long t = millis();

	getmic();
	fft_generate();

	for(int i = 1; i < 64 ;t = millis(), i++,z++){
     fd0:	3b e2       	ldi	r19, 0x2B	; 43
     fd2:	a3 2e       	mov	r10, r19
     fd4:	b1 2c       	mov	r11, r1
     fd6:	ac 0e       	add	r10, r28
     fd8:	bd 1e       	adc	r11, r29
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <_ZN6Effect5musicEv+0x84>
		for(avg = 0;avg<2;avg++){
			bar[z] += _fft_last[i++];
		}

		if((bar[z] /= 2) > 5) bar[z] = 5;
     fdc:	f8 01       	movw	r30, r16
     fde:	91 82       	std	Z+1, r9	; 0x01
     fe0:	80 82       	st	Z, r8
	unsigned long t = millis();

	getmic();
	fft_generate();

	for(int i = 1; i < 64 ;t = millis(), i++,z++){
     fe2:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
     fe6:	0e 5f       	subi	r16, 0xFE	; 254
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	23 e0       	ldi	r18, 0x03	; 3
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	e2 0e       	add	r14, r18
     ff0:	f3 1e       	adc	r15, r19
     ff2:	0a 15       	cp	r16, r10
     ff4:	1b 05       	cpc	r17, r11
     ff6:	e1 f1       	breq	.+120    	; 0x1070 <_ZN6Effect5musicEv+0xfc>
		for(avg = 0;avg<2;avg++){
			bar[z] += _fft_last[i++];
     ff8:	f7 01       	movw	r30, r14
     ffa:	80 81       	ld	r24, Z
     ffc:	99 27       	eor	r25, r25
     ffe:	87 fd       	sbrc	r24, 7
    1000:	90 95       	com	r25
    1002:	f8 01       	movw	r30, r16
    1004:	20 81       	ld	r18, Z
    1006:	31 81       	ldd	r19, Z+1	; 0x01
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	f7 01       	movw	r30, r14
    100e:	21 81       	ldd	r18, Z+1	; 0x01
    1010:	33 27       	eor	r19, r19
    1012:	27 fd       	sbrc	r18, 7
    1014:	30 95       	com	r19
		}

		if((bar[z] /= 2) > 5) bar[z] = 5;
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	62 e0       	ldi	r22, 0x02	; 2
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	0e 94 26 14 	call	0x284c	; 0x284c <__divmodhi4>
    1022:	f8 01       	movw	r30, r16
    1024:	71 83       	std	Z+1, r23	; 0x01
    1026:	60 83       	st	Z, r22
    1028:	66 30       	cpi	r22, 0x06	; 6
    102a:	71 05       	cpc	r23, r1
    102c:	bc f6       	brge	.-82     	; 0xfdc <_ZN6Effect5musicEv+0x68>
    102e:	d9 cf       	rjmp	.-78     	; 0xfe2 <_ZN6Effect5musicEv+0x6e>

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
			for(i = 0;i<LEDS_PER_ROW;i++){
				for(z = 0;z<bar[i];z++){
					LedCube::setpixel(i,y,z);
    1030:	89 2f       	mov	r24, r25
    1032:	6d 2d       	mov	r22, r13
    1034:	40 2f       	mov	r20, r16
    1036:	9b ab       	std	Y+51, r25	; 0x33
    1038:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
	}

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
			for(i = 0;i<LEDS_PER_ROW;i++){
				for(z = 0;z<bar[i];z++){
    103c:	0f 5f       	subi	r16, 0xFF	; 255
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
    1040:	9b a9       	ldd	r25, Y+51	; 0x33
    1042:	0a 15       	cp	r16, r10
    1044:	1b 05       	cpc	r17, r11
    1046:	a4 f3       	brlt	.-24     	; 0x1030 <_ZN6Effect5musicEv+0xbc>
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	e2 0e       	add	r14, r18
    104e:	f3 1e       	adc	r15, r19
    1050:	9f 5f       	subi	r25, 0xFF	; 255
		if((bar[z] /= 2) > 5) bar[z] = 5;
	}

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
			for(i = 0;i<LEDS_PER_ROW;i++){
    1052:	95 30       	cpi	r25, 0x05	; 5
    1054:	31 f0       	breq	.+12     	; 0x1062 <_ZN6Effect5musicEv+0xee>
				for(z = 0;z<bar[i];z++){
    1056:	f7 01       	movw	r30, r14
    1058:	a0 80       	ld	r10, Z
    105a:	b1 80       	ldd	r11, Z+1	; 0x01
    105c:	00 e0       	ldi	r16, 0x00	; 0
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	f0 cf       	rjmp	.-32     	; 0x1042 <_ZN6Effect5musicEv+0xce>
    1062:	d3 94       	inc	r13

		if((bar[z] /= 2) > 5) bar[z] = 5;
	}

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
    1064:	f5 e0       	ldi	r31, 0x05	; 5
    1066:	df 16       	cp	r13, r31
    1068:	61 f0       	breq	.+24     	; 0x1082 <_ZN6Effect5musicEv+0x10e>
    106a:	72 01       	movw	r14, r4
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	f3 cf       	rjmp	.-26     	; 0x1056 <_ZN6Effect5musicEv+0xe2>
		}

		if((bar[z] /= 2) > 5) bar[z] = 5;
	}

	while(millis() < t + milli){
    1070:	2a e0       	ldi	r18, 0x0A	; 10
    1072:	62 2e       	mov	r6, r18
    1074:	71 2c       	mov	r7, r1
    1076:	81 2c       	mov	r8, r1
    1078:	91 2c       	mov	r9, r1
    107a:	66 0e       	add	r6, r22
    107c:	77 1e       	adc	r7, r23
    107e:	88 1e       	adc	r8, r24
    1080:	99 1e       	adc	r9, r25
    1082:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1086:	66 15       	cp	r22, r6
    1088:	77 05       	cpc	r23, r7
    108a:	88 05       	cpc	r24, r8
    108c:	99 05       	cpc	r25, r9
    108e:	10 f4       	brcc	.+4      	; 0x1094 <_ZN6Effect5musicEv+0x120>
    1090:	dd 24       	eor	r13, r13
    1092:	eb cf       	rjmp	.-42     	; 0x106a <_ZN6Effect5musicEv+0xf6>
					LedCube::setpixel(i,y,z);
				}
			}
		}
	}
}
    1094:	e3 96       	adiw	r28, 0x33	; 51
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	08 95       	ret

000010c0 <_ZN6Effect6bounceEv>:

void Effect::bounce()
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
{
	  unsigned int milli = this->_milli + 1;
    10d8:	fc 01       	movw	r30, r24
    10da:	02 81       	ldd	r16, Z+2	; 0x02
    10dc:	13 81       	ldd	r17, Z+3	; 0x03
    10de:	0f 5f       	subi	r16, 0xFF	; 255
    10e0:	1f 4f       	sbci	r17, 0xFF	; 255

	   unsigned long t = millis();
    10e2:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    10e6:	6b 01       	movw	r12, r22
    10e8:	7c 01       	movw	r14, r24
    10ea:	ce ef       	ldi	r28, 0xFE	; 254
    10ec:	df ef       	ldi	r29, 0xFF	; 255

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
	     while(millis() < t + milli){
    10ee:	48 01       	movw	r8, r16
    10f0:	aa 24       	eor	r10, r10
    10f2:	bb 24       	eor	r11, r11
    10f4:	27 c0       	rjmp	.+78     	; 0x1144 <_ZN6Effect6bounceEv+0x84>
	       LedSquare::displaycenter(constrain(z+2, 0, 4));
    10f6:	c3 30       	cpi	r28, 0x03	; 3
    10f8:	d1 05       	cpc	r29, r1
    10fa:	1c f0       	brlt	.+6      	; 0x1102 <_ZN6Effect6bounceEv+0x42>
    10fc:	84 e0       	ldi	r24, 0x04	; 4
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <_ZN6Effect6bounceEv+0x46>
    1102:	ce 01       	movw	r24, r28
    1104:	02 96       	adiw	r24, 0x02	; 2
    1106:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN9LedSquare13displaycenterEi>
	       LedSquare::displaysmall(constrain(z+1, 0, 4));
    110a:	ff ef       	ldi	r31, 0xFF	; 255
    110c:	ce 3f       	cpi	r28, 0xFE	; 254
    110e:	df 07       	cpc	r29, r31
    1110:	19 f4       	brne	.+6      	; 0x1118 <_ZN6Effect6bounceEv+0x58>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <_ZN6Effect6bounceEv+0x68>
    1118:	c4 30       	cpi	r28, 0x04	; 4
    111a:	d1 05       	cpc	r29, r1
    111c:	19 f4       	brne	.+6      	; 0x1124 <_ZN6Effect6bounceEv+0x64>
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <_ZN6Effect6bounceEv+0x68>
    1124:	ce 01       	movw	r24, r28
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN9LedSquare12displaysmallEi>
	       LedSquare::displaybig(constrain(z  , 0, 4));
    112c:	ce 01       	movw	r24, r28
    112e:	c5 30       	cpi	r28, 0x05	; 5
    1130:	d1 05       	cpc	r29, r1
    1132:	14 f0       	brlt	.+4      	; 0x1138 <_ZN6Effect6bounceEv+0x78>
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	97 ff       	sbrs	r25, 7
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <_ZN6Effect6bounceEv+0x80>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN9LedSquare10displaybigEi>
	  unsigned int milli = this->_milli + 1;

	   unsigned long t = millis();

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
	     while(millis() < t + milli){
    1144:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1148:	a7 01       	movw	r20, r14
    114a:	96 01       	movw	r18, r12
    114c:	28 0d       	add	r18, r8
    114e:	39 1d       	adc	r19, r9
    1150:	4a 1d       	adc	r20, r10
    1152:	5b 1d       	adc	r21, r11
    1154:	62 17       	cp	r22, r18
    1156:	73 07       	cpc	r23, r19
    1158:	84 07       	cpc	r24, r20
    115a:	95 07       	cpc	r25, r21
    115c:	60 f2       	brcs	.-104    	; 0x10f6 <_ZN6Effect6bounceEv+0x36>
{
	  unsigned int milli = this->_milli + 1;

	   unsigned long t = millis();

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
    115e:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1162:	6b 01       	movw	r12, r22
    1164:	7c 01       	movw	r14, r24
    1166:	21 96       	adiw	r28, 0x01	; 1
    1168:	c5 30       	cpi	r28, 0x05	; 5
    116a:	d1 05       	cpc	r29, r1
    116c:	59 f7       	brne	.-42     	; 0x1144 <_ZN6Effect6bounceEv+0x84>
	       LedSquare::displaysmall(constrain(z+1, 0, 4));
	       LedSquare::displaybig(constrain(z  , 0, 4));
	     }
	  }

	  t = millis();
    116e:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1172:	7b 01       	movw	r14, r22
    1174:	8c 01       	movw	r16, r24
    1176:	c4 e0       	ldi	r28, 0x04	; 4
    1178:	d0 e0       	ldi	r29, 0x00	; 0
    117a:	27 c0       	rjmp	.+78     	; 0x11ca <_ZN6Effect6bounceEv+0x10a>
	  for(int z = 4; z > -3; t = millis(), z--){
	     while(millis() < t + milli){
	    	 LedSquare::displaybig(constrain(z+2, 0, 4));
    117c:	c3 30       	cpi	r28, 0x03	; 3
    117e:	d1 05       	cpc	r29, r1
    1180:	1c f0       	brlt	.+6      	; 0x1188 <_ZN6Effect6bounceEv+0xc8>
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <_ZN6Effect6bounceEv+0xcc>
    1188:	ce 01       	movw	r24, r28
    118a:	02 96       	adiw	r24, 0x02	; 2
    118c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN9LedSquare10displaybigEi>
	    	 LedSquare::displaysmall(constrain(z+1, 0, 4));
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	ce 3f       	cpi	r28, 0xFE	; 254
    1194:	d8 07       	cpc	r29, r24
    1196:	19 f4       	brne	.+6      	; 0x119e <_ZN6Effect6bounceEv+0xde>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <_ZN6Effect6bounceEv+0xee>
    119e:	c4 30       	cpi	r28, 0x04	; 4
    11a0:	d1 05       	cpc	r29, r1
    11a2:	19 f4       	brne	.+6      	; 0x11aa <_ZN6Effect6bounceEv+0xea>
    11a4:	84 e0       	ldi	r24, 0x04	; 4
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <_ZN6Effect6bounceEv+0xee>
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN9LedSquare12displaysmallEi>
	    	 LedSquare::displaycenter(constrain(z  , 0, 4));
    11b2:	ce 01       	movw	r24, r28
    11b4:	c5 30       	cpi	r28, 0x05	; 5
    11b6:	d1 05       	cpc	r29, r1
    11b8:	14 f0       	brlt	.+4      	; 0x11be <_ZN6Effect6bounceEv+0xfe>
    11ba:	84 e0       	ldi	r24, 0x04	; 4
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	97 ff       	sbrs	r25, 7
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <_ZN6Effect6bounceEv+0x106>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN9LedSquare13displaycenterEi>
	     }
	  }

	  t = millis();
	  for(int z = 4; z > -3; t = millis(), z--){
	     while(millis() < t + milli){
    11ca:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    11ce:	a8 01       	movw	r20, r16
    11d0:	97 01       	movw	r18, r14
    11d2:	28 0d       	add	r18, r8
    11d4:	39 1d       	adc	r19, r9
    11d6:	4a 1d       	adc	r20, r10
    11d8:	5b 1d       	adc	r21, r11
    11da:	62 17       	cp	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	95 07       	cpc	r25, r21
    11e2:	60 f2       	brcs	.-104    	; 0x117c <_ZN6Effect6bounceEv+0xbc>
	       LedSquare::displaybig(constrain(z  , 0, 4));
	     }
	  }

	  t = millis();
	  for(int z = 4; z > -3; t = millis(), z--){
    11e4:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    11e8:	7b 01       	movw	r14, r22
    11ea:	8c 01       	movw	r16, r24
    11ec:	21 97       	sbiw	r28, 0x01	; 1
    11ee:	ef ef       	ldi	r30, 0xFF	; 255
    11f0:	cd 3f       	cpi	r28, 0xFD	; 253
    11f2:	de 07       	cpc	r29, r30
    11f4:	51 f7       	brne	.-44     	; 0x11ca <_ZN6Effect6bounceEv+0x10a>
	    	 LedSquare::displaybig(constrain(z+2, 0, 4));
	    	 LedSquare::displaysmall(constrain(z+1, 0, 4));
	    	 LedSquare::displaycenter(constrain(z  , 0, 4));
	     }
	  }
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	08 95       	ret

00001210 <_ZN6Effect14infinitesquareEv>:
	 		LedCube::draw(data,y,0);
		}
	}
}

void Effect::infinitesquare()
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
{
	unsigned int milli = this->_milli + 1;
    122e:	0a 81       	ldd	r16, Y+2	; 0x02
    1230:	1b 81       	ldd	r17, Y+3	; 0x03
    1232:	0f 5f       	subi	r16, 0xFF	; 255
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    1236:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    123a:	5b 01       	movw	r10, r22
    123c:	6c 01       	movw	r12, r24
    123e:	ee 24       	eor	r14, r14
    1240:	ff 24       	eor	r15, r15
	int i = 0;
	for(i = 0; i < CUBESIZE; t = millis(), i++, _infiniteval++){
		while(millis() < t + milli){
    1242:	38 01       	movw	r6, r16
    1244:	88 24       	eor	r8, r8
    1246:	99 24       	eor	r9, r9
    1248:	1a c0       	rjmp	.+52     	; 0x127e <_ZN6Effect14infinitesquareEv+0x6e>
			LedSquare::displaycenter(((_infiniteval+2)%LEDS_PER_ROW));
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	02 96       	adiw	r24, 0x02	; 2
    1250:	65 e0       	ldi	r22, 0x05	; 5
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	0e 94 12 14 	call	0x2824	; 0x2824 <__udivmodhi4>
    1258:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN9LedSquare13displaycenterEi>
			LedSquare::displaysmall(((_infiniteval+1)%LEDS_PER_ROW));
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	98 85       	ldd	r25, Y+8	; 0x08
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	65 e0       	ldi	r22, 0x05	; 5
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	0e 94 12 14 	call	0x2824	; 0x2824 <__udivmodhi4>
    126a:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN9LedSquare12displaysmallEi>
			LedSquare::displaybig(((_infiniteval  )%LEDS_PER_ROW));
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	98 85       	ldd	r25, Y+8	; 0x08
    1272:	65 e0       	ldi	r22, 0x05	; 5
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	0e 94 12 14 	call	0x2824	; 0x2824 <__udivmodhi4>
    127a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <_ZN9LedSquare10displaybigEi>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();
	int i = 0;
	for(i = 0; i < CUBESIZE; t = millis(), i++, _infiniteval++){
		while(millis() < t + milli){
    127e:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1282:	a6 01       	movw	r20, r12
    1284:	95 01       	movw	r18, r10
    1286:	26 0d       	add	r18, r6
    1288:	37 1d       	adc	r19, r7
    128a:	48 1d       	adc	r20, r8
    128c:	59 1d       	adc	r21, r9
    128e:	62 17       	cp	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	95 07       	cpc	r25, r21
    1296:	c8 f2       	brcs	.-78     	; 0x124a <_ZN6Effect14infinitesquareEv+0x3a>
void Effect::infinitesquare()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();
	int i = 0;
	for(i = 0; i < CUBESIZE; t = millis(), i++, _infiniteval++){
    1298:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    129c:	5b 01       	movw	r10, r22
    129e:	6c 01       	movw	r12, r24
    12a0:	08 94       	sec
    12a2:	e1 1c       	adc	r14, r1
    12a4:	f1 1c       	adc	r15, r1
    12a6:	8f 81       	ldd	r24, Y+7	; 0x07
    12a8:	98 85       	ldd	r25, Y+8	; 0x08
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	98 87       	std	Y+8, r25	; 0x08
    12ae:	8f 83       	std	Y+7, r24	; 0x07
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	e8 16       	cp	r14, r24
    12b4:	f1 04       	cpc	r15, r1
    12b6:	19 f7       	brne	.-58     	; 0x127e <_ZN6Effect14infinitesquareEv+0x6e>
			LedSquare::displaysmall(((_infiniteval+1)%LEDS_PER_ROW));
			LedSquare::displaybig(((_infiniteval  )%LEDS_PER_ROW));

		}
	}
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	7f 90       	pop	r7
    12d2:	6f 90       	pop	r6
    12d4:	08 95       	ret

000012d6 <_ZN6Effect9heartbeatEv>:
	 		LedCube::draw(smiley_lol,y,this->_mod);
		}
	}
}

void Effect::heartbeat()
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
{
	unsigned int milli = this->_milli + 1;
    12ec:	fc 01       	movw	r30, r24
    12ee:	02 81       	ldd	r16, Z+2	; 0x02
    12f0:	13 81       	ldd	r17, Z+3	; 0x03
    12f2:	0f 5f       	subi	r16, 0xFF	; 255
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    12f6:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    12fa:	6b 01       	movw	r12, r22
    12fc:	7c 01       	movw	r14, r24
    12fe:	bb 24       	eor	r11, r11

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
    1300:	38 01       	movw	r6, r16
    1302:	88 24       	eor	r8, r8
    1304:	99 24       	eor	r9, r9
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <_ZN6Effect9heartbeatEv+0x3e>
	 		LedCube::draw(quake_1,y,0);
    1308:	8f ec       	ldi	r24, 0xCF	; 207
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	6b 2d       	mov	r22, r11
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN7LedCube4drawEPhhh>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
    1314:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1318:	a7 01       	movw	r20, r14
    131a:	96 01       	movw	r18, r12
    131c:	26 0d       	add	r18, r6
    131e:	37 1d       	adc	r19, r7
    1320:	48 1d       	adc	r20, r8
    1322:	59 1d       	adc	r21, r9
    1324:	62 17       	cp	r22, r18
    1326:	73 07       	cpc	r23, r19
    1328:	84 07       	cpc	r24, r20
    132a:	95 07       	cpc	r25, r21
    132c:	68 f3       	brcs	.-38     	; 0x1308 <_ZN6Effect9heartbeatEv+0x32>
void Effect::heartbeat()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
    132e:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1332:	6b 01       	movw	r12, r22
    1334:	7c 01       	movw	r14, r24
    1336:	b3 94       	inc	r11
    1338:	f5 e0       	ldi	r31, 0x05	; 5
    133a:	bf 16       	cp	r11, r31
    133c:	59 f7       	brne	.-42     	; 0x1314 <_ZN6Effect9heartbeatEv+0x3e>
	    while(millis() < t + milli){
	 		LedCube::draw(quake_1,y,0);
		}
	}
}
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	9f 90       	pop	r9
    134e:	8f 90       	pop	r8
    1350:	7f 90       	pop	r7
    1352:	6f 90       	pop	r6
    1354:	08 95       	ret

00001356 <_ZN6Effect6smileyEv>:
void Effect::renderfunc_explode(uint32_t matrix)
{

}

void Effect::smiley()
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	bf 92       	push	r11
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	ec 01       	movw	r28, r24
{
	unsigned int milli = this->_milli + 1;
    1372:	0a 81       	ldd	r16, Y+2	; 0x02
    1374:	1b 81       	ldd	r17, Y+3	; 0x03
    1376:	0f 5f       	subi	r16, 0xFF	; 255
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    137a:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
    1382:	bb 24       	eor	r11, r11

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
    1384:	38 01       	movw	r6, r16
    1386:	88 24       	eor	r8, r8
    1388:	99 24       	eor	r9, r9
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <_ZN6Effect6smileyEv+0x42>
	 		LedCube::draw(smiley_lol,y,this->_mod);
    138c:	86 eb       	ldi	r24, 0xB6	; 182
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	6b 2d       	mov	r22, r11
    1392:	4c 81       	ldd	r20, Y+4	; 0x04
    1394:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_ZN7LedCube4drawEPhhh>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
    1398:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    139c:	a7 01       	movw	r20, r14
    139e:	96 01       	movw	r18, r12
    13a0:	26 0d       	add	r18, r6
    13a2:	37 1d       	adc	r19, r7
    13a4:	48 1d       	adc	r20, r8
    13a6:	59 1d       	adc	r21, r9
    13a8:	62 17       	cp	r22, r18
    13aa:	73 07       	cpc	r23, r19
    13ac:	84 07       	cpc	r24, r20
    13ae:	95 07       	cpc	r25, r21
    13b0:	68 f3       	brcs	.-38     	; 0x138c <_ZN6Effect6smileyEv+0x36>
void Effect::smiley()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
    13b2:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    13ba:	b3 94       	inc	r11
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	b8 16       	cp	r11, r24
    13c0:	59 f7       	brne	.-42     	; 0x1398 <_ZN6Effect6smileyEv+0x42>
	    while(millis() < t + milli){
	 		LedCube::draw(smiley_lol,y,this->_mod);
		}
	}
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	9f 90       	pop	r9
    13d6:	8f 90       	pop	r8
    13d8:	7f 90       	pop	r7
    13da:	6f 90       	pop	r6
    13dc:	08 95       	ret

000013de <_ZN6Effect10drawstringEPKch>:

void Effect::setspeed(unsigned int t)
{
	this->_milli  = t;
}
void Effect::drawstring(const char* str,byte len)
    13de:	4f 92       	push	r4
    13e0:	5f 92       	push	r5
    13e2:	6f 92       	push	r6
    13e4:	7f 92       	push	r7
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
    1400:	2b 01       	movw	r4, r22
    1402:	c4 2e       	mov	r12, r20
{
	unsigned int milli = this->_milli + 1;
    1404:	0a 81       	ldd	r16, Y+2	; 0x02
    1406:	1b 81       	ldd	r17, Y+3	; 0x03
    1408:	0f 5f       	subi	r16, 0xFF	; 255
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    140c:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    1410:	9b 01       	movw	r18, r22
    1412:	ac 01       	movw	r20, r24
    1414:	dd 24       	eor	r13, r13

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
				while(millis() < t + milli){
    1416:	48 01       	movw	r8, r16
    1418:	aa 24       	eor	r10, r10
    141a:	bb 24       	eor	r11, r11
    141c:	48 c0       	rjmp	.+144    	; 0x14ae <_ZN6Effect10drawstringEPKch+0xd0>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
    141e:	1d 82       	std	Y+5, r1	; 0x05
				while(millis() < t + milli){
				if(str[i] == ' '){
    1420:	32 01       	movw	r6, r4
    1422:	6d 0c       	add	r6, r13
    1424:	71 1c       	adc	r7, r1
    1426:	3e c0       	rjmp	.+124    	; 0x14a4 <_ZN6Effect10drawstringEPKch+0xc6>
    1428:	d3 01       	movw	r26, r6
    142a:	ec 91       	ld	r30, X
    142c:	e0 32       	cpi	r30, 0x20	; 32
    142e:	19 f4       	brne	.+6      	; 0x1436 <_ZN6Effect10drawstringEPKch+0x58>
					LedCube::clear();
    1430:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN7LedCube5clearEv>
    1434:	29 c0       	rjmp	.+82     	; 0x1488 <_ZN6Effect10drawstringEPKch+0xaa>
					continue;
				}
				if(str[i] > 47 && str[i] < 58){
    1436:	8e 2f       	mov	r24, r30
    1438:	80 53       	subi	r24, 0x30	; 48
    143a:	8a 30       	cpi	r24, 0x0A	; 10
    143c:	50 f4       	brcc	.+20     	; 0x1452 <_ZN6Effect10drawstringEPKch+0x74>
					render_matrix(ascii_map[str[i]-48]);
    143e:	ff 27       	eor	r31, r31
    1440:	e7 fd       	sbrc	r30, 7
    1442:	f0 95       	com	r31
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	ea 59       	subi	r30, 0x9A	; 154
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	0d c0       	rjmp	.+26     	; 0x146c <_ZN6Effect10drawstringEPKch+0x8e>
					continue;
				}else if(str[i] > 64 && str[i] < 91){
    1452:	8e 2f       	mov	r24, r30
    1454:	81 54       	subi	r24, 0x41	; 65
    1456:	8a 31       	cpi	r24, 0x1A	; 26
    1458:	b8 f4       	brcc	.+46     	; 0x1488 <_ZN6Effect10drawstringEPKch+0xaa>
					render_matrix(ascii_map[str[i]-55]);
    145a:	ff 27       	eor	r31, r31
    145c:	e7 fd       	sbrc	r30, 7
    145e:	f0 95       	com	r31
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	e6 5b       	subi	r30, 0xB6	; 182
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	40 81       	ld	r20, Z
    146e:	51 81       	ldd	r21, Z+1	; 0x01
    1470:	62 81       	ldd	r22, Z+2	; 0x02
    1472:	73 81       	ldd	r23, Z+3	; 0x03
    1474:	ce 01       	movw	r24, r28
    1476:	0e 94 67 07 	call	0xece	; 0xece <_ZN6Effect13render_matrixEm>
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <_ZN6Effect10drawstringEPKch+0xaa>
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
				while(millis() < t + milli){
    147c:	79 01       	movw	r14, r18
    147e:	8a 01       	movw	r16, r20
    1480:	e8 0c       	add	r14, r8
    1482:	f9 1c       	adc	r15, r9
    1484:	0a 1d       	adc	r16, r10
    1486:	1b 1d       	adc	r17, r11
    1488:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    148c:	6e 15       	cp	r22, r14
    148e:	7f 05       	cpc	r23, r15
    1490:	80 07       	cpc	r24, r16
    1492:	91 07       	cpc	r25, r17
    1494:	48 f2       	brcs	.-110    	; 0x1428 <_ZN6Effect10drawstringEPKch+0x4a>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
    1496:	0e 94 56 11 	call	0x22ac	; 0x22ac <millis>
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	98 17       	cp	r25, r24
    14aa:	40 f3       	brcs	.-48     	; 0x147c <_ZN6Effect10drawstringEPKch+0x9e>
void Effect::drawstring(const char* str,byte len)
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
    14ac:	d3 94       	inc	r13
    14ae:	dc 14       	cp	r13, r12
    14b0:	08 f4       	brcc	.+2      	; 0x14b4 <_ZN6Effect10drawstringEPKch+0xd6>
    14b2:	b5 cf       	rjmp	.-150    	; 0x141e <_ZN6Effect10drawstringEPKch+0x40>
					continue;
				}
			}
		}
	}
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	bf 90       	pop	r11
    14c6:	af 90       	pop	r10
    14c8:	9f 90       	pop	r9
    14ca:	8f 90       	pop	r8
    14cc:	7f 90       	pop	r7
    14ce:	6f 90       	pop	r6
    14d0:	5f 90       	pop	r5
    14d2:	4f 90       	pop	r4
    14d4:	08 95       	ret

000014d6 <_ZN6EffectD0Ev>:
Effect::Effect() {
	this->_milli  	    = 100;
	this->_infiniteval  = 0;
}

Effect::~Effect() {
    14d6:	fc 01       	movw	r30, r24
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24

}
    14e0:	cf 01       	movw	r24, r30
    14e2:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZdlPv>
    14e6:	08 95       	ret

000014e8 <_ZN9LedSquare10displaybigEi>:
  LedCube::transfer(17);
  LedCube::transfer(18);
}

void LedSquare::displaybig(int z){
  LedCube::plane(z);
    14e8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN7LedCube5planeEh>
  LedCube::setpixel(0, 0);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(1, 0);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(2, 0);
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(3, 0);
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 0);
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 1);
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 2);
    151c:	84 e0       	ldi	r24, 0x04	; 4
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 3);
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	63 e0       	ldi	r22, 0x03	; 3
    1528:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 4);
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 4);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	64 e0       	ldi	r22, 0x04	; 4
    1538:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(1, 4);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	64 e0       	ldi	r22, 0x04	; 4
    1540:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(2, 4);
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	64 e0       	ldi	r22, 0x04	; 4
    1548:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(3, 4);
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	64 e0       	ldi	r22, 0x04	; 4
    1550:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 1);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 2);
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 3);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	63 e0       	ldi	r22, 0x03	; 3
    1568:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7LedCube8setpixelEhh>

}
    156c:	08 95       	ret

0000156e <_ZN9LedSquare12displaysmallEi>:
  LedCube::plane(z);
  LedCube::transfer(12);
}

void LedSquare::displaysmall(int z){
  LedCube::plane(z);
    156e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN7LedCube5planeEh>
  LedCube::transfer(6);
    1572:	86 e0       	ldi	r24, 0x06	; 6
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
  LedCube::transfer(7);
    157a:	87 e0       	ldi	r24, 0x07	; 7
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
  LedCube::transfer(8);
    1582:	88 e0       	ldi	r24, 0x08	; 8
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>

  LedCube::transfer(11);
    158a:	8b e0       	ldi	r24, 0x0B	; 11
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
  LedCube::transfer(13);
    1592:	8d e0       	ldi	r24, 0x0D	; 13
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>

  LedCube::transfer(16);
    159a:	80 e1       	ldi	r24, 0x10	; 16
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
  LedCube::transfer(17);
    15a2:	81 e1       	ldi	r24, 0x11	; 17
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
  LedCube::transfer(18);
    15aa:	82 e1       	ldi	r24, 0x12	; 18
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
}
    15b2:	08 95       	ret

000015b4 <_ZN9LedSquare13displaycenterEi>:
	// TODO Auto-generated destructor stub
}

void LedSquare::displaycenter(int z){

  LedCube::plane(z);
    15b4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN7LedCube5planeEh>
  LedCube::transfer(12);
    15b8:	8c e0       	ldi	r24, 0x0C	; 12
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
}
    15c0:	08 95       	ret

000015c2 <setup>:
    }

    bt_save = bt_val;
}

void setup() {
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
	g_command.mod = MOD_SLIDE;
    15c6:	81 e2       	ldi	r24, 0x21	; 33
    15c8:	80 93 60 03 	sts	0x0360, r24
	g_command.cmd = CMD_TEXT;
    15cc:	80 ef       	ldi	r24, 0xF0	; 240
    15ce:	80 93 5f 03 	sts	0x035F, r24

	Serial.begin(9600);
    15d2:	04 e3       	ldi	r16, 0x34	; 52
    15d4:	14 e0       	ldi	r17, 0x04	; 4
    15d6:	c8 01       	movw	r24, r16
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	55 e2       	ldi	r21, 0x25	; 37
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <_ZN14HardwareSerial5beginEm>
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    15e4:	e0 91 34 04 	lds	r30, 0x0434
    15e8:	f0 91 35 04 	lds	r31, 0x0435
    15ec:	02 80       	ldd	r0, Z+2	; 0x02
    15ee:	f3 81       	ldd	r31, Z+3	; 0x03
    15f0:	e0 2d       	mov	r30, r0
    15f2:	c8 01       	movw	r24, r16
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	71 e0       	ldi	r23, 0x01	; 1
    15f8:	41 e1       	ldi	r20, 0x11	; 17
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	09 95       	icall
	Serial.write("LED CUBE rev. 1\r\n");
	analogReference(DEFAULT);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 02 12 	call	0x2404	; 0x2404 <analogReference>

	pinMode(A1, INPUT);
    1604:	8f e0       	ldi	r24, 0x0F	; 15
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	0e 94 27 12 	call	0x244e	; 0x244e <pinMode>

	LedCube::init();
    160c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN7LedCube4initEv>

	Effect1.setspeed(120);
    1610:	06 e1       	ldi	r16, 0x16	; 22
    1612:	12 e0       	ldi	r17, 0x02	; 2
    1614:	c8 01       	movw	r24, r16
    1616:	68 e7       	ldi	r22, 0x78	; 120
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_ZN6Effect8setspeedEj>
	Effect1.setmod(g_command.mod);
    161e:	c8 01       	movw	r24, r16
    1620:	60 91 60 03 	lds	r22, 0x0360
    1624:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN6Effect6setmodEh>

	g_command.buf = g_buff+3;
    1628:	87 e6       	ldi	r24, 0x67	; 103
    162a:	93 e0       	ldi	r25, 0x03	; 3
    162c:	90 93 63 03 	sts	0x0363, r25
    1630:	80 93 62 03 	sts	0x0362, r24

	strcpy(g_command.buf,"RALPH");
    1634:	62 e1       	ldi	r22, 0x12	; 18
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcpy>
	g_command.len = strlen(g_command.buf);
    163c:	a0 91 62 03 	lds	r26, 0x0362
    1640:	b0 91 63 03 	lds	r27, 0x0363
    1644:	fd 01       	movw	r30, r26
    1646:	01 90       	ld	r0, Z+
    1648:	00 20       	and	r0, r0
    164a:	e9 f7       	brne	.-6      	; 0x1646 <setup+0x84>
    164c:	31 97       	sbiw	r30, 0x01	; 1
    164e:	ea 1b       	sub	r30, r26
    1650:	fb 0b       	sbc	r31, r27
    1652:	e0 93 61 03 	sts	0x0361, r30
}
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <_Z9proc_varsv>:

byte bt_state = 0xF0,bt_val = 0, bt_save = 0;

void proc_vars()
{
    bt_val = digitalRead(A1);
    165c:	8f e0       	ldi	r24, 0x0F	; 15
    165e:	0e 94 a1 12 	call	0x2542	; 0x2542 <digitalRead>
    1662:	98 2f       	mov	r25, r24
    1664:	80 93 a4 03 	sts	0x03A4, r24
    if(bt_save != bt_val && bt_val == LOW){
    1668:	80 91 a5 03 	lds	r24, 0x03A5
    166c:	89 17       	cp	r24, r25
    166e:	79 f0       	breq	.+30     	; 0x168e <_Z9proc_varsv+0x32>
    1670:	99 23       	and	r25, r25
    1672:	69 f4       	brne	.+26     	; 0x168e <_Z9proc_varsv+0x32>
    	if(bt_state > 0xF7) bt_state = 0xF0;
    1674:	80 91 e8 01 	lds	r24, 0x01E8
    1678:	88 3f       	cpi	r24, 0xF8	; 248
    167a:	10 f0       	brcs	.+4      	; 0x1680 <_Z9proc_varsv+0x24>
    167c:	80 ef       	ldi	r24, 0xF0	; 240
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <_Z9proc_varsv+0x26>
    	else bt_state++;
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	80 93 e8 01 	sts	0x01E8, r24

    	g_command.cmd = bt_state;
    1686:	80 91 e8 01 	lds	r24, 0x01E8
    168a:	80 93 5f 03 	sts	0x035F, r24
    }

    bt_save = bt_val;
    168e:	90 93 a5 03 	sts	0x03A5, r25
}
    1692:	08 95       	ret

00001694 <_Z9fetchdatav>:
	strcpy(g_command.buf,"RALPH");
	g_command.len = strlen(g_command.buf);
}


void fetchdata()
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	c0 e0       	ldi	r28, 0x00	; 0
    169a:	d0 e0       	ldi	r29, 0x00	; 0
{

	int i = 0;
	for(;Serial.available() > 0 && i<32;i++) {
    169c:	84 e3       	ldi	r24, 0x34	; 52
    169e:	94 e0       	ldi	r25, 0x04	; 4
    16a0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN14HardwareSerial9availableEv>
    16a4:	18 16       	cp	r1, r24
    16a6:	19 06       	cpc	r1, r25
    16a8:	6c f4       	brge	.+26     	; 0x16c4 <_Z9fetchdatav+0x30>
    16aa:	c0 32       	cpi	r28, 0x20	; 32
    16ac:	d1 05       	cpc	r29, r1
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <_Z9fetchdatav+0x34>
		g_buff[i] = Serial.read();
    16b0:	84 e3       	ldi	r24, 0x34	; 52
    16b2:	94 e0       	ldi	r25, 0x04	; 4
    16b4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN14HardwareSerial4readEv>
    16b8:	fe 01       	movw	r30, r28
    16ba:	ec 59       	subi	r30, 0x9C	; 156
    16bc:	fc 4f       	sbci	r31, 0xFC	; 252
    16be:	80 83       	st	Z, r24

void fetchdata()
{

	int i = 0;
	for(;Serial.available() > 0 && i<32;i++) {
    16c0:	21 96       	adiw	r28, 0x01	; 1
    16c2:	ec cf       	rjmp	.-40     	; 0x169c <_Z9fetchdatav+0x8>
		g_buff[i] = Serial.read();
	}

	if(i>1){
    16c4:	22 97       	sbiw	r28, 0x02	; 2
    16c6:	a4 f0       	brlt	.+40     	; 0x16f0 <_Z9fetchdatav+0x5c>
		g_command.cmd = g_buff[0];
    16c8:	80 91 64 03 	lds	r24, 0x0364
    16cc:	80 93 5f 03 	sts	0x035F, r24
		g_command.mod = g_buff[1];
    16d0:	80 91 65 03 	lds	r24, 0x0365
    16d4:	80 93 60 03 	sts	0x0360, r24
		g_command.len = g_buff[2];
    16d8:	80 91 66 03 	lds	r24, 0x0366
    16dc:	80 93 61 03 	sts	0x0361, r24
		strcpy(g_command.buf,g_buff+3);
    16e0:	80 91 62 03 	lds	r24, 0x0362
    16e4:	90 91 63 03 	lds	r25, 0x0363
    16e8:	67 e6       	ldi	r22, 0x67	; 103
    16ea:	73 e0       	ldi	r23, 0x03	; 3
    16ec:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcpy>
	}

	proc_vars();
    16f0:	0e 94 2e 0b 	call	0x165c	; 0x165c <_Z9proc_varsv>

}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <loop>:


void loop() {
	fetchdata();
    16fa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_Z9fetchdatav>

	switch(g_command.cmd){
    16fe:	80 91 5f 03 	lds	r24, 0x035F
    1702:	84 3f       	cpi	r24, 0xF4	; 244
    1704:	a9 f1       	breq	.+106    	; 0x1770 <loop+0x76>
    1706:	85 3f       	cpi	r24, 0xF5	; 245
    1708:	70 f4       	brcc	.+28     	; 0x1726 <loop+0x2c>
    170a:	81 3f       	cpi	r24, 0xF1	; 241
    170c:	f9 f0       	breq	.+62     	; 0x174c <loop+0x52>
    170e:	82 3f       	cpi	r24, 0xF2	; 242
    1710:	20 f4       	brcc	.+8      	; 0x171a <loop+0x20>
    1712:	80 3f       	cpi	r24, 0xF0	; 240
    1714:	09 f0       	breq	.+2      	; 0x1718 <loop+0x1e>
    1716:	5c c0       	rjmp	.+184    	; 0x17d0 <loop+0xd6>
    1718:	10 c0       	rjmp	.+32     	; 0x173a <loop+0x40>
    171a:	82 3f       	cpi	r24, 0xF2	; 242
    171c:	f9 f0       	breq	.+62     	; 0x175c <loop+0x62>
    171e:	83 3f       	cpi	r24, 0xF3	; 243
    1720:	09 f0       	breq	.+2      	; 0x1724 <loop+0x2a>
    1722:	56 c0       	rjmp	.+172    	; 0x17d0 <loop+0xd6>
    1724:	20 c0       	rjmp	.+64     	; 0x1766 <loop+0x6c>
    1726:	86 3f       	cpi	r24, 0xF6	; 246
    1728:	69 f1       	breq	.+90     	; 0x1784 <loop+0x8a>
    172a:	86 3f       	cpi	r24, 0xF6	; 246
    172c:	30 f1       	brcs	.+76     	; 0x177a <loop+0x80>
    172e:	87 3f       	cpi	r24, 0xF7	; 247
    1730:	71 f1       	breq	.+92     	; 0x178e <loop+0x94>
    1732:	88 3f       	cpi	r24, 0xF8	; 248
    1734:	09 f0       	breq	.+2      	; 0x1738 <loop+0x3e>
    1736:	4c c0       	rjmp	.+152    	; 0x17d0 <loop+0xd6>
    1738:	2f c0       	rjmp	.+94     	; 0x1798 <loop+0x9e>
	case CMD_TEXT:
		Effect1.drawstring(g_command.buf,g_command.len);
    173a:	60 91 62 03 	lds	r22, 0x0362
    173e:	70 91 63 03 	lds	r23, 0x0363
    1742:	86 e1       	ldi	r24, 0x16	; 22
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	40 91 61 03 	lds	r20, 0x0361
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <loop+0x5c>
		break;
	case CMD_S04:
		Effect1.drawstring("S04",3);
    174c:	86 e1       	ldi	r24, 0x16	; 22
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	68 e1       	ldi	r22, 0x18	; 24
    1752:	71 e0       	ldi	r23, 0x01	; 1
    1754:	43 e0       	ldi	r20, 0x03	; 3
    1756:	0e 94 ef 09 	call	0x13de	; 0x13de <_ZN6Effect10drawstringEPKch>
    175a:	08 95       	ret
		break;
	case CMD_MUSIC:
		Effect1.music();
    175c:	86 e1       	ldi	r24, 0x16	; 22
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN6Effect5musicEv>
    1764:	08 95       	ret
		break;
	case CMD_HEART:
		Effect1.heartbeat();
    1766:	86 e1       	ldi	r24, 0x16	; 22
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN6Effect9heartbeatEv>
    176e:	08 95       	ret
		break;
	case CMD_SMILE:
		Effect1.smiley();
    1770:	86 e1       	ldi	r24, 0x16	; 22
    1772:	92 e0       	ldi	r25, 0x02	; 2
    1774:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN6Effect6smileyEv>
    1778:	08 95       	ret
		break;
	case CMD_BUBBLES:
		Effect1.bubbles();
    177a:	86 e1       	ldi	r24, 0x16	; 22
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 7b 07 	call	0xef6	; 0xef6 <_ZN6Effect7bubblesEv>
    1782:	08 95       	ret
		break;
	case CMD_BOUNCE:
		Effect1.infinitesquare();
    1784:	86 e1       	ldi	r24, 0x16	; 22
    1786:	92 e0       	ldi	r25, 0x02	; 2
    1788:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN6Effect14infinitesquareEv>
    178c:	08 95       	ret
		break;
	case CMD_INFINITE:
		Effect1.bounce();
    178e:	86 e1       	ldi	r24, 0x16	; 22
    1790:	92 e0       	ldi	r25, 0x02	; 2
    1792:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_ZN6Effect6bounceEv>
    1796:	08 95       	ret
		break;
	case CMD_DEBUG:
		if(g_command.mod == MOD_DBG_COORD)
    1798:	80 91 60 03 	lds	r24, 0x0360
    179c:	84 32       	cpi	r24, 0x24	; 36
    179e:	61 f4       	brne	.+24     	; 0x17b8 <loop+0xbe>
			Effect1.debug((byte)g_command.buf[0],
						  (byte)g_command.buf[1],
						  (byte)g_command.buf[2]);
    17a0:	e0 91 62 03 	lds	r30, 0x0362
    17a4:	f0 91 63 03 	lds	r31, 0x0363
    17a8:	86 e1       	ldi	r24, 0x16	; 22
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	60 81       	ld	r22, Z
    17ae:	41 81       	ldd	r20, Z+1	; 0x01
    17b0:	22 81       	ldd	r18, Z+2	; 0x02
    17b2:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN6Effect5debugEhhh>
    17b6:	08 95       	ret
		else if(g_command.mod == MOD_DBG_NUMBER)
    17b8:	85 32       	cpi	r24, 0x25	; 37
    17ba:	51 f4       	brne	.+20     	; 0x17d0 <loop+0xd6>
			Effect1.debug((byte)g_command.buf[0],(byte)g_command.buf[0]);
    17bc:	e0 91 62 03 	lds	r30, 0x0362
    17c0:	f0 91 63 03 	lds	r31, 0x0363
    17c4:	40 81       	ld	r20, Z
    17c6:	86 e1       	ldi	r24, 0x16	; 22
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	64 2f       	mov	r22, r20
    17cc:	0e 94 af 07 	call	0xf5e	; 0xf5e <_ZN6Effect5debugEhh>
    17d0:	08 95       	ret

000017d2 <__vector_13>:

#include "TimerOne.h"

TimerOne Timer1;              // preinstatiate

ISR(TIMER1_OVF_vect)          // interrupt service routine that wraps a user defined function supplied by attachInterrupt
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
{
  Timer1.isrCallback();
    17f4:	e0 91 aa 03 	lds	r30, 0x03AA
    17f8:	f0 91 ab 03 	lds	r31, 0x03AB
    17fc:	09 95       	icall
}
    17fe:	ff 91       	pop	r31
    1800:	ef 91       	pop	r30
    1802:	bf 91       	pop	r27
    1804:	af 91       	pop	r26
    1806:	9f 91       	pop	r25
    1808:	8f 91       	pop	r24
    180a:	7f 91       	pop	r23
    180c:	6f 91       	pop	r22
    180e:	5f 91       	pop	r21
    1810:	4f 91       	pop	r20
    1812:	3f 91       	pop	r19
    1814:	2f 91       	pop	r18
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <_Z7fix_fftPcS_ii>:
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    1820:	2f 92       	push	r2
    1822:	3f 92       	push	r3
    1824:	4f 92       	push	r4
    1826:	5f 92       	push	r5
    1828:	6f 92       	push	r6
    182a:	7f 92       	push	r7
    182c:	8f 92       	push	r8
    182e:	9f 92       	push	r9
    1830:	af 92       	push	r10
    1832:	bf 92       	push	r11
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	66 97       	sbiw	r28, 0x16	; 22
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	9a 87       	std	Y+10, r25	; 0x0a
    1856:	89 87       	std	Y+9, r24	; 0x09
    1858:	7c 87       	std	Y+12, r23	; 0x0c
    185a:	6b 87       	std	Y+11, r22	; 0x0b
    185c:	3e 87       	std	Y+14, r19	; 0x0e
    185e:	2d 87       	std	Y+13, r18	; 0x0d
{
    int mr, nn, i, j, l, k, istep, n, scale, shift;
    char qr, qi, tr, ti, wr, wi;

    n = 1 << m;
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	c9 2e       	mov	r12, r25
    1864:	d1 2c       	mov	r13, r1
    1866:	02 c0       	rjmp	.+4      	; 0x186c <_Z7fix_fftPcS_ii+0x4c>
    1868:	cc 0c       	add	r12, r12
    186a:	dd 1c       	adc	r13, r13
    186c:	4a 95       	dec	r20
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <_Z7fix_fftPcS_ii+0x48>

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
    1870:	21 e0       	ldi	r18, 0x01	; 1
    1872:	c2 16       	cp	r12, r18
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	d2 06       	cpc	r13, r18
    1878:	1c f0       	brlt	.+6      	; 0x1880 <_Z7fix_fftPcS_ii+0x60>
    187a:	2f ef       	ldi	r18, 0xFF	; 255
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	47 c1       	rjmp	.+654    	; 0x1b0e <_Z7fix_fftPcS_ii+0x2ee>
	  return -1;

    mr = 0;
    nn = n - 1;
    1880:	86 01       	movw	r16, r12
    1882:	01 50       	subi	r16, 0x01	; 1
    1884:	10 40       	sbci	r17, 0x00	; 0
    1886:	e9 84       	ldd	r14, Y+9	; 0x09
    1888:	fa 84       	ldd	r15, Y+10	; 0x0a
    188a:	ab 85       	ldd	r26, Y+11	; 0x0b
    188c:	bc 85       	ldd	r27, Y+12	; 0x0c
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	31 c0       	rjmp	.+98     	; 0x18fa <_Z7fix_fftPcS_ii+0xda>
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
    1898:	96 01       	movw	r18, r12
	  l = n;
	  do {
		l >>= 1;
    189a:	35 95       	asr	r19
    189c:	27 95       	ror	r18
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
	  l = n;
	  do {
    189e:	c9 01       	movw	r24, r18
    18a0:	84 0f       	add	r24, r20
    18a2:	95 1f       	adc	r25, r21
    18a4:	08 17       	cp	r16, r24
    18a6:	19 07       	cpc	r17, r25
    18a8:	c4 f3       	brlt	.-16     	; 0x189a <_Z7fix_fftPcS_ii+0x7a>
		l >>= 1;
	  } while (mr+l > nn);
	  mr = (mr & (l-1)) + l;
    18aa:	c9 01       	movw	r24, r18
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	48 23       	and	r20, r24
    18b0:	59 23       	and	r21, r25
    18b2:	42 0f       	add	r20, r18
    18b4:	53 1f       	adc	r21, r19

	  if (mr <= m)
    18b6:	64 17       	cp	r22, r20
    18b8:	75 07       	cpc	r23, r21
    18ba:	cc f4       	brge	.+50     	; 0x18ee <_Z7fix_fftPcS_ii+0xce>
		continue;
	  tr = fr[m];
    18bc:	f7 01       	movw	r30, r14
    18be:	91 81       	ldd	r25, Z+1	; 0x01
	  fr[m] = fr[mr];
    18c0:	29 85       	ldd	r18, Y+9	; 0x09
    18c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    18c4:	24 0f       	add	r18, r20
    18c6:	35 1f       	adc	r19, r21
    18c8:	f9 01       	movw	r30, r18
    18ca:	80 81       	ld	r24, Z
    18cc:	f7 01       	movw	r30, r14
    18ce:	81 83       	std	Z+1, r24	; 0x01
	  fr[mr] = tr;
    18d0:	f9 01       	movw	r30, r18
    18d2:	90 83       	st	Z, r25
	  ti = fi[m];
    18d4:	11 96       	adiw	r26, 0x01	; 1
    18d6:	9c 91       	ld	r25, X
    18d8:	11 97       	sbiw	r26, 0x01	; 1
	  fi[m] = fi[mr];
    18da:	2b 85       	ldd	r18, Y+11	; 0x0b
    18dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    18de:	24 0f       	add	r18, r20
    18e0:	35 1f       	adc	r19, r21
    18e2:	f9 01       	movw	r30, r18
    18e4:	80 81       	ld	r24, Z
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	8c 93       	st	X, r24
    18ea:	11 97       	sbiw	r26, 0x01	; 1
	  fi[mr] = ti;
    18ec:	90 83       	st	Z, r25
    mr = 0;
    nn = n - 1;
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
    18ee:	6f 5f       	subi	r22, 0xFF	; 255
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	08 94       	sec
    18f4:	e1 1c       	adc	r14, r1
    18f6:	f1 1c       	adc	r15, r1
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	06 17       	cp	r16, r22
    18fc:	17 07       	cpc	r17, r23
    18fe:	64 f6       	brge	.-104    	; 0x1898 <_Z7fix_fftPcS_ii+0x78>
    1900:	01 e0       	ldi	r16, 0x01	; 1
    1902:	40 2e       	mov	r4, r16
    1904:	51 2c       	mov	r5, r1
    1906:	27 e0       	ldi	r18, 0x07	; 7
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	38 87       	std	Y+8, r19	; 0x08
    190c:	2f 83       	std	Y+7, r18	; 0x07
    190e:	f9 c0       	rjmp	.+498    	; 0x1b02 <_Z7fix_fftPcS_ii+0x2e2>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	4d 85       	ldd	r20, Y+13	; 0x0d
    1914:	5e 85       	ldd	r21, Y+14	; 0x0e
    1916:	45 2b       	or	r20, r21
    1918:	09 f0       	breq	.+2      	; 0x191c <_Z7fix_fftPcS_ii+0xfc>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	51 e0       	ldi	r21, 0x01	; 1
    191e:	85 27       	eor	r24, r21
    1920:	68 2f       	mov	r22, r24
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	7e 83       	std	Y+6, r23	; 0x06
    1926:	6d 83       	std	Y+5, r22	; 0x05
	  /*
	    it may not be obvious, but the shift will be
	    performed on each data point exactly once,
	    during this pass.
	  */
	  istep = l << 1;
    1928:	32 01       	movw	r6, r4
    192a:	66 0c       	add	r6, r6
    192c:	77 1c       	adc	r7, r7
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    192e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1930:	9c 85       	ldd	r25, Y+12	; 0x0c
    1932:	84 0d       	add	r24, r4
    1934:	95 1d       	adc	r25, r5
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	a9 85       	ldd	r26, Y+9	; 0x09
    193c:	ba 85       	ldd	r27, Y+10	; 0x0a
    193e:	a4 0d       	add	r26, r4
    1940:	b5 1d       	adc	r27, r5
    1942:	bc 83       	std	Y+4, r27	; 0x04
    1944:	ab 83       	std	Y+3, r26	; 0x03
    1946:	1c 8a       	std	Y+20, r1	; 0x14
    1948:	1b 8a       	std	Y+19, r1	; 0x13
    194a:	cf c0       	rjmp	.+414    	; 0x1aea <_Z7fix_fftPcS_ii+0x2ca>
	  */
	  istep = l << 1;
	  for (m=0; m<l; ++m) {
		j = m << k;
		/* 0 <= j < N_WAVE/2 */
		wr =  pgm_read_word_near(Sinewave + j+N_WAVE/4);
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	0f 80       	ldd	r0, Y+7	; 0x07
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <_Z7fix_fftPcS_ii+0x138>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <_Z7fix_fftPcS_ii+0x134>
    195c:	fc 01       	movw	r30, r24
    195e:	e8 55       	subi	r30, 0x58	; 88
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	25 91       	lpm	r18, Z+
    1964:	34 91       	lpm	r19, Z+
    1966:	42 2f       	mov	r20, r18
Serial.println(Sinewave[256]);

Serial.println("");*/


		wi = -pgm_read_word_near(Sinewave + j);
    1968:	fc 01       	movw	r30, r24
    196a:	e8 59       	subi	r30, 0x98	; 152
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	85 91       	lpm	r24, Z+
    1970:	94 91       	lpm	r25, Z+
    1972:	28 2f       	mov	r18, r24
    1974:	21 95       	neg	r18
		if (inverse)
    1976:	ed 85       	ldd	r30, Y+13	; 0x0d
    1978:	fe 85       	ldd	r31, Y+14	; 0x0e
    197a:	ef 2b       	or	r30, r31
    197c:	09 f0       	breq	.+2      	; 0x1980 <_Z7fix_fftPcS_ii+0x160>
		    wi = -wi;
    197e:	21 95       	neg	r18
		if (shift) {
    1980:	6d 81       	ldd	r22, Y+5	; 0x05
    1982:	7e 81       	ldd	r23, Y+6	; 0x06
    1984:	67 2b       	or	r22, r23
    1986:	11 f0       	breq	.+4      	; 0x198c <_Z7fix_fftPcS_ii+0x16c>
		    wr >>= 1;
    1988:	45 95       	asr	r20
		    wi >>= 1;
    198a:	25 95       	asr	r18
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    198c:	89 84       	ldd	r8, Y+9	; 0x09
    198e:	9a 84       	ldd	r9, Y+10	; 0x0a
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	88 0e       	add	r8, r24
    1996:	99 1e       	adc	r9, r25
    1998:	ab 84       	ldd	r10, Y+11	; 0x0b
    199a:	bc 84       	ldd	r11, Y+12	; 0x0c
    199c:	a8 0e       	add	r10, r24
    199e:	b9 1e       	adc	r11, r25
    19a0:	1c 01       	movw	r2, r24
    19a2:	eb 80       	ldd	r14, Y+3	; 0x03
    19a4:	fc 80       	ldd	r15, Y+4	; 0x04
    19a6:	09 81       	ldd	r16, Y+1	; 0x01
    19a8:	1a 81       	ldd	r17, Y+2	; 0x02
  //Serial.println(a);
 //Serial.println(b);


    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    19aa:	a4 2f       	mov	r26, r20
    19ac:	bb 27       	eor	r27, r27
    19ae:	a7 fd       	sbrc	r26, 7
    19b0:	b0 95       	com	r27
    19b2:	b8 8b       	std	Y+16, r27	; 0x10
    19b4:	af 87       	std	Y+15, r26	; 0x0f
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
    19b6:	e2 2f       	mov	r30, r18
    19b8:	ff 27       	eor	r31, r31
    19ba:	e7 fd       	sbrc	r30, 7
    19bc:	f0 95       	com	r31
    19be:	fa 8b       	std	Y+18, r31	; 0x12
    19c0:	e9 8b       	std	Y+17, r30	; 0x11
    19c2:	7d c0       	rjmp	.+250    	; 0x1abe <_Z7fix_fftPcS_ii+0x29e>
  //Serial.println(a);
 //Serial.println(b);


    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    19c4:	d7 01       	movw	r26, r14
    19c6:	8c 91       	ld	r24, X
    19c8:	e8 2f       	mov	r30, r24
    19ca:	ff 27       	eor	r31, r31
    19cc:	e7 fd       	sbrc	r30, 7
    19ce:	f0 95       	com	r31
    19d0:	fe 8b       	std	Y+22, r31	; 0x16
    19d2:	ed 8b       	std	Y+21, r30	; 0x15
    19d4:	2f 85       	ldd	r18, Y+15	; 0x0f
    19d6:	38 89       	ldd	r19, Y+16	; 0x10
    19d8:	2e 9f       	mul	r18, r30
    19da:	a0 01       	movw	r20, r0
    19dc:	2f 9f       	mul	r18, r31
    19de:	50 0d       	add	r21, r0
    19e0:	3e 9f       	mul	r19, r30
    19e2:	50 0d       	add	r21, r0
    19e4:	11 24       	eor	r1, r1
    19e6:	b6 e0       	ldi	r27, 0x06	; 6
    19e8:	55 95       	asr	r21
    19ea:	47 95       	ror	r20
    19ec:	ba 95       	dec	r27
    19ee:	e1 f7       	brne	.-8      	; 0x19e8 <_Z7fix_fftPcS_ii+0x1c8>
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
    19f0:	d8 01       	movw	r26, r16
    19f2:	6c 91       	ld	r22, X
    19f4:	77 27       	eor	r23, r23
    19f6:	67 fd       	sbrc	r22, 7
    19f8:	70 95       	com	r23
    19fa:	e9 89       	ldd	r30, Y+17	; 0x11
    19fc:	fa 89       	ldd	r31, Y+18	; 0x12
    19fe:	e6 9f       	mul	r30, r22
    1a00:	90 01       	movw	r18, r0
    1a02:	e7 9f       	mul	r30, r23
    1a04:	30 0d       	add	r19, r0
    1a06:	f6 9f       	mul	r31, r22
    1a08:	30 0d       	add	r19, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	a6 e0       	ldi	r26, 0x06	; 6
    1a0e:	35 95       	asr	r19
    1a10:	27 95       	ror	r18
    1a12:	aa 95       	dec	r26
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <_Z7fix_fftPcS_ii+0x1ee>
    1a16:	a4 2f       	mov	r26, r20
    1a18:	a1 70       	andi	r26, 0x01	; 1
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	95 95       	asr	r25
    1a1e:	87 95       	ror	r24
    1a20:	a8 1b       	sub	r26, r24
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	a4 0f       	add	r26, r20
    1a28:	21 70       	andi	r18, 0x01	; 1
    1a2a:	a2 1b       	sub	r26, r18
  //Serial.println(a);
 //Serial.println(b);


    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    1a2c:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a2e:	58 89       	ldd	r21, Y+16	; 0x10
    1a30:	46 9f       	mul	r20, r22
    1a32:	90 01       	movw	r18, r0
    1a34:	47 9f       	mul	r20, r23
    1a36:	30 0d       	add	r19, r0
    1a38:	56 9f       	mul	r21, r22
    1a3a:	30 0d       	add	r19, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	76 e0       	ldi	r23, 0x06	; 6
    1a40:	35 95       	asr	r19
    1a42:	27 95       	ror	r18
    1a44:	7a 95       	dec	r23
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <_Z7fix_fftPcS_ii+0x220>
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
		    ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	e6 9f       	mul	r30, r22
    1a4e:	a0 01       	movw	r20, r0
    1a50:	e7 9f       	mul	r30, r23
    1a52:	50 0d       	add	r21, r0
    1a54:	f6 9f       	mul	r31, r22
    1a56:	50 0d       	add	r21, r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	66 e0       	ldi	r22, 0x06	; 6
    1a5c:	55 95       	asr	r21
    1a5e:	47 95       	ror	r20
    1a60:	6a 95       	dec	r22
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <_Z7fix_fftPcS_ii+0x23c>
    1a64:	ba 01       	movw	r22, r20
    1a66:	75 95       	asr	r23
    1a68:	67 95       	ror	r22
    1a6a:	c9 01       	movw	r24, r18
    1a6c:	95 95       	asr	r25
    1a6e:	87 95       	ror	r24
    1a70:	68 0f       	add	r22, r24
    1a72:	21 70       	andi	r18, 0x01	; 1
    1a74:	62 0f       	add	r22, r18
    1a76:	41 70       	andi	r20, 0x01	; 1
    1a78:	64 0f       	add	r22, r20
		    qr = fr[i];
    1a7a:	f4 01       	movw	r30, r8
    1a7c:	90 81       	ld	r25, Z
		    qi = fi[i];
    1a7e:	f5 01       	movw	r30, r10
    1a80:	20 81       	ld	r18, Z
		    if (shift) {
    1a82:	4d 81       	ldd	r20, Y+5	; 0x05
    1a84:	5e 81       	ldd	r21, Y+6	; 0x06
    1a86:	45 2b       	or	r20, r21
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <_Z7fix_fftPcS_ii+0x26e>
			  qr >>= 1;
    1a8a:	95 95       	asr	r25
			  qi >>= 1;
    1a8c:	25 95       	asr	r18
		    }
		    fr[j] = qr - tr;
    1a8e:	89 2f       	mov	r24, r25
    1a90:	8a 1b       	sub	r24, r26
    1a92:	f7 01       	movw	r30, r14
    1a94:	80 83       	st	Z, r24
		    fi[j] = qi - ti;
    1a96:	82 2f       	mov	r24, r18
    1a98:	86 1b       	sub	r24, r22
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	80 83       	st	Z, r24
		    fr[i] = qr + tr;
    1a9e:	9a 0f       	add	r25, r26
    1aa0:	d4 01       	movw	r26, r8
    1aa2:	9c 93       	st	X, r25
		    fi[i] = qi + ti;
    1aa4:	26 0f       	add	r18, r22
    1aa6:	f5 01       	movw	r30, r10
    1aa8:	20 83       	st	Z, r18
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    1aaa:	26 0c       	add	r2, r6
    1aac:	37 1c       	adc	r3, r7
    1aae:	e6 0c       	add	r14, r6
    1ab0:	f7 1c       	adc	r15, r7
    1ab2:	06 0d       	add	r16, r6
    1ab4:	17 1d       	adc	r17, r7
    1ab6:	86 0c       	add	r8, r6
    1ab8:	97 1c       	adc	r9, r7
    1aba:	a6 0c       	add	r10, r6
    1abc:	b7 1c       	adc	r11, r7
		    wi = -wi;
		if (shift) {
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
    1abe:	2c 14       	cp	r2, r12
    1ac0:	3d 04       	cpc	r3, r13
    1ac2:	0c f4       	brge	.+2      	; 0x1ac6 <_Z7fix_fftPcS_ii+0x2a6>
    1ac4:	7f cf       	rjmp	.-258    	; 0x19c4 <_Z7fix_fftPcS_ii+0x1a4>
	    it may not be obvious, but the shift will be
	    performed on each data point exactly once,
	    during this pass.
	  */
	  istep = l << 1;
	  for (m=0; m<l; ++m) {
    1ac6:	2b 89       	ldd	r18, Y+19	; 0x13
    1ac8:	3c 89       	ldd	r19, Y+20	; 0x14
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	3c 8b       	std	Y+20, r19	; 0x14
    1ad0:	2b 8b       	std	Y+19, r18	; 0x13
    1ad2:	49 81       	ldd	r20, Y+1	; 0x01
    1ad4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ad6:	4f 5f       	subi	r20, 0xFF	; 255
    1ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ada:	5a 83       	std	Y+2, r21	; 0x02
    1adc:	49 83       	std	Y+1, r20	; 0x01
    1ade:	6b 81       	ldd	r22, Y+3	; 0x03
    1ae0:	7c 81       	ldd	r23, Y+4	; 0x04
    1ae2:	6f 5f       	subi	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	7c 83       	std	Y+4, r23	; 0x04
    1ae8:	6b 83       	std	Y+3, r22	; 0x03
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	84 15       	cp	r24, r4
    1af0:	95 05       	cpc	r25, r5
    1af2:	0c f4       	brge	.+2      	; 0x1af6 <_Z7fix_fftPcS_ii+0x2d6>
    1af4:	2b cf       	rjmp	.-426    	; 0x194c <_Z7fix_fftPcS_ii+0x12c>
		    fi[j] = qi - ti;
		    fr[i] = qr + tr;
		    fi[i] = qi + ti;
		}
	  }
	  --k;
    1af6:	af 81       	ldd	r26, Y+7	; 0x07
    1af8:	b8 85       	ldd	r27, Y+8	; 0x08
    1afa:	11 97       	sbiw	r26, 0x01	; 1
    1afc:	b8 87       	std	Y+8, r27	; 0x08
    1afe:	af 83       	std	Y+7, r26	; 0x07
    1b00:	23 01       	movw	r4, r6
	  fi[mr] = ti;
    }

    l = 1;
    k = LOG2_N_WAVE-1;
    while (l < n) {
    1b02:	4c 14       	cp	r4, r12
    1b04:	5d 04       	cpc	r5, r13
    1b06:	0c f4       	brge	.+2      	; 0x1b0a <_Z7fix_fftPcS_ii+0x2ea>
    1b08:	03 cf       	rjmp	.-506    	; 0x1910 <_Z7fix_fftPcS_ii+0xf0>
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
	  }
	  --k;
	  l = istep;
    }
    return scale;
}
    1b0e:	c9 01       	movw	r24, r18
    1b10:	66 96       	adiw	r28, 0x16	; 22
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	7f 90       	pop	r7
    1b36:	6f 90       	pop	r6
    1b38:	5f 90       	pop	r5
    1b3a:	4f 90       	pop	r4
    1b3c:	3f 90       	pop	r3
    1b3e:	2f 90       	pop	r2
    1b40:	08 95       	ret

00001b42 <_ZN7LedCube5planeEh>:
		if(matrix[4+(i*CUBESIZE)] == 1)
			LedCube::setpixel(0,y,z);
	}
}

void LedCube::plane(byte z)
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	d8 2e       	mov	r13, r24
    1b52:	03 ef       	ldi	r16, 0xF3	; 243
    1b54:	11 e0       	ldi	r17, 0x01	; 1
    1b56:	c0 e0       	ldi	r28, 0x00	; 0
    1b58:	d0 e0       	ldi	r29, 0x00	; 0
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
	    if(i == z || z >= LEDS_PER_ROW){
    1b5a:	e8 2e       	mov	r14, r24
    1b5c:	ff 24       	eor	r15, r15
    1b5e:	ce 15       	cp	r28, r14
    1b60:	df 05       	cpc	r29, r15
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <_ZN7LedCube5planeEh+0x28>
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	8d 15       	cp	r24, r13
    1b68:	20 f4       	brcc	.+8      	; 0x1b72 <_ZN7LedCube5planeEh+0x30>
	      digitalWrite(cathodePins[i], HIGH);
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	80 81       	ld	r24, Z
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <_ZN7LedCube5planeEh+0x36>
	    }else{
	       digitalWrite(cathodePins[i], LOW);
    1b72:	f8 01       	movw	r30, r16
    1b74:	80 81       	ld	r24, Z
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	0e 94 4d 12 	call	0x249a	; 0x249a <digitalWrite>
}

void LedCube::plane(byte z)
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
    1b7c:	21 96       	adiw	r28, 0x01	; 1
    1b7e:	0e 5f       	subi	r16, 0xFE	; 254
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	c5 30       	cpi	r28, 0x05	; 5
    1b84:	d1 05       	cpc	r29, r1
    1b86:	59 f7       	brne	.-42     	; 0x1b5e <_ZN7LedCube5planeEh+0x1c>
	      digitalWrite(cathodePins[i], HIGH);
	    }else{
	       digitalWrite(cathodePins[i], LOW);
	    }
	  }
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	08 95       	ret

00001b98 <_ZN7LedCube8transferEi>:
	//enable decoders
	pinMode(pEN, OUTPUT);
	digitalWrite(pEN, HIGH);
}

void LedCube::transfer(int num)
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
{
	  int weight=1,pin=0;
	  num = constrain(num, 0, 24);
    1ba8:	89 31       	cpi	r24, 0x19	; 25
    1baa:	91 05       	cpc	r25, r1
    1bac:	14 f0       	brlt	.+4      	; 0x1bb2 <_ZN7LedCube8transferEi+0x1a>
    1bae:	88 e1       	ldi	r24, 0x18	; 24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	6c 01       	movw	r12, r24
    1bb4:	97 ff       	sbrs	r25, 7
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <_ZN7LedCube8transferEi+0x24>
    1bb8:	cc 24       	eor	r12, r12
    1bba:	dd 24       	eor	r13, r13
    1bbc:	99 ee       	ldi	r25, 0xE9	; 233
    1bbe:	e9 2e       	mov	r14, r25
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	f9 2e       	mov	r15, r25
    1bc4:	01 e0       	ldi	r16, 0x01	; 1
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	c0 e0       	ldi	r28, 0x00	; 0
    1bca:	d0 e0       	ldi	r29, 0x00	; 0

	  for(; pin < DECODER_BITS; weight*=2, pin++)
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);
    1bcc:	b8 01       	movw	r22, r16
    1bce:	6c 21       	and	r22, r12
    1bd0:	7d 21       	and	r23, r13
    1bd2:	0c 2e       	mov	r0, r28
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <_ZN7LedCube8transferEi+0x42>
    1bd6:	75 95       	asr	r23
    1bd8:	67 95       	ror	r22
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <_ZN7LedCube8transferEi+0x3e>
    1bde:	f7 01       	movw	r30, r14
    1be0:	80 81       	ld	r24, Z
    1be2:	0e 94 4d 12 	call	0x249a	; 0x249a <digitalWrite>
void LedCube::transfer(int num)
{
	  int weight=1,pin=0;
	  num = constrain(num, 0, 24);

	  for(; pin < DECODER_BITS; weight*=2, pin++)
    1be6:	00 0f       	add	r16, r16
    1be8:	11 1f       	adc	r17, r17
    1bea:	21 96       	adiw	r28, 0x01	; 1
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	e8 0e       	add	r14, r24
    1bf2:	f9 1e       	adc	r15, r25
    1bf4:	c5 30       	cpi	r28, 0x05	; 5
    1bf6:	d1 05       	cpc	r29, r1
    1bf8:	49 f7       	brne	.-46     	; 0x1bcc <_ZN7LedCube8transferEi+0x34>
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);

	  delayMicroseconds(MICRO);
    1bfa:	80 e5       	ldi	r24, 0x50	; 80
    1bfc:	93 ec       	ldi	r25, 0xC3	; 195
    1bfe:	0e 94 bd 11 	call	0x237a	; 0x237a <delayMicroseconds>
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	08 95       	ret

00001c14 <_ZN7LedCube8setpixelEhhh>:
void LedCube::setpixel(byte x,byte y)
{
	transfer((y * LEDS_PER_ROW) + x);
}

void LedCube::setpixel(byte x,byte y,byte z)
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	f8 2e       	mov	r15, r24
    1c1c:	06 2f       	mov	r16, r22
    1c1e:	84 2f       	mov	r24, r20
{
	plane(z);
    1c20:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN7LedCube5planeEh>
	transfer((y * LEDS_PER_ROW) + x);
    1c24:	85 e0       	ldi	r24, 0x05	; 5
    1c26:	08 9f       	mul	r16, r24
    1c28:	80 01       	movw	r16, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	8f 0d       	add	r24, r15
    1c30:	91 1d       	adc	r25, r1
    1c32:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
}
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	08 95       	ret

00001c3e <_ZN7LedCube4drawEPhhh>:
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);

	  delayMicroseconds(MICRO);
}

void LedCube::draw(byte* matrix,byte y, byte mod)
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	06 2f       	mov	r16, r22
    1c48:	ec 01       	movw	r28, r24
    1c4a:	14 e0       	ldi	r17, 0x04	; 4
{
	byte i = 0,z=4;
	for(;i<CUBESIZE;i++,z--){
		if(matrix[0+(i*CUBESIZE)] == 1)
    1c4c:	88 81       	ld	r24, Y
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	29 f4       	brne	.+10     	; 0x1c5c <_ZN7LedCube4drawEPhhh+0x1e>
			LedCube::setpixel(4,y,z);
    1c52:	84 e0       	ldi	r24, 0x04	; 4
    1c54:	60 2f       	mov	r22, r16
    1c56:	41 2f       	mov	r20, r17
    1c58:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
		if(matrix[1+(i*CUBESIZE)] == 1)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	29 f4       	brne	.+10     	; 0x1c6c <_ZN7LedCube4drawEPhhh+0x2e>
			LedCube::setpixel(3,y,z);
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	60 2f       	mov	r22, r16
    1c66:	41 2f       	mov	r20, r17
    1c68:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
		if(matrix[2+(i*CUBESIZE)] == 1)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	29 f4       	brne	.+10     	; 0x1c7c <_ZN7LedCube4drawEPhhh+0x3e>
			LedCube::setpixel(2,y,z);
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	60 2f       	mov	r22, r16
    1c76:	41 2f       	mov	r20, r17
    1c78:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
		if(matrix[3+(i*CUBESIZE)] == 1)
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	21 f4       	brne	.+8      	; 0x1c8a <_ZN7LedCube4drawEPhhh+0x4c>
			LedCube::setpixel(1,y,z);
    1c82:	60 2f       	mov	r22, r16
    1c84:	41 2f       	mov	r20, r17
    1c86:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
		if(matrix[4+(i*CUBESIZE)] == 1)
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	29 f4       	brne	.+10     	; 0x1c9a <_ZN7LedCube4drawEPhhh+0x5c>
			LedCube::setpixel(0,y,z);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	60 2f       	mov	r22, r16
    1c94:	41 2f       	mov	r20, r17
    1c96:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <_ZN7LedCube8setpixelEhhh>
    1c9a:	25 96       	adiw	r28, 0x05	; 5
}

void LedCube::draw(byte* matrix,byte y, byte mod)
{
	byte i = 0,z=4;
	for(;i<CUBESIZE;i++,z--){
    1c9c:	11 23       	and	r17, r17
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <_ZN7LedCube4drawEPhhh+0x66>
    1ca0:	11 50       	subi	r17, 0x01	; 1
    1ca2:	d4 cf       	rjmp	.-88     	; 0x1c4c <_ZN7LedCube4drawEPhhh+0xe>
		if(matrix[3+(i*CUBESIZE)] == 1)
			LedCube::setpixel(1,y,z);
		if(matrix[4+(i*CUBESIZE)] == 1)
			LedCube::setpixel(0,y,z);
	}
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <_ZN7LedCube8setpixelEhh>:
	  }
}

void LedCube::setpixel(byte x,byte y)
{
	transfer((y * LEDS_PER_ROW) + x);
    1cae:	95 e0       	ldi	r25, 0x05	; 5
    1cb0:	69 9f       	mul	r22, r25
    1cb2:	b0 01       	movw	r22, r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	28 0f       	add	r18, r24
    1cba:	31 1d       	adc	r19, r1
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
}
    1cc2:	08 95       	ret

00001cc4 <_ZN7LedCube5clearEv>:
	       digitalWrite(cathodePins[i], LOW);
	    }
	  }
}

void LedCube::clear()
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	c3 ef       	ldi	r28, 0xF3	; 243
    1cca:	d1 e0       	ldi	r29, 0x01	; 1
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
	       digitalWrite(cathodePins[i], LOW);
    1ccc:	88 81       	ld	r24, Y
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	0e 94 4d 12 	call	0x249a	; 0x249a <digitalWrite>
	       transfer(0);
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube8transferEi>
    1cdc:	22 96       	adiw	r28, 0x02	; 2
}

void LedCube::clear()
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	cd 3f       	cpi	r28, 0xFD	; 253
    1ce2:	d8 07       	cpc	r29, r24
    1ce4:	99 f7       	brne	.-26     	; 0x1ccc <_ZN7LedCube5clearEv+0x8>
	       digitalWrite(cathodePins[i], LOW);
	       transfer(0);

	  }
}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <_ZN7LedCube4initEv>:
LedCube::~LedCube()
{

}

void LedCube::init()
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	c9 ee       	ldi	r28, 0xE9	; 233
    1cf2:	d1 e0       	ldi	r29, 0x01	; 1
{
	for(int i =0; i < DECODER_BITS; i++){
		pinMode(decoderPins[i], OUTPUT);
    1cf4:	88 81       	ld	r24, Y
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	0e 94 27 12 	call	0x244e	; 0x244e <pinMode>
		digitalWrite(decoderPins[i], LOW);
    1cfc:	88 81       	ld	r24, Y
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	0e 94 4d 12 	call	0x249a	; 0x249a <digitalWrite>
    1d04:	22 96       	adiw	r28, 0x02	; 2

}

void LedCube::init()
{
	for(int i =0; i < DECODER_BITS; i++){
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	c3 3f       	cpi	r28, 0xF3	; 243
    1d0a:	d8 07       	cpc	r29, r24
    1d0c:	99 f7       	brne	.-26     	; 0x1cf4 <_ZN7LedCube4initEv+0x8>
    1d0e:	c3 ef       	ldi	r28, 0xF3	; 243
    1d10:	d1 e0       	ldi	r29, 0x01	; 1
		pinMode(decoderPins[i], OUTPUT);
		digitalWrite(decoderPins[i], LOW);
	}
	for(int i = 0; i < LEDS_PER_ROW; i++){
		pinMode(cathodePins[i], OUTPUT);
    1d12:	88 81       	ld	r24, Y
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	0e 94 27 12 	call	0x244e	; 0x244e <pinMode>
		digitalWrite(cathodePins[i], LOW);
    1d1a:	88 81       	ld	r24, Y
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	0e 94 4d 12 	call	0x249a	; 0x249a <digitalWrite>
    1d22:	22 96       	adiw	r28, 0x02	; 2
{
	for(int i =0; i < DECODER_BITS; i++){
		pinMode(decoderPins[i], OUTPUT);
		digitalWrite(decoderPins[i], LOW);
	}
	for(int i = 0; i < LEDS_PER_ROW; i++){
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	cd 3f       	cpi	r28, 0xFD	; 253
    1d28:	d8 07       	cpc	r29, r24
    1d2a:	99 f7       	brne	.-26     	; 0x1d12 <_ZN7LedCube4initEv+0x26>
		pinMode(cathodePins[i], OUTPUT);
		digitalWrite(cathodePins[i], LOW);
	}

	//enable decoders
	pinMode(pEN, OUTPUT);
    1d2c:	8c e0       	ldi	r24, 0x0C	; 12
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	0e 94 27 12 	call	0x244e	; 0x244e <pinMode>
	digitalWrite(pEN, HIGH);
    1d34:	8c e0       	ldi	r24, 0x0C	; 12
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	0e 94 4d 12 	call	0x249a	; 0x249a <digitalWrite>
}
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1d42:	08 95       	ret

00001d44 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    1d44:	1f 92       	push	r1
    1d46:	0f 92       	push	r0
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	0f 92       	push	r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	2f 93       	push	r18
    1d50:	3f 93       	push	r19
    1d52:	4f 93       	push	r20
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1d5c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1d60:	20 91 ec 03 	lds	r18, 0x03EC
    1d64:	30 91 ed 03 	lds	r19, 0x03ED
    1d68:	2f 5f       	subi	r18, 0xFF	; 255
    1d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6c:	2f 73       	andi	r18, 0x3F	; 63
    1d6e:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1d70:	80 91 ee 03 	lds	r24, 0x03EE
    1d74:	90 91 ef 03 	lds	r25, 0x03EF
    1d78:	28 17       	cp	r18, r24
    1d7a:	39 07       	cpc	r19, r25
    1d7c:	59 f0       	breq	.+22     	; 0x1d94 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    1d7e:	e0 91 ec 03 	lds	r30, 0x03EC
    1d82:	f0 91 ed 03 	lds	r31, 0x03ED
    1d86:	e4 55       	subi	r30, 0x54	; 84
    1d88:	fc 4f       	sbci	r31, 0xFC	; 252
    1d8a:	40 83       	st	Z, r20
    buffer->head = i;
    1d8c:	30 93 ed 03 	sts	0x03ED, r19
    1d90:	20 93 ec 03 	sts	0x03EC, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1d94:	ff 91       	pop	r31
    1d96:	ef 91       	pop	r30
    1d98:	9f 91       	pop	r25
    1d9a:	8f 91       	pop	r24
    1d9c:	4f 91       	pop	r20
    1d9e:	3f 91       	pop	r19
    1da0:	2f 91       	pop	r18
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1dac:	e0 91 40 04 	lds	r30, 0x0440
    1db0:	f0 91 41 04 	lds	r31, 0x0441
    1db4:	e0 5c       	subi	r30, 0xC0	; 192
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	81 91       	ld	r24, Z+
    1dba:	91 91       	ld	r25, Z+
    1dbc:	20 81       	ld	r18, Z
    1dbe:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1dc0:	82 1b       	sub	r24, r18
    1dc2:	93 0b       	sbc	r25, r19
    1dc4:	8f 73       	andi	r24, 0x3F	; 63
    1dc6:	90 70       	andi	r25, 0x00	; 0
    1dc8:	89 2b       	or	r24, r25
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <_Z14serialEventRunv+0x24>
    1dcc:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_Z11serialEventv>
    1dd0:	08 95       	ret

00001dd2 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	2f 93       	push	r18
    1dde:	3f 93       	push	r19
    1de0:	4f 93       	push	r20
    1de2:	5f 93       	push	r21
    1de4:	6f 93       	push	r22
    1de6:	7f 93       	push	r23
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	af 93       	push	r26
    1dee:	bf 93       	push	r27
    1df0:	ef 93       	push	r30
    1df2:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1df4:	20 91 30 04 	lds	r18, 0x0430
    1df8:	30 91 31 04 	lds	r19, 0x0431
    1dfc:	80 91 32 04 	lds	r24, 0x0432
    1e00:	90 91 33 04 	lds	r25, 0x0433
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	31 f4       	brne	.+12     	; 0x1e16 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1e0a:	80 91 c1 00 	lds	r24, 0x00C1
    1e0e:	8f 7d       	andi	r24, 0xDF	; 223
    1e10:	80 93 c1 00 	sts	0x00C1, r24
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1e16:	e0 91 32 04 	lds	r30, 0x0432
    1e1a:	f0 91 33 04 	lds	r31, 0x0433
    1e1e:	e0 51       	subi	r30, 0x10	; 16
    1e20:	fc 4f       	sbci	r31, 0xFC	; 252
    1e22:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1e24:	80 91 32 04 	lds	r24, 0x0432
    1e28:	90 91 33 04 	lds	r25, 0x0433
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	60 e4       	ldi	r22, 0x40	; 64
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	0e 94 26 14 	call	0x284c	; 0x284c <__divmodhi4>
    1e36:	90 93 33 04 	sts	0x0433, r25
    1e3a:	80 93 32 04 	sts	0x0432, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1e3e:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1e42:	ff 91       	pop	r31
    1e44:	ef 91       	pop	r30
    1e46:	bf 91       	pop	r27
    1e48:	af 91       	pop	r26
    1e4a:	9f 91       	pop	r25
    1e4c:	8f 91       	pop	r24
    1e4e:	7f 91       	pop	r23
    1e50:	6f 91       	pop	r22
    1e52:	5f 91       	pop	r21
    1e54:	4f 91       	pop	r20
    1e56:	3f 91       	pop	r19
    1e58:	2f 91       	pop	r18
    1e5a:	0f 90       	pop	r0
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	0f 90       	pop	r0
    1e60:	1f 90       	pop	r1
    1e62:	18 95       	reti

00001e64 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	ec 01       	movw	r28, r24
    1e78:	7a 01       	movw	r14, r20
    1e7a:	8b 01       	movw	r16, r22
    1e7c:	dd 24       	eor	r13, r13
    1e7e:	40 30       	cpi	r20, 0x00	; 0
    1e80:	81 ee       	ldi	r24, 0xE1	; 225
    1e82:	58 07       	cpc	r21, r24
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	68 07       	cpc	r22, r24
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	78 07       	cpc	r23, r24
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <_ZN14HardwareSerial5beginEm+0x2e>
    1e8e:	dd 24       	eor	r13, r13
    1e90:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	a9 2e       	mov	r10, r25
    1e96:	b1 2c       	mov	r11, r1
    1e98:	ec 89       	ldd	r30, Y+20	; 0x14
    1e9a:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1e9c:	dd 20       	and	r13, r13
    1e9e:	69 f0       	breq	.+26     	; 0x1eba <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1ea0:	c5 01       	movw	r24, r10
    1ea2:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <_ZN14HardwareSerial5beginEm+0x46>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	0a 94       	dec	r0
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <_ZN14HardwareSerial5beginEm+0x42>
    1eae:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	79 e0       	ldi	r23, 0x09	; 9
    1eb4:	8d e3       	ldi	r24, 0x3D	; 61
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1eba:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ebc:	60 e8       	ldi	r22, 0x80	; 128
    1ebe:	74 e8       	ldi	r23, 0x84	; 132
    1ec0:	8e e1       	ldi	r24, 0x1E	; 30
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a8 01       	movw	r20, r16
    1ec6:	97 01       	movw	r18, r14
    1ec8:	0e 94 39 14 	call	0x2872	; 0x2872 <__udivmodsi4>
    1ecc:	21 50       	subi	r18, 0x01	; 1
    1ece:	30 40       	sbci	r19, 0x00	; 0
    1ed0:	40 40       	sbci	r20, 0x00	; 0
    1ed2:	50 40       	sbci	r21, 0x00	; 0
    1ed4:	56 95       	lsr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	37 95       	ror	r19
    1eda:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1edc:	80 e1       	ldi	r24, 0x10	; 16
    1ede:	20 30       	cpi	r18, 0x00	; 0
    1ee0:	38 07       	cpc	r19, r24
    1ee2:	20 f0       	brcs	.+8      	; 0x1eec <_ZN14HardwareSerial5beginEm+0x88>
    1ee4:	dd 20       	and	r13, r13
    1ee6:	11 f0       	breq	.+4      	; 0x1eec <_ZN14HardwareSerial5beginEm+0x88>
    1ee8:	dd 24       	eor	r13, r13
    1eea:	d6 cf       	rjmp	.-84     	; 0x1e98 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1eec:	e8 89       	ldd	r30, Y+16	; 0x10
    1eee:	f9 89       	ldd	r31, Y+17	; 0x11
    1ef0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1ef2:	ea 89       	ldd	r30, Y+18	; 0x12
    1ef4:	fb 89       	ldd	r31, Y+19	; 0x13
    1ef6:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1ef8:	ee 89       	ldd	r30, Y+22	; 0x16
    1efa:	ff 89       	ldd	r31, Y+23	; 0x17
    1efc:	40 81       	ld	r20, Z
    1efe:	21 e0       	ldi	r18, 0x01	; 1
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	c9 01       	movw	r24, r18
    1f04:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <_ZN14HardwareSerial5beginEm+0xa8>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <_ZN14HardwareSerial5beginEm+0xa4>
    1f10:	48 2b       	or	r20, r24
    1f12:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1f14:	ee 89       	ldd	r30, Y+22	; 0x16
    1f16:	ff 89       	ldd	r31, Y+23	; 0x17
    1f18:	40 81       	ld	r20, Z
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <_ZN14HardwareSerial5beginEm+0xc0>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <_ZN14HardwareSerial5beginEm+0xbc>
    1f28:	48 2b       	or	r20, r24
    1f2a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1f2c:	ee 89       	ldd	r30, Y+22	; 0x16
    1f2e:	ff 89       	ldd	r31, Y+23	; 0x17
    1f30:	40 81       	ld	r20, Z
    1f32:	c9 01       	movw	r24, r18
    1f34:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <_ZN14HardwareSerial5beginEm+0xd8>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <_ZN14HardwareSerial5beginEm+0xd4>
    1f40:	48 2b       	or	r20, r24
    1f42:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1f44:	ee 89       	ldd	r30, Y+22	; 0x16
    1f46:	ff 89       	ldd	r31, Y+23	; 0x17
    1f48:	80 81       	ld	r24, Z
    1f4a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <_ZN14HardwareSerial5beginEm+0xee>
    1f4e:	22 0f       	add	r18, r18
    1f50:	33 1f       	adc	r19, r19
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <_ZN14HardwareSerial5beginEm+0xea>
    1f56:	20 95       	com	r18
    1f58:	28 23       	and	r18, r24
    1f5a:	20 83       	st	Z, r18
}
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	08 95       	ret

00001f70 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1f70:	dc 01       	movw	r26, r24
    1f72:	1c 96       	adiw	r26, 0x0c	; 12
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	1d 97       	sbiw	r26, 0x0d	; 13
    1f7a:	e0 5c       	subi	r30, 0xC0	; 192
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	21 91       	ld	r18, Z+
    1f80:	31 91       	ld	r19, Z+
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	28 1b       	sub	r18, r24
    1f88:	39 0b       	sbc	r19, r25
    1f8a:	2f 73       	andi	r18, 0x3F	; 63
    1f8c:	30 70       	andi	r19, 0x00	; 0
}
    1f8e:	c9 01       	movw	r24, r18
    1f90:	08 95       	ret

00001f92 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1f92:	dc 01       	movw	r26, r24
    1f94:	1c 96       	adiw	r26, 0x0c	; 12
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	1d 97       	sbiw	r26, 0x0d	; 13
    1f9c:	e0 5c       	subi	r30, 0xC0	; 192
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	20 81       	ld	r18, Z
    1fa2:	31 81       	ldd	r19, Z+1	; 0x01
    1fa4:	e0 54       	subi	r30, 0x40	; 64
    1fa6:	f0 40       	sbci	r31, 0x00	; 0
    1fa8:	df 01       	movw	r26, r30
    1faa:	ae 5b       	subi	r26, 0xBE	; 190
    1fac:	bf 4f       	sbci	r27, 0xFF	; 255
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	11 97       	sbiw	r26, 0x01	; 1
    1fb4:	28 17       	cp	r18, r24
    1fb6:	39 07       	cpc	r19, r25
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <_ZN14HardwareSerial4peekEv+0x2e>
    1fba:	2f ef       	ldi	r18, 0xFF	; 255
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	07 c0       	rjmp	.+14     	; 0x1fce <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1fc0:	8d 91       	ld	r24, X+
    1fc2:	9c 91       	ld	r25, X
    1fc4:	e8 0f       	add	r30, r24
    1fc6:	f9 1f       	adc	r31, r25
    1fc8:	80 81       	ld	r24, Z
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1fce:	c9 01       	movw	r24, r18
    1fd0:	08 95       	ret

00001fd2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	1c 96       	adiw	r26, 0x0c	; 12
    1fd6:	ed 91       	ld	r30, X+
    1fd8:	fc 91       	ld	r31, X
    1fda:	1d 97       	sbiw	r26, 0x0d	; 13
    1fdc:	e0 5c       	subi	r30, 0xC0	; 192
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	20 81       	ld	r18, Z
    1fe2:	31 81       	ldd	r19, Z+1	; 0x01
    1fe4:	e0 54       	subi	r30, 0x40	; 64
    1fe6:	f0 40       	sbci	r31, 0x00	; 0
    1fe8:	df 01       	movw	r26, r30
    1fea:	ae 5b       	subi	r26, 0xBE	; 190
    1fec:	bf 4f       	sbci	r27, 0xFF	; 255
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	11 97       	sbiw	r26, 0x01	; 1
    1ff4:	28 17       	cp	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	19 f4       	brne	.+6      	; 0x2000 <_ZN14HardwareSerial4readEv+0x2e>
    1ffa:	2f ef       	ldi	r18, 0xFF	; 255
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	10 c0       	rjmp	.+32     	; 0x2020 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2000:	8d 91       	ld	r24, X+
    2002:	9c 91       	ld	r25, X
    2004:	11 97       	sbiw	r26, 0x01	; 1
    2006:	e8 0f       	add	r30, r24
    2008:	f9 1f       	adc	r31, r25
    200a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    200c:	8d 91       	ld	r24, X+
    200e:	9c 91       	ld	r25, X
    2010:	11 97       	sbiw	r26, 0x01	; 1
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	8f 73       	andi	r24, 0x3F	; 63
    2016:	90 70       	andi	r25, 0x00	; 0
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	9c 93       	st	X, r25
    201c:	8e 93       	st	-X, r24
    return c;
    201e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2020:	c9 01       	movw	r24, r18
    2022:	08 95       	ret

00002024 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    2024:	fc 01       	movw	r30, r24
    2026:	86 85       	ldd	r24, Z+14	; 0x0e
    2028:	97 85       	ldd	r25, Z+15	; 0x0f
    202a:	dc 01       	movw	r26, r24
    202c:	a0 5c       	subi	r26, 0xC0	; 192
    202e:	bf 4f       	sbci	r27, 0xFF	; 255
    2030:	fc 01       	movw	r30, r24
    2032:	ee 5b       	subi	r30, 0xBE	; 190
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	2d 91       	ld	r18, X+
    2038:	3c 91       	ld	r19, X
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	c1 f7       	brne	.-16     	; 0x2036 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    2046:	08 95       	ret

00002048 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	ec 01       	movw	r28, r24
    204e:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2050:	ee 85       	ldd	r30, Y+14	; 0x0e
    2052:	ff 85       	ldd	r31, Y+15	; 0x0f
    2054:	e0 5c       	subi	r30, 0xC0	; 192
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	80 81       	ld	r24, Z
    205a:	91 81       	ldd	r25, Z+1	; 0x01
    205c:	e0 54       	subi	r30, 0x40	; 64
    205e:	f0 40       	sbci	r31, 0x00	; 0
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	60 e4       	ldi	r22, 0x40	; 64
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	0e 94 26 14 	call	0x284c	; 0x284c <__divmodhi4>
    206a:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    206c:	df 01       	movw	r26, r30
    206e:	ae 5b       	subi	r26, 0xBE	; 190
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	8d 91       	ld	r24, X+
    2074:	9c 91       	ld	r25, X
    2076:	11 97       	sbiw	r26, 0x01	; 1
    2078:	28 17       	cp	r18, r24
    207a:	39 07       	cpc	r19, r25
    207c:	d1 f3       	breq	.-12     	; 0x2072 <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    207e:	e0 5c       	subi	r30, 0xC0	; 192
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	e0 54       	subi	r30, 0x40	; 64
    2088:	f0 40       	sbci	r31, 0x00	; 0
    208a:	e8 0f       	add	r30, r24
    208c:	f9 1f       	adc	r31, r25
    208e:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    2090:	ee 85       	ldd	r30, Y+14	; 0x0e
    2092:	ff 85       	ldd	r31, Y+15	; 0x0f
    2094:	e0 5c       	subi	r30, 0xC0	; 192
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	31 83       	std	Z+1, r19	; 0x01
    209a:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    209c:	ee 89       	ldd	r30, Y+22	; 0x16
    209e:	ff 89       	ldd	r31, Y+23	; 0x17
    20a0:	20 81       	ld	r18, Z
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <_ZN14HardwareSerial5writeEh+0x66>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <_ZN14HardwareSerial5writeEh+0x62>
    20b2:	28 2b       	or	r18, r24
    20b4:	20 83       	st	Z, r18
  
  return 1;
}
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	08 95       	ret

000020c0 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    20c0:	10 92 37 04 	sts	0x0437, r1
    20c4:	10 92 36 04 	sts	0x0436, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    20c8:	88 ee       	ldi	r24, 0xE8	; 232
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	a0 e0       	ldi	r26, 0x00	; 0
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	80 93 38 04 	sts	0x0438, r24
    20d4:	90 93 39 04 	sts	0x0439, r25
    20d8:	a0 93 3a 04 	sts	0x043A, r26
    20dc:	b0 93 3b 04 	sts	0x043B, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    20e0:	8a e0       	ldi	r24, 0x0A	; 10
    20e2:	92 e0       	ldi	r25, 0x02	; 2
    20e4:	90 93 35 04 	sts	0x0435, r25
    20e8:	80 93 34 04 	sts	0x0434, r24
{
  _rx_buffer = rx_buffer;
    20ec:	8c ea       	ldi	r24, 0xAC	; 172
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	90 93 41 04 	sts	0x0441, r25
    20f4:	80 93 40 04 	sts	0x0440, r24
  _tx_buffer = tx_buffer;
    20f8:	80 ef       	ldi	r24, 0xF0	; 240
    20fa:	93 e0       	ldi	r25, 0x03	; 3
    20fc:	90 93 43 04 	sts	0x0443, r25
    2100:	80 93 42 04 	sts	0x0442, r24
  _ubrrh = ubrrh;
    2104:	85 ec       	ldi	r24, 0xC5	; 197
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	90 93 45 04 	sts	0x0445, r25
    210c:	80 93 44 04 	sts	0x0444, r24
  _ubrrl = ubrrl;
    2110:	84 ec       	ldi	r24, 0xC4	; 196
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	90 93 47 04 	sts	0x0447, r25
    2118:	80 93 46 04 	sts	0x0446, r24
  _ucsra = ucsra;
    211c:	80 ec       	ldi	r24, 0xC0	; 192
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	90 93 49 04 	sts	0x0449, r25
    2124:	80 93 48 04 	sts	0x0448, r24
  _ucsrb = ucsrb;
    2128:	81 ec       	ldi	r24, 0xC1	; 193
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	90 93 4b 04 	sts	0x044B, r25
    2130:	80 93 4a 04 	sts	0x044A, r24
  _udr = udr;
    2134:	86 ec       	ldi	r24, 0xC6	; 198
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	90 93 4d 04 	sts	0x044D, r25
    213c:	80 93 4c 04 	sts	0x044C, r24
  _rxen = rxen;
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	80 93 4e 04 	sts	0x044E, r24
  _txen = txen;
    2146:	83 e0       	ldi	r24, 0x03	; 3
    2148:	80 93 4f 04 	sts	0x044F, r24
  _rxcie = rxcie;
    214c:	87 e0       	ldi	r24, 0x07	; 7
    214e:	80 93 50 04 	sts	0x0450, r24
  _udrie = udrie;
    2152:	85 e0       	ldi	r24, 0x05	; 5
    2154:	80 93 51 04 	sts	0x0451, r24
  _u2x = u2x;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	80 93 52 04 	sts	0x0452, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    215e:	08 95       	ret

00002160 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    2160:	cf 92       	push	r12
    2162:	df 92       	push	r13
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	7c 01       	movw	r14, r24
    2172:	6b 01       	movw	r12, r22
    2174:	8a 01       	movw	r16, r20
    2176:	c0 e0       	ldi	r28, 0x00	; 0
    2178:	d0 e0       	ldi	r29, 0x00	; 0
    217a:	0f c0       	rjmp	.+30     	; 0x219a <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    217c:	d6 01       	movw	r26, r12
    217e:	6d 91       	ld	r22, X+
    2180:	6d 01       	movw	r12, r26
    2182:	d7 01       	movw	r26, r14
    2184:	ed 91       	ld	r30, X+
    2186:	fc 91       	ld	r31, X
    2188:	01 90       	ld	r0, Z+
    218a:	f0 81       	ld	r31, Z
    218c:	e0 2d       	mov	r30, r0
    218e:	c7 01       	movw	r24, r14
    2190:	09 95       	icall
    2192:	c8 0f       	add	r28, r24
    2194:	d9 1f       	adc	r29, r25
    2196:	01 50       	subi	r16, 0x01	; 1
    2198:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    219a:	01 15       	cp	r16, r1
    219c:	11 05       	cpc	r17, r1
    219e:	71 f7       	brne	.-36     	; 0x217c <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    21a0:	ce 01       	movw	r24, r28
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	df 90       	pop	r13
    21b0:	cf 90       	pop	r12
    21b2:	08 95       	ret

000021b4 <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	7b 01       	movw	r14, r22
    21be:	8c 01       	movw	r16, r24
{
  if (howbig == 0) {
    21c0:	61 15       	cp	r22, r1
    21c2:	71 05       	cpc	r23, r1
    21c4:	81 05       	cpc	r24, r1
    21c6:	91 05       	cpc	r25, r1
    21c8:	29 f4       	brne	.+10     	; 0x21d4 <_Z6randoml+0x20>
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	0b c0       	rjmp	.+22     	; 0x21ea <_Z6randoml+0x36>
    return 0;
  }
  return random() % howbig;
    21d4:	0e 94 43 02 	call	0x486	; 0x486 <random>
    21d8:	a8 01       	movw	r20, r16
    21da:	97 01       	movw	r18, r14
    21dc:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__divmodsi4>
    21e0:	ac 01       	movw	r20, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	da 01       	movw	r26, r20
    21e6:	9c 01       	movw	r18, r24
    21e8:	ad 01       	movw	r20, r26
}
    21ea:	b9 01       	movw	r22, r18
    21ec:	ca 01       	movw	r24, r20
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	08 95       	ret

000021f8 <main>:
#include <Arduino.h>

int main(void)
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
{
	init();
    21fc:	0e 94 c7 11 	call	0x238e	; 0x238e <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    2200:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2204:	c6 ed       	ldi	r28, 0xD6	; 214
    2206:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    2208:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <loop>
		if (serialEventRun) serialEventRun();
    220c:	20 97       	sbiw	r28, 0x00	; 0
    220e:	e1 f3       	breq	.-8      	; 0x2208 <main+0x10>
    2210:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_Z14serialEventRunv>
    2214:	f9 cf       	rjmp	.-14     	; 0x2208 <main+0x10>

00002216 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    2216:	0e 94 98 01 	call	0x330	; 0x330 <free>
} 
    221a:	08 95       	ret

0000221c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    221c:	1f 92       	push	r1
    221e:	0f 92       	push	r0
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	0f 92       	push	r0
    2224:	11 24       	eor	r1, r1
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	8f 93       	push	r24
    222c:	9f 93       	push	r25
    222e:	af 93       	push	r26
    2230:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2232:	80 91 57 04 	lds	r24, 0x0457
    2236:	90 91 58 04 	lds	r25, 0x0458
    223a:	a0 91 59 04 	lds	r26, 0x0459
    223e:	b0 91 5a 04 	lds	r27, 0x045A
	unsigned char f = timer0_fract;
    2242:	30 91 5b 04 	lds	r19, 0x045B

	m += MILLIS_INC;
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	a1 1d       	adc	r26, r1
    224a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    224c:	23 2f       	mov	r18, r19
    224e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2250:	2d 37       	cpi	r18, 0x7D	; 125
    2252:	20 f0       	brcs	.+8      	; 0x225c <__vector_16+0x40>
		f -= FRACT_MAX;
    2254:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	a1 1d       	adc	r26, r1
    225a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    225c:	20 93 5b 04 	sts	0x045B, r18
	timer0_millis = m;
    2260:	80 93 57 04 	sts	0x0457, r24
    2264:	90 93 58 04 	sts	0x0458, r25
    2268:	a0 93 59 04 	sts	0x0459, r26
    226c:	b0 93 5a 04 	sts	0x045A, r27
	timer0_overflow_count++;
    2270:	80 91 53 04 	lds	r24, 0x0453
    2274:	90 91 54 04 	lds	r25, 0x0454
    2278:	a0 91 55 04 	lds	r26, 0x0455
    227c:	b0 91 56 04 	lds	r27, 0x0456
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	a1 1d       	adc	r26, r1
    2284:	b1 1d       	adc	r27, r1
    2286:	80 93 53 04 	sts	0x0453, r24
    228a:	90 93 54 04 	sts	0x0454, r25
    228e:	a0 93 55 04 	sts	0x0455, r26
    2292:	b0 93 56 04 	sts	0x0456, r27
}
    2296:	bf 91       	pop	r27
    2298:	af 91       	pop	r26
    229a:	9f 91       	pop	r25
    229c:	8f 91       	pop	r24
    229e:	3f 91       	pop	r19
    22a0:	2f 91       	pop	r18
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    22ac:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    22ae:	f8 94       	cli
	m = timer0_millis;
    22b0:	20 91 57 04 	lds	r18, 0x0457
    22b4:	30 91 58 04 	lds	r19, 0x0458
    22b8:	40 91 59 04 	lds	r20, 0x0459
    22bc:	50 91 5a 04 	lds	r21, 0x045A
	SREG = oldSREG;
    22c0:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    22c2:	b9 01       	movw	r22, r18
    22c4:	ca 01       	movw	r24, r20
    22c6:	08 95       	ret

000022c8 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    22c8:	9b 01       	movw	r18, r22
    22ca:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    22cc:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    22ce:	f8 94       	cli
	m = timer0_overflow_count;
    22d0:	80 91 53 04 	lds	r24, 0x0453
    22d4:	90 91 54 04 	lds	r25, 0x0454
    22d8:	a0 91 55 04 	lds	r26, 0x0455
    22dc:	b0 91 56 04 	lds	r27, 0x0456
#if defined(TCNT0)
	t = TCNT0;
    22e0:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    22e2:	a8 9b       	sbis	0x15, 0	; 21
    22e4:	05 c0       	rjmp	.+10     	; 0x22f0 <delay+0x28>
    22e6:	6f 3f       	cpi	r22, 0xFF	; 255
    22e8:	19 f0       	breq	.+6      	; 0x22f0 <delay+0x28>
		m++;
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	a1 1d       	adc	r26, r1
    22ee:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    22f0:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    22f2:	ba 2f       	mov	r27, r26
    22f4:	a9 2f       	mov	r26, r25
    22f6:	98 2f       	mov	r25, r24
    22f8:	88 27       	eor	r24, r24
    22fa:	86 0f       	add	r24, r22
    22fc:	91 1d       	adc	r25, r1
    22fe:	a1 1d       	adc	r26, r1
    2300:	b1 1d       	adc	r27, r1
    2302:	62 e0       	ldi	r22, 0x02	; 2
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	aa 1f       	adc	r26, r26
    230a:	bb 1f       	adc	r27, r27
    230c:	6a 95       	dec	r22
    230e:	d1 f7       	brne	.-12     	; 0x2304 <delay+0x3c>
    2310:	bc 01       	movw	r22, r24
    2312:	2d c0       	rjmp	.+90     	; 0x236e <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2314:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    2316:	f8 94       	cli
	m = timer0_overflow_count;
    2318:	80 91 53 04 	lds	r24, 0x0453
    231c:	90 91 54 04 	lds	r25, 0x0454
    2320:	a0 91 55 04 	lds	r26, 0x0455
    2324:	b0 91 56 04 	lds	r27, 0x0456
#if defined(TCNT0)
	t = TCNT0;
    2328:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    232a:	a8 9b       	sbis	0x15, 0	; 21
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <delay+0x70>
    232e:	ef 3f       	cpi	r30, 0xFF	; 255
    2330:	19 f0       	breq	.+6      	; 0x2338 <delay+0x70>
		m++;
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	a1 1d       	adc	r26, r1
    2336:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2338:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    233a:	ba 2f       	mov	r27, r26
    233c:	a9 2f       	mov	r26, r25
    233e:	98 2f       	mov	r25, r24
    2340:	88 27       	eor	r24, r24
    2342:	8e 0f       	add	r24, r30
    2344:	91 1d       	adc	r25, r1
    2346:	a1 1d       	adc	r26, r1
    2348:	b1 1d       	adc	r27, r1
    234a:	e2 e0       	ldi	r30, 0x02	; 2
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	aa 1f       	adc	r26, r26
    2352:	bb 1f       	adc	r27, r27
    2354:	ea 95       	dec	r30
    2356:	d1 f7       	brne	.-12     	; 0x234c <delay+0x84>
    2358:	86 1b       	sub	r24, r22
    235a:	97 0b       	sbc	r25, r23
    235c:	88 5e       	subi	r24, 0xE8	; 232
    235e:	93 40       	sbci	r25, 0x03	; 3
    2360:	c8 f2       	brcs	.-78     	; 0x2314 <delay+0x4c>
			ms--;
    2362:	21 50       	subi	r18, 0x01	; 1
    2364:	30 40       	sbci	r19, 0x00	; 0
    2366:	40 40       	sbci	r20, 0x00	; 0
    2368:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    236a:	68 51       	subi	r22, 0x18	; 24
    236c:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    236e:	21 15       	cp	r18, r1
    2370:	31 05       	cpc	r19, r1
    2372:	41 05       	cpc	r20, r1
    2374:	51 05       	cpc	r21, r1
    2376:	71 f6       	brne	.-100    	; 0x2314 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2378:	08 95       	ret

0000237a <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	39 f0       	breq	.+14     	; 0x238c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2386:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <delayMicroseconds+0xe>
    238c:	08 95       	ret

0000238e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    238e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2390:	84 b5       	in	r24, 0x24	; 36
    2392:	82 60       	ori	r24, 0x02	; 2
    2394:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2396:	84 b5       	in	r24, 0x24	; 36
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    239c:	85 b5       	in	r24, 0x25	; 37
    239e:	82 60       	ori	r24, 0x02	; 2
    23a0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    23a2:	85 b5       	in	r24, 0x25	; 37
    23a4:	81 60       	ori	r24, 0x01	; 1
    23a6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    23a8:	ee e6       	ldi	r30, 0x6E	; 110
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	81 60       	ori	r24, 0x01	; 1
    23b0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    23b2:	e1 e8       	ldi	r30, 0x81	; 129
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    23b8:	80 81       	ld	r24, Z
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    23be:	80 81       	ld	r24, Z
    23c0:	81 60       	ori	r24, 0x01	; 1
    23c2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    23c4:	e0 e8       	ldi	r30, 0x80	; 128
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	81 60       	ori	r24, 0x01	; 1
    23cc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    23ce:	e1 eb       	ldi	r30, 0xB1	; 177
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	84 60       	ori	r24, 0x04	; 4
    23d6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    23d8:	e0 eb       	ldi	r30, 0xB0	; 176
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	81 60       	ori	r24, 0x01	; 1
    23e0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    23e2:	ea e7       	ldi	r30, 0x7A	; 122
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	84 60       	ori	r24, 0x04	; 4
    23ea:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    23ec:	80 81       	ld	r24, Z
    23ee:	82 60       	ori	r24, 0x02	; 2
    23f0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    23f2:	80 81       	ld	r24, Z
    23f4:	81 60       	ori	r24, 0x01	; 1
    23f6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    23f8:	80 81       	ld	r24, Z
    23fa:	80 68       	ori	r24, 0x80	; 128
    23fc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    23fe:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2402:	08 95       	ret

00002404 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    2404:	80 93 fd 01 	sts	0x01FD, r24
}
    2408:	08 95       	ret

0000240a <analogRead>:

int analogRead(uint8_t pin)
{
    240a:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    240c:	8e 30       	cpi	r24, 0x0E	; 14
    240e:	08 f0       	brcs	.+2      	; 0x2412 <analogRead+0x8>
    2410:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2412:	97 70       	andi	r25, 0x07	; 7
    2414:	80 91 fd 01 	lds	r24, 0x01FD
    2418:	82 95       	swap	r24
    241a:	88 0f       	add	r24, r24
    241c:	88 0f       	add	r24, r24
    241e:	80 7c       	andi	r24, 0xC0	; 192
    2420:	89 2b       	or	r24, r25
    2422:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2426:	80 91 7a 00 	lds	r24, 0x007A
    242a:	80 64       	ori	r24, 0x40	; 64
    242c:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2430:	80 91 7a 00 	lds	r24, 0x007A
    2434:	86 fd       	sbrc	r24, 6
    2436:	fc cf       	rjmp	.-8      	; 0x2430 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2438:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    243c:	40 91 79 00 	lds	r20, 0x0079
    2440:	94 2f       	mov	r25, r20
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	28 2b       	or	r18, r24
    2448:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    244a:	c9 01       	movw	r24, r18
    244c:	08 95       	ret

0000244e <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    244e:	48 2f       	mov	r20, r24
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	ca 01       	movw	r24, r20
    2454:	86 5a       	subi	r24, 0xA6	; 166
    2456:	9e 4f       	sbci	r25, 0xFE	; 254
    2458:	fc 01       	movw	r30, r24
    245a:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    245c:	4a 5b       	subi	r20, 0xBA	; 186
    245e:	5e 4f       	sbci	r21, 0xFE	; 254
    2460:	fa 01       	movw	r30, r20
    2462:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2464:	88 23       	and	r24, r24
    2466:	c1 f0       	breq	.+48     	; 0x2498 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2468:	e8 2f       	mov	r30, r24
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e8 5d       	subi	r30, 0xD8	; 216
    2472:	fe 4f       	sbci	r31, 0xFE	; 254
    2474:	a5 91       	lpm	r26, Z+
    2476:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    2478:	66 23       	and	r22, r22
    247a:	41 f4       	brne	.+16     	; 0x248c <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    247c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    247e:	f8 94       	cli
		*reg &= ~bit;
    2480:	8c 91       	ld	r24, X
    2482:	20 95       	com	r18
    2484:	82 23       	and	r24, r18
    2486:	8c 93       	st	X, r24
		SREG = oldSREG;
    2488:	9f bf       	out	0x3f, r25	; 63
    248a:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    248c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    248e:	f8 94       	cli
		*reg |= bit;
    2490:	8c 91       	ld	r24, X
    2492:	82 2b       	or	r24, r18
    2494:	8c 93       	st	X, r24
		SREG = oldSREG;
    2496:	9f bf       	out	0x3f, r25	; 63
    2498:	08 95       	ret

0000249a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    249a:	48 2f       	mov	r20, r24
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	ca 01       	movw	r24, r20
    24a0:	82 59       	subi	r24, 0x92	; 146
    24a2:	9e 4f       	sbci	r25, 0xFE	; 254
    24a4:	fc 01       	movw	r30, r24
    24a6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    24a8:	ca 01       	movw	r24, r20
    24aa:	86 5a       	subi	r24, 0xA6	; 166
    24ac:	9e 4f       	sbci	r25, 0xFE	; 254
    24ae:	fc 01       	movw	r30, r24
    24b0:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    24b2:	4a 5b       	subi	r20, 0xBA	; 186
    24b4:	5e 4f       	sbci	r21, 0xFE	; 254
    24b6:	fa 01       	movw	r30, r20
    24b8:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    24ba:	33 23       	and	r19, r19
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <digitalWrite+0x26>
    24be:	40 c0       	rjmp	.+128    	; 0x2540 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    24c0:	22 23       	and	r18, r18
    24c2:	51 f1       	breq	.+84     	; 0x2518 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    24c4:	23 30       	cpi	r18, 0x03	; 3
    24c6:	71 f0       	breq	.+28     	; 0x24e4 <digitalWrite+0x4a>
    24c8:	24 30       	cpi	r18, 0x04	; 4
    24ca:	28 f4       	brcc	.+10     	; 0x24d6 <digitalWrite+0x3c>
    24cc:	21 30       	cpi	r18, 0x01	; 1
    24ce:	a1 f0       	breq	.+40     	; 0x24f8 <digitalWrite+0x5e>
    24d0:	22 30       	cpi	r18, 0x02	; 2
    24d2:	11 f5       	brne	.+68     	; 0x2518 <digitalWrite+0x7e>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <digitalWrite+0x64>
    24d6:	26 30       	cpi	r18, 0x06	; 6
    24d8:	b1 f0       	breq	.+44     	; 0x2506 <digitalWrite+0x6c>
    24da:	27 30       	cpi	r18, 0x07	; 7
    24dc:	c1 f0       	breq	.+48     	; 0x250e <digitalWrite+0x74>
    24de:	24 30       	cpi	r18, 0x04	; 4
    24e0:	d9 f4       	brne	.+54     	; 0x2518 <digitalWrite+0x7e>
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24e4:	80 91 80 00 	lds	r24, 0x0080
    24e8:	8f 77       	andi	r24, 0x7F	; 127
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24ec:	80 91 80 00 	lds	r24, 0x0080
    24f0:	8f 7d       	andi	r24, 0xDF	; 223
    24f2:	80 93 80 00 	sts	0x0080, r24
    24f6:	10 c0       	rjmp	.+32     	; 0x2518 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24f8:	84 b5       	in	r24, 0x24	; 36
    24fa:	8f 77       	andi	r24, 0x7F	; 127
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    24fe:	84 b5       	in	r24, 0x24	; 36
    2500:	8f 7d       	andi	r24, 0xDF	; 223
    2502:	84 bd       	out	0x24, r24	; 36
    2504:	09 c0       	rjmp	.+18     	; 0x2518 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2506:	80 91 b0 00 	lds	r24, 0x00B0
    250a:	8f 77       	andi	r24, 0x7F	; 127
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    250e:	80 91 b0 00 	lds	r24, 0x00B0
    2512:	8f 7d       	andi	r24, 0xDF	; 223
    2514:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    2518:	e3 2f       	mov	r30, r19
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	ee 0f       	add	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	ee 5c       	subi	r30, 0xCE	; 206
    2522:	fe 4f       	sbci	r31, 0xFE	; 254
    2524:	a5 91       	lpm	r26, Z+
    2526:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    2528:	2f b7       	in	r18, 0x3f	; 63
	cli();
    252a:	f8 94       	cli

	if (val == LOW) {
    252c:	66 23       	and	r22, r22
    252e:	21 f4       	brne	.+8      	; 0x2538 <digitalWrite+0x9e>
		*out &= ~bit;
    2530:	8c 91       	ld	r24, X
    2532:	90 95       	com	r25
    2534:	89 23       	and	r24, r25
    2536:	02 c0       	rjmp	.+4      	; 0x253c <digitalWrite+0xa2>
	} else {
		*out |= bit;
    2538:	8c 91       	ld	r24, X
    253a:	89 2b       	or	r24, r25
    253c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    253e:	2f bf       	out	0x3f, r18	; 63
    2540:	08 95       	ret

00002542 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    2542:	68 2f       	mov	r22, r24
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	cb 01       	movw	r24, r22
    2548:	82 59       	subi	r24, 0x92	; 146
    254a:	9e 4f       	sbci	r25, 0xFE	; 254
    254c:	fc 01       	movw	r30, r24
    254e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2550:	cb 01       	movw	r24, r22
    2552:	86 5a       	subi	r24, 0xA6	; 166
    2554:	9e 4f       	sbci	r25, 0xFE	; 254
    2556:	fc 01       	movw	r30, r24
    2558:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    255a:	6a 5b       	subi	r22, 0xBA	; 186
    255c:	7e 4f       	sbci	r23, 0xFE	; 254
    255e:	fb 01       	movw	r30, r22
    2560:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    2562:	99 23       	and	r25, r25
    2564:	19 f4       	brne	.+6      	; 0x256c <digitalRead+0x2a>
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	3c c0       	rjmp	.+120    	; 0x25e4 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    256c:	22 23       	and	r18, r18
    256e:	51 f1       	breq	.+84     	; 0x25c4 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2570:	23 30       	cpi	r18, 0x03	; 3
    2572:	71 f0       	breq	.+28     	; 0x2590 <digitalRead+0x4e>
    2574:	24 30       	cpi	r18, 0x04	; 4
    2576:	28 f4       	brcc	.+10     	; 0x2582 <digitalRead+0x40>
    2578:	21 30       	cpi	r18, 0x01	; 1
    257a:	a1 f0       	breq	.+40     	; 0x25a4 <digitalRead+0x62>
    257c:	22 30       	cpi	r18, 0x02	; 2
    257e:	11 f5       	brne	.+68     	; 0x25c4 <digitalRead+0x82>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <digitalRead+0x68>
    2582:	26 30       	cpi	r18, 0x06	; 6
    2584:	b1 f0       	breq	.+44     	; 0x25b2 <digitalRead+0x70>
    2586:	27 30       	cpi	r18, 0x07	; 7
    2588:	c1 f0       	breq	.+48     	; 0x25ba <digitalRead+0x78>
    258a:	24 30       	cpi	r18, 0x04	; 4
    258c:	d9 f4       	brne	.+54     	; 0x25c4 <digitalRead+0x82>
    258e:	04 c0       	rjmp	.+8      	; 0x2598 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2590:	80 91 80 00 	lds	r24, 0x0080
    2594:	8f 77       	andi	r24, 0x7F	; 127
    2596:	03 c0       	rjmp	.+6      	; 0x259e <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2598:	80 91 80 00 	lds	r24, 0x0080
    259c:	8f 7d       	andi	r24, 0xDF	; 223
    259e:	80 93 80 00 	sts	0x0080, r24
    25a2:	10 c0       	rjmp	.+32     	; 0x25c4 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    25a4:	84 b5       	in	r24, 0x24	; 36
    25a6:	8f 77       	andi	r24, 0x7F	; 127
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    25aa:	84 b5       	in	r24, 0x24	; 36
    25ac:	8f 7d       	andi	r24, 0xDF	; 223
    25ae:	84 bd       	out	0x24, r24	; 36
    25b0:	09 c0       	rjmp	.+18     	; 0x25c4 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    25b2:	80 91 b0 00 	lds	r24, 0x00B0
    25b6:	8f 77       	andi	r24, 0x7F	; 127
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    25ba:	80 91 b0 00 	lds	r24, 0x00B0
    25be:	8f 7d       	andi	r24, 0xDF	; 223
    25c0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    25c4:	89 2f       	mov	r24, r25
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	84 5c       	subi	r24, 0xC4	; 196
    25ce:	9e 4f       	sbci	r25, 0xFE	; 254
    25d0:	fc 01       	movw	r30, r24
    25d2:	a5 91       	lpm	r26, Z+
    25d4:	b4 91       	lpm	r27, Z+
    25d6:	8c 91       	ld	r24, X
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	84 23       	and	r24, r20
    25de:	11 f0       	breq	.+4      	; 0x25e4 <digitalRead+0xa2>
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    25e4:	c9 01       	movw	r24, r18
    25e6:	08 95       	ret

000025e8 <__fixsfsi>:
    25e8:	04 d0       	rcall	.+8      	; 0x25f2 <__fixunssfsi>
    25ea:	68 94       	set
    25ec:	b1 11       	cpse	r27, r1
    25ee:	90 c0       	rjmp	.+288    	; 0x2710 <__fp_szero>
    25f0:	08 95       	ret

000025f2 <__fixunssfsi>:
    25f2:	73 d0       	rcall	.+230    	; 0x26da <__fp_splitA>
    25f4:	88 f0       	brcs	.+34     	; 0x2618 <__fixunssfsi+0x26>
    25f6:	9f 57       	subi	r25, 0x7F	; 127
    25f8:	90 f0       	brcs	.+36     	; 0x261e <__fixunssfsi+0x2c>
    25fa:	b9 2f       	mov	r27, r25
    25fc:	99 27       	eor	r25, r25
    25fe:	b7 51       	subi	r27, 0x17	; 23
    2600:	a0 f0       	brcs	.+40     	; 0x262a <__fixunssfsi+0x38>
    2602:	d1 f0       	breq	.+52     	; 0x2638 <__fixunssfsi+0x46>
    2604:	66 0f       	add	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	88 1f       	adc	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	1a f0       	brmi	.+6      	; 0x2614 <__fixunssfsi+0x22>
    260e:	ba 95       	dec	r27
    2610:	c9 f7       	brne	.-14     	; 0x2604 <__fixunssfsi+0x12>
    2612:	12 c0       	rjmp	.+36     	; 0x2638 <__fixunssfsi+0x46>
    2614:	b1 30       	cpi	r27, 0x01	; 1
    2616:	81 f0       	breq	.+32     	; 0x2638 <__fixunssfsi+0x46>
    2618:	7a d0       	rcall	.+244    	; 0x270e <__fp_zero>
    261a:	b1 e0       	ldi	r27, 0x01	; 1
    261c:	08 95       	ret
    261e:	77 c0       	rjmp	.+238    	; 0x270e <__fp_zero>
    2620:	67 2f       	mov	r22, r23
    2622:	78 2f       	mov	r23, r24
    2624:	88 27       	eor	r24, r24
    2626:	b8 5f       	subi	r27, 0xF8	; 248
    2628:	39 f0       	breq	.+14     	; 0x2638 <__fixunssfsi+0x46>
    262a:	b9 3f       	cpi	r27, 0xF9	; 249
    262c:	cc f3       	brlt	.-14     	; 0x2620 <__fixunssfsi+0x2e>
    262e:	86 95       	lsr	r24
    2630:	77 95       	ror	r23
    2632:	67 95       	ror	r22
    2634:	b3 95       	inc	r27
    2636:	d9 f7       	brne	.-10     	; 0x262e <__fixunssfsi+0x3c>
    2638:	3e f4       	brtc	.+14     	; 0x2648 <__fixunssfsi+0x56>
    263a:	90 95       	com	r25
    263c:	80 95       	com	r24
    263e:	70 95       	com	r23
    2640:	61 95       	neg	r22
    2642:	7f 4f       	sbci	r23, 0xFF	; 255
    2644:	8f 4f       	sbci	r24, 0xFF	; 255
    2646:	9f 4f       	sbci	r25, 0xFF	; 255
    2648:	08 95       	ret

0000264a <__floatunsisf>:
    264a:	e8 94       	clt
    264c:	09 c0       	rjmp	.+18     	; 0x2660 <__floatsisf+0x12>

0000264e <__floatsisf>:
    264e:	97 fb       	bst	r25, 7
    2650:	3e f4       	brtc	.+14     	; 0x2660 <__floatsisf+0x12>
    2652:	90 95       	com	r25
    2654:	80 95       	com	r24
    2656:	70 95       	com	r23
    2658:	61 95       	neg	r22
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	8f 4f       	sbci	r24, 0xFF	; 255
    265e:	9f 4f       	sbci	r25, 0xFF	; 255
    2660:	99 23       	and	r25, r25
    2662:	a9 f0       	breq	.+42     	; 0x268e <__floatsisf+0x40>
    2664:	f9 2f       	mov	r31, r25
    2666:	96 e9       	ldi	r25, 0x96	; 150
    2668:	bb 27       	eor	r27, r27
    266a:	93 95       	inc	r25
    266c:	f6 95       	lsr	r31
    266e:	87 95       	ror	r24
    2670:	77 95       	ror	r23
    2672:	67 95       	ror	r22
    2674:	b7 95       	ror	r27
    2676:	f1 11       	cpse	r31, r1
    2678:	f8 cf       	rjmp	.-16     	; 0x266a <__floatsisf+0x1c>
    267a:	fa f4       	brpl	.+62     	; 0x26ba <__floatsisf+0x6c>
    267c:	bb 0f       	add	r27, r27
    267e:	11 f4       	brne	.+4      	; 0x2684 <__floatsisf+0x36>
    2680:	60 ff       	sbrs	r22, 0
    2682:	1b c0       	rjmp	.+54     	; 0x26ba <__floatsisf+0x6c>
    2684:	6f 5f       	subi	r22, 0xFF	; 255
    2686:	7f 4f       	sbci	r23, 0xFF	; 255
    2688:	8f 4f       	sbci	r24, 0xFF	; 255
    268a:	9f 4f       	sbci	r25, 0xFF	; 255
    268c:	16 c0       	rjmp	.+44     	; 0x26ba <__floatsisf+0x6c>
    268e:	88 23       	and	r24, r24
    2690:	11 f0       	breq	.+4      	; 0x2696 <__floatsisf+0x48>
    2692:	96 e9       	ldi	r25, 0x96	; 150
    2694:	11 c0       	rjmp	.+34     	; 0x26b8 <__floatsisf+0x6a>
    2696:	77 23       	and	r23, r23
    2698:	21 f0       	breq	.+8      	; 0x26a2 <__floatsisf+0x54>
    269a:	9e e8       	ldi	r25, 0x8E	; 142
    269c:	87 2f       	mov	r24, r23
    269e:	76 2f       	mov	r23, r22
    26a0:	05 c0       	rjmp	.+10     	; 0x26ac <__floatsisf+0x5e>
    26a2:	66 23       	and	r22, r22
    26a4:	71 f0       	breq	.+28     	; 0x26c2 <__floatsisf+0x74>
    26a6:	96 e8       	ldi	r25, 0x86	; 134
    26a8:	86 2f       	mov	r24, r22
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	2a f0       	brmi	.+10     	; 0x26ba <__floatsisf+0x6c>
    26b0:	9a 95       	dec	r25
    26b2:	66 0f       	add	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	da f7       	brpl	.-10     	; 0x26b0 <__floatsisf+0x62>
    26ba:	88 0f       	add	r24, r24
    26bc:	96 95       	lsr	r25
    26be:	87 95       	ror	r24
    26c0:	97 f9       	bld	r25, 7
    26c2:	08 95       	ret

000026c4 <__fp_nan>:
    26c4:	9f ef       	ldi	r25, 0xFF	; 255
    26c6:	80 ec       	ldi	r24, 0xC0	; 192
    26c8:	08 95       	ret

000026ca <__fp_split3>:
    26ca:	57 fd       	sbrc	r21, 7
    26cc:	90 58       	subi	r25, 0x80	; 128
    26ce:	44 0f       	add	r20, r20
    26d0:	55 1f       	adc	r21, r21
    26d2:	59 f0       	breq	.+22     	; 0x26ea <__fp_splitA+0x10>
    26d4:	5f 3f       	cpi	r21, 0xFF	; 255
    26d6:	71 f0       	breq	.+28     	; 0x26f4 <__fp_splitA+0x1a>
    26d8:	47 95       	ror	r20

000026da <__fp_splitA>:
    26da:	88 0f       	add	r24, r24
    26dc:	97 fb       	bst	r25, 7
    26de:	99 1f       	adc	r25, r25
    26e0:	61 f0       	breq	.+24     	; 0x26fa <__fp_splitA+0x20>
    26e2:	9f 3f       	cpi	r25, 0xFF	; 255
    26e4:	79 f0       	breq	.+30     	; 0x2704 <__fp_splitA+0x2a>
    26e6:	87 95       	ror	r24
    26e8:	08 95       	ret
    26ea:	12 16       	cp	r1, r18
    26ec:	13 06       	cpc	r1, r19
    26ee:	14 06       	cpc	r1, r20
    26f0:	55 1f       	adc	r21, r21
    26f2:	f2 cf       	rjmp	.-28     	; 0x26d8 <__fp_split3+0xe>
    26f4:	46 95       	lsr	r20
    26f6:	f1 df       	rcall	.-30     	; 0x26da <__fp_splitA>
    26f8:	08 c0       	rjmp	.+16     	; 0x270a <__fp_splitA+0x30>
    26fa:	16 16       	cp	r1, r22
    26fc:	17 06       	cpc	r1, r23
    26fe:	18 06       	cpc	r1, r24
    2700:	99 1f       	adc	r25, r25
    2702:	f1 cf       	rjmp	.-30     	; 0x26e6 <__fp_splitA+0xc>
    2704:	86 95       	lsr	r24
    2706:	71 05       	cpc	r23, r1
    2708:	61 05       	cpc	r22, r1
    270a:	08 94       	sec
    270c:	08 95       	ret

0000270e <__fp_zero>:
    270e:	e8 94       	clt

00002710 <__fp_szero>:
    2710:	bb 27       	eor	r27, r27
    2712:	66 27       	eor	r22, r22
    2714:	77 27       	eor	r23, r23
    2716:	cb 01       	movw	r24, r22
    2718:	97 f9       	bld	r25, 7
    271a:	08 95       	ret
    271c:	11 f4       	brne	.+4      	; 0x2722 <__fp_szero+0x12>
    271e:	0e f4       	brtc	.+2      	; 0x2722 <__fp_szero+0x12>
    2720:	d1 cf       	rjmp	.-94     	; 0x26c4 <__fp_nan>
    2722:	4a c0       	rjmp	.+148    	; 0x27b8 <__fp_mpack>

00002724 <sqrt>:
    2724:	da df       	rcall	.-76     	; 0x26da <__fp_splitA>
    2726:	d0 f3       	brcs	.-12     	; 0x271c <__fp_szero+0xc>
    2728:	99 23       	and	r25, r25
    272a:	d9 f3       	breq	.-10     	; 0x2722 <__fp_szero+0x12>
    272c:	ce f3       	brts	.-14     	; 0x2720 <__fp_szero+0x10>
    272e:	9f 57       	subi	r25, 0x7F	; 127
    2730:	55 0b       	sbc	r21, r21
    2732:	87 ff       	sbrs	r24, 7
    2734:	51 d0       	rcall	.+162    	; 0x27d8 <__fp_norm2>
    2736:	56 95       	lsr	r21
    2738:	97 95       	ror	r25
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	20 f4       	brcc	.+8      	; 0x2746 <sqrt+0x22>
    273e:	66 0f       	add	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	bb 1f       	adc	r27, r27
    2746:	1f 93       	push	r17
    2748:	0f 93       	push	r16
    274a:	00 24       	eor	r0, r0
    274c:	90 01       	movw	r18, r0
    274e:	a0 01       	movw	r20, r0
    2750:	80 01       	movw	r16, r0
    2752:	f0 01       	movw	r30, r0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	0e 0f       	add	r16, r30
    2758:	1f 1f       	adc	r17, r31
    275a:	0a 1e       	adc	r0, r26
    275c:	51 1d       	adc	r21, r1
    275e:	60 1b       	sub	r22, r16
    2760:	71 0b       	sbc	r23, r17
    2762:	80 09       	sbc	r24, r0
    2764:	b5 0b       	sbc	r27, r21
    2766:	48 f4       	brcc	.+18     	; 0x277a <sqrt+0x56>
    2768:	60 0f       	add	r22, r16
    276a:	71 1f       	adc	r23, r17
    276c:	80 1d       	adc	r24, r0
    276e:	b5 1f       	adc	r27, r21
    2770:	0e 1b       	sub	r16, r30
    2772:	1f 0b       	sbc	r17, r31
    2774:	0a 0a       	sbc	r0, r26
    2776:	51 09       	sbc	r21, r1
    2778:	07 c0       	rjmp	.+14     	; 0x2788 <sqrt+0x64>
    277a:	2e 0f       	add	r18, r30
    277c:	3f 1f       	adc	r19, r31
    277e:	4a 1f       	adc	r20, r26
    2780:	0e 0f       	add	r16, r30
    2782:	1f 1f       	adc	r17, r31
    2784:	0a 1e       	adc	r0, r26
    2786:	51 1d       	adc	r21, r1
    2788:	66 0f       	add	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	88 1f       	adc	r24, r24
    278e:	bb 1f       	adc	r27, r27
    2790:	a6 95       	lsr	r26
    2792:	f7 95       	ror	r31
    2794:	e7 95       	ror	r30
    2796:	f8 f6       	brcc	.-66     	; 0x2756 <sqrt+0x32>
    2798:	06 17       	cp	r16, r22
    279a:	17 07       	cpc	r17, r23
    279c:	08 06       	cpc	r0, r24
    279e:	5b 07       	cpc	r21, r27
    27a0:	21 1d       	adc	r18, r1
    27a2:	31 1d       	adc	r19, r1
    27a4:	41 1d       	adc	r20, r1
    27a6:	0f 91       	pop	r16
    27a8:	1f 91       	pop	r17
    27aa:	b9 01       	movw	r22, r18
    27ac:	84 2f       	mov	r24, r20
    27ae:	91 58       	subi	r25, 0x81	; 129
    27b0:	88 0f       	add	r24, r24
    27b2:	96 95       	lsr	r25
    27b4:	87 95       	ror	r24
    27b6:	08 95       	ret

000027b8 <__fp_mpack>:
    27b8:	9f 3f       	cpi	r25, 0xFF	; 255
    27ba:	49 f0       	breq	.+18     	; 0x27ce <__fp_mpack+0x16>
    27bc:	91 50       	subi	r25, 0x01	; 1
    27be:	28 f4       	brcc	.+10     	; 0x27ca <__fp_mpack+0x12>
    27c0:	86 95       	lsr	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b7 95       	ror	r27
    27c8:	9f 5f       	subi	r25, 0xFF	; 255
    27ca:	80 38       	cpi	r24, 0x80	; 128
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	88 0f       	add	r24, r24
    27d0:	96 95       	lsr	r25
    27d2:	87 95       	ror	r24
    27d4:	97 f9       	bld	r25, 7
    27d6:	08 95       	ret

000027d8 <__fp_norm2>:
    27d8:	91 50       	subi	r25, 0x01	; 1
    27da:	50 40       	sbci	r21, 0x00	; 0
    27dc:	66 0f       	add	r22, r22
    27de:	77 1f       	adc	r23, r23
    27e0:	88 1f       	adc	r24, r24
    27e2:	d2 f7       	brpl	.-12     	; 0x27d8 <__fp_norm2>
    27e4:	08 95       	ret

000027e6 <__mulsi3>:
    27e6:	62 9f       	mul	r22, r18
    27e8:	d0 01       	movw	r26, r0
    27ea:	73 9f       	mul	r23, r19
    27ec:	f0 01       	movw	r30, r0
    27ee:	82 9f       	mul	r24, r18
    27f0:	e0 0d       	add	r30, r0
    27f2:	f1 1d       	adc	r31, r1
    27f4:	64 9f       	mul	r22, r20
    27f6:	e0 0d       	add	r30, r0
    27f8:	f1 1d       	adc	r31, r1
    27fa:	92 9f       	mul	r25, r18
    27fc:	f0 0d       	add	r31, r0
    27fe:	83 9f       	mul	r24, r19
    2800:	f0 0d       	add	r31, r0
    2802:	74 9f       	mul	r23, r20
    2804:	f0 0d       	add	r31, r0
    2806:	65 9f       	mul	r22, r21
    2808:	f0 0d       	add	r31, r0
    280a:	99 27       	eor	r25, r25
    280c:	72 9f       	mul	r23, r18
    280e:	b0 0d       	add	r27, r0
    2810:	e1 1d       	adc	r30, r1
    2812:	f9 1f       	adc	r31, r25
    2814:	63 9f       	mul	r22, r19
    2816:	b0 0d       	add	r27, r0
    2818:	e1 1d       	adc	r30, r1
    281a:	f9 1f       	adc	r31, r25
    281c:	bd 01       	movw	r22, r26
    281e:	cf 01       	movw	r24, r30
    2820:	11 24       	eor	r1, r1
    2822:	08 95       	ret

00002824 <__udivmodhi4>:
    2824:	aa 1b       	sub	r26, r26
    2826:	bb 1b       	sub	r27, r27
    2828:	51 e1       	ldi	r21, 0x11	; 17
    282a:	07 c0       	rjmp	.+14     	; 0x283a <__udivmodhi4_ep>

0000282c <__udivmodhi4_loop>:
    282c:	aa 1f       	adc	r26, r26
    282e:	bb 1f       	adc	r27, r27
    2830:	a6 17       	cp	r26, r22
    2832:	b7 07       	cpc	r27, r23
    2834:	10 f0       	brcs	.+4      	; 0x283a <__udivmodhi4_ep>
    2836:	a6 1b       	sub	r26, r22
    2838:	b7 0b       	sbc	r27, r23

0000283a <__udivmodhi4_ep>:
    283a:	88 1f       	adc	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	5a 95       	dec	r21
    2840:	a9 f7       	brne	.-22     	; 0x282c <__udivmodhi4_loop>
    2842:	80 95       	com	r24
    2844:	90 95       	com	r25
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	08 95       	ret

0000284c <__divmodhi4>:
    284c:	97 fb       	bst	r25, 7
    284e:	09 2e       	mov	r0, r25
    2850:	07 26       	eor	r0, r23
    2852:	0a d0       	rcall	.+20     	; 0x2868 <__divmodhi4_neg1>
    2854:	77 fd       	sbrc	r23, 7
    2856:	04 d0       	rcall	.+8      	; 0x2860 <__divmodhi4_neg2>
    2858:	e5 df       	rcall	.-54     	; 0x2824 <__udivmodhi4>
    285a:	06 d0       	rcall	.+12     	; 0x2868 <__divmodhi4_neg1>
    285c:	00 20       	and	r0, r0
    285e:	1a f4       	brpl	.+6      	; 0x2866 <__divmodhi4_exit>

00002860 <__divmodhi4_neg2>:
    2860:	70 95       	com	r23
    2862:	61 95       	neg	r22
    2864:	7f 4f       	sbci	r23, 0xFF	; 255

00002866 <__divmodhi4_exit>:
    2866:	08 95       	ret

00002868 <__divmodhi4_neg1>:
    2868:	f6 f7       	brtc	.-4      	; 0x2866 <__divmodhi4_exit>
    286a:	90 95       	com	r25
    286c:	81 95       	neg	r24
    286e:	9f 4f       	sbci	r25, 0xFF	; 255
    2870:	08 95       	ret

00002872 <__udivmodsi4>:
    2872:	a1 e2       	ldi	r26, 0x21	; 33
    2874:	1a 2e       	mov	r1, r26
    2876:	aa 1b       	sub	r26, r26
    2878:	bb 1b       	sub	r27, r27
    287a:	fd 01       	movw	r30, r26
    287c:	0d c0       	rjmp	.+26     	; 0x2898 <__udivmodsi4_ep>

0000287e <__udivmodsi4_loop>:
    287e:	aa 1f       	adc	r26, r26
    2880:	bb 1f       	adc	r27, r27
    2882:	ee 1f       	adc	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	a2 17       	cp	r26, r18
    2888:	b3 07       	cpc	r27, r19
    288a:	e4 07       	cpc	r30, r20
    288c:	f5 07       	cpc	r31, r21
    288e:	20 f0       	brcs	.+8      	; 0x2898 <__udivmodsi4_ep>
    2890:	a2 1b       	sub	r26, r18
    2892:	b3 0b       	sbc	r27, r19
    2894:	e4 0b       	sbc	r30, r20
    2896:	f5 0b       	sbc	r31, r21

00002898 <__udivmodsi4_ep>:
    2898:	66 1f       	adc	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	88 1f       	adc	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	1a 94       	dec	r1
    28a2:	69 f7       	brne	.-38     	; 0x287e <__udivmodsi4_loop>
    28a4:	60 95       	com	r22
    28a6:	70 95       	com	r23
    28a8:	80 95       	com	r24
    28aa:	90 95       	com	r25
    28ac:	9b 01       	movw	r18, r22
    28ae:	ac 01       	movw	r20, r24
    28b0:	bd 01       	movw	r22, r26
    28b2:	cf 01       	movw	r24, r30
    28b4:	08 95       	ret

000028b6 <__divmodsi4>:
    28b6:	97 fb       	bst	r25, 7
    28b8:	09 2e       	mov	r0, r25
    28ba:	05 26       	eor	r0, r21
    28bc:	0e d0       	rcall	.+28     	; 0x28da <__divmodsi4_neg1>
    28be:	57 fd       	sbrc	r21, 7
    28c0:	04 d0       	rcall	.+8      	; 0x28ca <__divmodsi4_neg2>
    28c2:	d7 df       	rcall	.-82     	; 0x2872 <__udivmodsi4>
    28c4:	0a d0       	rcall	.+20     	; 0x28da <__divmodsi4_neg1>
    28c6:	00 1c       	adc	r0, r0
    28c8:	38 f4       	brcc	.+14     	; 0x28d8 <__divmodsi4_exit>

000028ca <__divmodsi4_neg2>:
    28ca:	50 95       	com	r21
    28cc:	40 95       	com	r20
    28ce:	30 95       	com	r19
    28d0:	21 95       	neg	r18
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	4f 4f       	sbci	r20, 0xFF	; 255
    28d6:	5f 4f       	sbci	r21, 0xFF	; 255

000028d8 <__divmodsi4_exit>:
    28d8:	08 95       	ret

000028da <__divmodsi4_neg1>:
    28da:	f6 f7       	brtc	.-4      	; 0x28d8 <__divmodsi4_exit>
    28dc:	90 95       	com	r25
    28de:	80 95       	com	r24
    28e0:	70 95       	com	r23
    28e2:	61 95       	neg	r22
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	8f 4f       	sbci	r24, 0xFF	; 255
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <__tablejump2__>:
    28ec:	ee 0f       	add	r30, r30
    28ee:	ff 1f       	adc	r31, r31

000028f0 <__tablejump__>:
    28f0:	05 90       	lpm	r0, Z+
    28f2:	f4 91       	lpm	r31, Z+
    28f4:	e0 2d       	mov	r30, r0
    28f6:	09 94       	ijmp

000028f8 <__prologue_saves__>:
    28f8:	2f 92       	push	r2
    28fa:	3f 92       	push	r3
    28fc:	4f 92       	push	r4
    28fe:	5f 92       	push	r5
    2900:	6f 92       	push	r6
    2902:	7f 92       	push	r7
    2904:	8f 92       	push	r8
    2906:	9f 92       	push	r9
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	ca 1b       	sub	r28, r26
    2922:	db 0b       	sbc	r29, r27
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	09 94       	ijmp

00002930 <__epilogue_restores__>:
    2930:	2a 88       	ldd	r2, Y+18	; 0x12
    2932:	39 88       	ldd	r3, Y+17	; 0x11
    2934:	48 88       	ldd	r4, Y+16	; 0x10
    2936:	5f 84       	ldd	r5, Y+15	; 0x0f
    2938:	6e 84       	ldd	r6, Y+14	; 0x0e
    293a:	7d 84       	ldd	r7, Y+13	; 0x0d
    293c:	8c 84       	ldd	r8, Y+12	; 0x0c
    293e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2940:	aa 84       	ldd	r10, Y+10	; 0x0a
    2942:	b9 84       	ldd	r11, Y+9	; 0x09
    2944:	c8 84       	ldd	r12, Y+8	; 0x08
    2946:	df 80       	ldd	r13, Y+7	; 0x07
    2948:	ee 80       	ldd	r14, Y+6	; 0x06
    294a:	fd 80       	ldd	r15, Y+5	; 0x05
    294c:	0c 81       	ldd	r16, Y+4	; 0x04
    294e:	1b 81       	ldd	r17, Y+3	; 0x03
    2950:	aa 81       	ldd	r26, Y+2	; 0x02
    2952:	b9 81       	ldd	r27, Y+1	; 0x01
    2954:	ce 0f       	add	r28, r30
    2956:	d1 1d       	adc	r29, r1
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	ed 01       	movw	r28, r26
    2964:	08 95       	ret

00002966 <__do_global_dtors>:
    2966:	11 e0       	ldi	r17, 0x01	; 1
    2968:	c6 e8       	ldi	r28, 0x86	; 134
    296a:	d1 e0       	ldi	r29, 0x01	; 1
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <.do_global_dtors_start>

0000296e <.do_global_dtors_loop>:
    296e:	fe 01       	movw	r30, r28
    2970:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__tablejump__>
    2974:	22 96       	adiw	r28, 0x02	; 2

00002976 <.do_global_dtors_start>:
    2976:	c8 38       	cpi	r28, 0x88	; 136
    2978:	d1 07       	cpc	r29, r17
    297a:	c9 f7       	brne	.-14     	; 0x296e <.do_global_dtors_loop>
    297c:	f8 94       	cli

0000297e <__stop_program>:
    297e:	ff cf       	rjmp	.-2      	; 0x297e <__stop_program>
