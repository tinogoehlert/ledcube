
ledcube_firm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  000028da  0000296e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000248  008001fa  008001fa  00002a68  2**0
                  ALLOC
  3 .debug_aranges 000007c0  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001242  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007b6e  00000000  00000000  0000446a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bf0  00000000  00000000  0000bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000048e1  00000000  00000000  0000dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000da0  00000000  00000000  000124ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001ee7  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004a16  00000000  00000000  00015133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  00019b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	this->_milli  = 100;
}

Effect::~Effect() {

}
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__dtors_end>

}

LedSquare::~LedSquare() {
	// TODO Auto-generated destructor stub
}
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  TCCR1B = _BV(WGM13);        // set mode 8: phase and frequency correct pwm, stop the timer
  setPeriod(microseconds);
}


void TimerOne::setPeriod(long microseconds)		// AR modified for atomic access
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
  is called with fr and fi pointing to index 0 and index N/2
  respectively in the original array. The above guarantees
  that fix_fft "sees" consecutive real samples as alternating
  real and imaginary samples in the complex array.
*/
int fix_fftr(char f[], int m, int inverse)
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
}

LedCube::~LedCube()
{

}
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_13>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__vector_16>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_18>
      4c:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_19>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>

00000068 <_ZL8Sinewave>:
      68:	00 03 06 09 0c 0f 12 15 18 1c 1f 22 25 28 2b 2e     ..........."%(+.
      78:	30 33 36 39 3c 3f 41 44 47 49 4c 4e 51 53 55 58     0369<?ADGILNQSUX
      88:	5a 5c 5e 60 62 64 66 68 6a 6c 6d 6f 70 72 73 75     Z\^`bdfhjlmoprsu
      98:	76 77 78 79 7a 7b 7c 7c 7d 7e 7e 7f 7f 7f 7f 7f     vwxyz{||}~~.....
      a8:	7f 7f 7f 7f 7f 7f 7e 7e 7d 7c 7c 7b 7a 79 78 77     ......~~}||{zyxw
      b8:	76 75 73 72 70 6f 6d 6c 6a 68 66 64 62 60 5e 5c     vusrpomljhfdb`^\
      c8:	5a 58 55 53 51 4e 4c 49 47 44 41 3f 3c 39 36 33     ZXUSQNLIGDA?<963
      d8:	30 2e 2b 28 25 22 1f 1c 18 15 12 0f 0c 09 06 03     0.+(%"..........
      e8:	00 fd fa f7 f4 f1 ee eb e8 e4 e1 de db d8 d5 d2     ................
      f8:	d0 cd ca c7 c4 c1 bf bc b9 b7 b4 b2 af ad ab a8     ................
     108:	a6 a4 a2 a0 9e 9c 9a 98 96 94 93 91 90 8e 8d 8b     ................
     118:	8a 89 88 87 86 85 84 84 83 82 82 81 81 81 81 81     ................

00000128 <port_to_mode_PGM>:
     128:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000132 <port_to_output_PGM>:
     132:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000013c <port_to_input_PGM>:
     13c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000146 <digital_pin_to_port_PGM>:
     146:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     156:	03 03 03 03                                         ....

0000015a <digital_pin_to_bit_mask_PGM>:
     15a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     16a:	04 08 10 20                                         ... 

0000016e <digital_pin_to_timer_PGM>:
     16e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     17e:	00 00 00 00                                         ....

00000182 <__ctors_start>:
     182:	67 02       	muls	r22, r23
     184:	0d 10       	cpse	r0, r13

00000186 <__ctors_end>:
     186:	74 02       	muls	r23, r20

00000188 <__dtors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf ef       	ldi	r28, 0xFF	; 255
     18e:	d8 e0       	ldi	r29, 0x08	; 8
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	11 e0       	ldi	r17, 0x01	; 1
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b1 e0       	ldi	r27, 0x01	; 1
     19a:	ea ed       	ldi	r30, 0xDA	; 218
     19c:	f8 e2       	ldi	r31, 0x28	; 40
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <.do_copy_data_start>

000001a0 <.do_copy_data_loop>:
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0

000001a4 <.do_copy_data_start>:
     1a4:	aa 3f       	cpi	r26, 0xFA	; 250
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <.do_copy_data_loop>

000001aa <__do_clear_bss>:
     1aa:	14 e0       	ldi	r17, 0x04	; 4
     1ac:	aa ef       	ldi	r26, 0xFA	; 250
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	a2 34       	cpi	r26, 0x42	; 66
     1b6:	b1 07       	cpc	r27, r17
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>

000001ba <__do_global_ctors>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	c6 e8       	ldi	r28, 0x86	; 134
     1be:	d1 e0       	ldi	r29, 0x01	; 1
     1c0:	04 c0       	rjmp	.+8      	; 0x1ca <.do_global_ctors_start>

000001c2 <.do_global_ctors_loop>:
     1c2:	22 97       	sbiw	r28, 0x02	; 2
     1c4:	fe 01       	movw	r30, r28
     1c6:	0e 94 25 14 	call	0x284a	; 0x284a <__tablejump__>

000001ca <.do_global_ctors_start>:
     1ca:	c2 38       	cpi	r28, 0x82	; 130
     1cc:	d1 07       	cpc	r29, r17
     1ce:	c9 f7       	brne	.-14     	; 0x1c2 <.do_global_ctors_loop>
     1d0:	0e 94 a9 10 	call	0x2152	; 0x2152 <main>
     1d4:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__do_global_dtors>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <malloc>:
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	bc 01       	movw	r22, r24
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	91 05       	cpc	r25, r1
     1e6:	10 f4       	brcc	.+4      	; 0x1ec <malloc+0x10>
     1e8:	62 e0       	ldi	r22, 0x02	; 2
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	a0 91 40 04 	lds	r26, 0x0440
     1f0:	b0 91 41 04 	lds	r27, 0x0441
     1f4:	ed 01       	movw	r28, r26
     1f6:	e0 e0       	ldi	r30, 0x00	; 0
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	21 c0       	rjmp	.+66     	; 0x242 <malloc+0x66>
     200:	88 81       	ld	r24, Y
     202:	99 81       	ldd	r25, Y+1	; 0x01
     204:	86 17       	cp	r24, r22
     206:	97 07       	cpc	r25, r23
     208:	69 f4       	brne	.+26     	; 0x224 <malloc+0x48>
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	9b 81       	ldd	r25, Y+3	; 0x03
     20e:	30 97       	sbiw	r30, 0x00	; 0
     210:	19 f0       	breq	.+6      	; 0x218 <malloc+0x3c>
     212:	93 83       	std	Z+3, r25	; 0x03
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	04 c0       	rjmp	.+8      	; 0x220 <malloc+0x44>
     218:	90 93 41 04 	sts	0x0441, r25
     21c:	80 93 40 04 	sts	0x0440, r24
     220:	fe 01       	movw	r30, r28
     222:	34 c0       	rjmp	.+104    	; 0x28c <malloc+0xb0>
     224:	68 17       	cp	r22, r24
     226:	79 07       	cpc	r23, r25
     228:	38 f4       	brcc	.+14     	; 0x238 <malloc+0x5c>
     22a:	41 15       	cp	r20, r1
     22c:	51 05       	cpc	r21, r1
     22e:	19 f0       	breq	.+6      	; 0x236 <malloc+0x5a>
     230:	84 17       	cp	r24, r20
     232:	95 07       	cpc	r25, r21
     234:	08 f4       	brcc	.+2      	; 0x238 <malloc+0x5c>
     236:	ac 01       	movw	r20, r24
     238:	fe 01       	movw	r30, r28
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	9b 81       	ldd	r25, Y+3	; 0x03
     23e:	9c 01       	movw	r18, r24
     240:	e9 01       	movw	r28, r18
     242:	20 97       	sbiw	r28, 0x00	; 0
     244:	e9 f6       	brne	.-70     	; 0x200 <malloc+0x24>
     246:	41 15       	cp	r20, r1
     248:	51 05       	cpc	r21, r1
     24a:	a9 f1       	breq	.+106    	; 0x2b6 <malloc+0xda>
     24c:	ca 01       	movw	r24, r20
     24e:	86 1b       	sub	r24, r22
     250:	97 0b       	sbc	r25, r23
     252:	04 97       	sbiw	r24, 0x04	; 4
     254:	08 f4       	brcc	.+2      	; 0x258 <malloc+0x7c>
     256:	ba 01       	movw	r22, r20
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	2a c0       	rjmp	.+84     	; 0x2b2 <malloc+0xd6>
     25e:	8d 91       	ld	r24, X+
     260:	9c 91       	ld	r25, X
     262:	11 97       	sbiw	r26, 0x01	; 1
     264:	84 17       	cp	r24, r20
     266:	95 07       	cpc	r25, r21
     268:	f9 f4       	brne	.+62     	; 0x2a8 <malloc+0xcc>
     26a:	64 17       	cp	r22, r20
     26c:	75 07       	cpc	r23, r21
     26e:	81 f4       	brne	.+32     	; 0x290 <malloc+0xb4>
     270:	12 96       	adiw	r26, 0x02	; 2
     272:	8d 91       	ld	r24, X+
     274:	9c 91       	ld	r25, X
     276:	13 97       	sbiw	r26, 0x03	; 3
     278:	30 97       	sbiw	r30, 0x00	; 0
     27a:	19 f0       	breq	.+6      	; 0x282 <malloc+0xa6>
     27c:	93 83       	std	Z+3, r25	; 0x03
     27e:	82 83       	std	Z+2, r24	; 0x02
     280:	04 c0       	rjmp	.+8      	; 0x28a <malloc+0xae>
     282:	90 93 41 04 	sts	0x0441, r25
     286:	80 93 40 04 	sts	0x0440, r24
     28a:	fd 01       	movw	r30, r26
     28c:	32 96       	adiw	r30, 0x02	; 2
     28e:	4c c0       	rjmp	.+152    	; 0x328 <malloc+0x14c>
     290:	ca 01       	movw	r24, r20
     292:	86 1b       	sub	r24, r22
     294:	97 0b       	sbc	r25, r23
     296:	fd 01       	movw	r30, r26
     298:	e8 0f       	add	r30, r24
     29a:	f9 1f       	adc	r31, r25
     29c:	61 93       	st	Z+, r22
     29e:	71 93       	st	Z+, r23
     2a0:	02 97       	sbiw	r24, 0x02	; 2
     2a2:	8d 93       	st	X+, r24
     2a4:	9c 93       	st	X, r25
     2a6:	40 c0       	rjmp	.+128    	; 0x328 <malloc+0x14c>
     2a8:	fd 01       	movw	r30, r26
     2aa:	82 81       	ldd	r24, Z+2	; 0x02
     2ac:	93 81       	ldd	r25, Z+3	; 0x03
     2ae:	9c 01       	movw	r18, r24
     2b0:	d9 01       	movw	r26, r18
     2b2:	10 97       	sbiw	r26, 0x00	; 0
     2b4:	a1 f6       	brne	.-88     	; 0x25e <malloc+0x82>
     2b6:	80 91 3e 04 	lds	r24, 0x043E
     2ba:	90 91 3f 04 	lds	r25, 0x043F
     2be:	89 2b       	or	r24, r25
     2c0:	41 f4       	brne	.+16     	; 0x2d2 <malloc+0xf6>
     2c2:	80 91 1a 01 	lds	r24, 0x011A
     2c6:	90 91 1b 01 	lds	r25, 0x011B
     2ca:	90 93 3f 04 	sts	0x043F, r25
     2ce:	80 93 3e 04 	sts	0x043E, r24
     2d2:	40 91 1c 01 	lds	r20, 0x011C
     2d6:	50 91 1d 01 	lds	r21, 0x011D
     2da:	41 15       	cp	r20, r1
     2dc:	51 05       	cpc	r21, r1
     2de:	41 f4       	brne	.+16     	; 0x2f0 <malloc+0x114>
     2e0:	4d b7       	in	r20, 0x3d	; 61
     2e2:	5e b7       	in	r21, 0x3e	; 62
     2e4:	80 91 18 01 	lds	r24, 0x0118
     2e8:	90 91 19 01 	lds	r25, 0x0119
     2ec:	48 1b       	sub	r20, r24
     2ee:	59 0b       	sbc	r21, r25
     2f0:	20 91 3e 04 	lds	r18, 0x043E
     2f4:	30 91 3f 04 	lds	r19, 0x043F
     2f8:	ca 01       	movw	r24, r20
     2fa:	82 1b       	sub	r24, r18
     2fc:	93 0b       	sbc	r25, r19
     2fe:	86 17       	cp	r24, r22
     300:	97 07       	cpc	r25, r23
     302:	80 f0       	brcs	.+32     	; 0x324 <malloc+0x148>
     304:	ab 01       	movw	r20, r22
     306:	4e 5f       	subi	r20, 0xFE	; 254
     308:	5f 4f       	sbci	r21, 0xFF	; 255
     30a:	84 17       	cp	r24, r20
     30c:	95 07       	cpc	r25, r21
     30e:	50 f0       	brcs	.+20     	; 0x324 <malloc+0x148>
     310:	42 0f       	add	r20, r18
     312:	53 1f       	adc	r21, r19
     314:	50 93 3f 04 	sts	0x043F, r21
     318:	40 93 3e 04 	sts	0x043E, r20
     31c:	f9 01       	movw	r30, r18
     31e:	61 93       	st	Z+, r22
     320:	71 93       	st	Z+, r23
     322:	02 c0       	rjmp	.+4      	; 0x328 <malloc+0x14c>
     324:	e0 e0       	ldi	r30, 0x00	; 0
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	cf 01       	movw	r24, r30
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <free>:
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	09 f4       	brne	.+2      	; 0x33a <free+0xa>
     338:	50 c0       	rjmp	.+160    	; 0x3da <free+0xaa>
     33a:	ec 01       	movw	r28, r24
     33c:	22 97       	sbiw	r28, 0x02	; 2
     33e:	1b 82       	std	Y+3, r1	; 0x03
     340:	1a 82       	std	Y+2, r1	; 0x02
     342:	a0 91 40 04 	lds	r26, 0x0440
     346:	b0 91 41 04 	lds	r27, 0x0441
     34a:	10 97       	sbiw	r26, 0x00	; 0
     34c:	09 f1       	breq	.+66     	; 0x390 <free+0x60>
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	ac 17       	cp	r26, r28
     354:	bd 07       	cpc	r27, r29
     356:	08 f1       	brcs	.+66     	; 0x39a <free+0x6a>
     358:	bb 83       	std	Y+3, r27	; 0x03
     35a:	aa 83       	std	Y+2, r26	; 0x02
     35c:	fe 01       	movw	r30, r28
     35e:	21 91       	ld	r18, Z+
     360:	31 91       	ld	r19, Z+
     362:	e2 0f       	add	r30, r18
     364:	f3 1f       	adc	r31, r19
     366:	ae 17       	cp	r26, r30
     368:	bf 07       	cpc	r27, r31
     36a:	79 f4       	brne	.+30     	; 0x38a <free+0x5a>
     36c:	8d 91       	ld	r24, X+
     36e:	9c 91       	ld	r25, X
     370:	11 97       	sbiw	r26, 0x01	; 1
     372:	28 0f       	add	r18, r24
     374:	39 1f       	adc	r19, r25
     376:	2e 5f       	subi	r18, 0xFE	; 254
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	39 83       	std	Y+1, r19	; 0x01
     37c:	28 83       	st	Y, r18
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	8d 91       	ld	r24, X+
     382:	9c 91       	ld	r25, X
     384:	13 97       	sbiw	r26, 0x03	; 3
     386:	9b 83       	std	Y+3, r25	; 0x03
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	41 15       	cp	r20, r1
     38c:	51 05       	cpc	r21, r1
     38e:	71 f4       	brne	.+28     	; 0x3ac <free+0x7c>
     390:	d0 93 41 04 	sts	0x0441, r29
     394:	c0 93 40 04 	sts	0x0440, r28
     398:	20 c0       	rjmp	.+64     	; 0x3da <free+0xaa>
     39a:	12 96       	adiw	r26, 0x02	; 2
     39c:	8d 91       	ld	r24, X+
     39e:	9c 91       	ld	r25, X
     3a0:	13 97       	sbiw	r26, 0x03	; 3
     3a2:	ad 01       	movw	r20, r26
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	11 f0       	breq	.+4      	; 0x3ac <free+0x7c>
     3a8:	dc 01       	movw	r26, r24
     3aa:	d3 cf       	rjmp	.-90     	; 0x352 <free+0x22>
     3ac:	fa 01       	movw	r30, r20
     3ae:	d3 83       	std	Z+3, r29	; 0x03
     3b0:	c2 83       	std	Z+2, r28	; 0x02
     3b2:	21 91       	ld	r18, Z+
     3b4:	31 91       	ld	r19, Z+
     3b6:	e2 0f       	add	r30, r18
     3b8:	f3 1f       	adc	r31, r19
     3ba:	ce 17       	cp	r28, r30
     3bc:	df 07       	cpc	r29, r31
     3be:	69 f4       	brne	.+26     	; 0x3da <free+0xaa>
     3c0:	88 81       	ld	r24, Y
     3c2:	99 81       	ldd	r25, Y+1	; 0x01
     3c4:	28 0f       	add	r18, r24
     3c6:	39 1f       	adc	r19, r25
     3c8:	2e 5f       	subi	r18, 0xFE	; 254
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	fa 01       	movw	r30, r20
     3ce:	31 83       	std	Z+1, r19	; 0x01
     3d0:	20 83       	st	Z, r18
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	9b 81       	ldd	r25, Y+3	; 0x03
     3d6:	93 83       	std	Z+3, r25	; 0x03
     3d8:	82 83       	std	Z+2, r24	; 0x02
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <do_random>:
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e6 ef       	ldi	r30, 0xF6	; 246
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__+0x10>
     3ec:	ec 01       	movw	r28, r24
     3ee:	a8 80       	ld	r10, Y
     3f0:	b9 80       	ldd	r11, Y+1	; 0x01
     3f2:	ca 80       	ldd	r12, Y+2	; 0x02
     3f4:	db 80       	ldd	r13, Y+3	; 0x03
     3f6:	a1 14       	cp	r10, r1
     3f8:	b1 04       	cpc	r11, r1
     3fa:	c1 04       	cpc	r12, r1
     3fc:	d1 04       	cpc	r13, r1
     3fe:	41 f4       	brne	.+16     	; 0x410 <do_random+0x30>
     400:	84 e2       	ldi	r24, 0x24	; 36
     402:	a8 2e       	mov	r10, r24
     404:	89 ed       	ldi	r24, 0xD9	; 217
     406:	b8 2e       	mov	r11, r24
     408:	8b e5       	ldi	r24, 0x5B	; 91
     40a:	c8 2e       	mov	r12, r24
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	d8 2e       	mov	r13, r24
     410:	c6 01       	movw	r24, r12
     412:	b5 01       	movw	r22, r10
     414:	2d e1       	ldi	r18, 0x1D	; 29
     416:	33 ef       	ldi	r19, 0xF3	; 243
     418:	41 e0       	ldi	r20, 0x01	; 1
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__divmodsi4>
     420:	27 ea       	ldi	r18, 0xA7	; 167
     422:	31 e4       	ldi	r19, 0x41	; 65
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 a0 13 	call	0x2740	; 0x2740 <__mulsi3>
     42c:	7b 01       	movw	r14, r22
     42e:	8c 01       	movw	r16, r24
     430:	c6 01       	movw	r24, r12
     432:	b5 01       	movw	r22, r10
     434:	2d e1       	ldi	r18, 0x1D	; 29
     436:	33 ef       	ldi	r19, 0xF3	; 243
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__divmodsi4>
     440:	ca 01       	movw	r24, r20
     442:	b9 01       	movw	r22, r18
     444:	2c ee       	ldi	r18, 0xEC	; 236
     446:	34 ef       	ldi	r19, 0xF4	; 244
     448:	4f ef       	ldi	r20, 0xFF	; 255
     44a:	5f ef       	ldi	r21, 0xFF	; 255
     44c:	0e 94 a0 13 	call	0x2740	; 0x2740 <__mulsi3>
     450:	6e 0d       	add	r22, r14
     452:	7f 1d       	adc	r23, r15
     454:	80 1f       	adc	r24, r16
     456:	91 1f       	adc	r25, r17
     458:	97 ff       	sbrs	r25, 7
     45a:	04 c0       	rjmp	.+8      	; 0x464 <do_random+0x84>
     45c:	61 50       	subi	r22, 0x01	; 1
     45e:	70 40       	sbci	r23, 0x00	; 0
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 48       	sbci	r25, 0x80	; 128
     464:	68 83       	st	Y, r22
     466:	79 83       	std	Y+1, r23	; 0x01
     468:	8a 83       	std	Y+2, r24	; 0x02
     46a:	9b 83       	std	Y+3, r25	; 0x03
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	5f 77       	andi	r21, 0x7F	; 127
     472:	b9 01       	movw	r22, r18
     474:	ca 01       	movw	r24, r20
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	ea e0       	ldi	r30, 0x0A	; 10
     47c:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__+0x10>

00000480 <random_r>:
     480:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <do_random>
     484:	08 95       	ret

00000486 <random>:
     486:	8e e1       	ldi	r24, 0x1E	; 30
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <do_random>
     48e:	08 95       	ret

00000490 <srandom>:
     490:	60 93 1e 01 	sts	0x011E, r22
     494:	70 93 1f 01 	sts	0x011F, r23
     498:	80 93 20 01 	sts	0x0120, r24
     49c:	90 93 21 01 	sts	0x0121, r25
     4a0:	08 95       	ret

000004a2 <strcpy>:
     4a2:	fb 01       	movw	r30, r22
     4a4:	dc 01       	movw	r26, r24
     4a6:	01 90       	ld	r0, Z+
     4a8:	0d 92       	st	X+, r0
     4aa:	00 20       	and	r0, r0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <strcpy+0x4>
     4ae:	08 95       	ret

000004b0 <_ZN6EffectD1Ev>:

Effect::Effect() {
	this->_milli  = 100;
}

Effect::~Effect() {
     4b0:	fc 01       	movw	r30, r24
     4b2:	85 ee       	ldi	r24, 0xE5	; 229
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24

}
     4ba:	08 95       	ret

000004bc <_ZN6Effect6setmodEh>:

void Effect::setmod(byte mod)
     4bc:	fc 01       	movw	r30, r24
			break;
		case MOD_SLIDE:
			_framecount = 5;
			break;
		default:
			_framecount = 5;
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	86 83       	std	Z+6, r24	; 0x06
			break;
		}

	this->_mod = mod;
     4c2:	64 83       	std	Z+4, r22	; 0x04
}
     4c4:	08 95       	ret

000004c6 <_ZN6Effect8setspeedEj>:
	LedCube::setpixel(x,y,z);
}

void Effect::setspeed(unsigned int t)
{
	this->_milli  = t;
     4c6:	fc 01       	movw	r30, r24
     4c8:	73 83       	std	Z+3, r23	; 0x03
     4ca:	62 83       	std	Z+2, r22	; 0x02
}
     4cc:	08 95       	ret

000004ce <_GLOBAL__I_ascii_map>:
		{0,1,2,3,4}
};

Effect Effect1;

Effect::Effect() {
     4ce:	85 ee       	ldi	r24, 0xE5	; 229
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	90 93 fb 01 	sts	0x01FB, r25
     4d6:	80 93 fa 01 	sts	0x01FA, r24
	this->_milli  = 100;
     4da:	84 e6       	ldi	r24, 0x64	; 100
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 fd 01 	sts	0x01FD, r25
     4e2:	80 93 fc 01 	sts	0x01FC, r24
    for (int i=1; i< 64;i++){
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
	    _fft_last[i] = _fft_data[i];
    };

}
     4e6:	08 95       	ret

000004e8 <_GLOBAL__D_ascii_map>:

Effect::Effect() {
	this->_milli  = 100;
}

Effect::~Effect() {
     4e8:	85 ee       	ldi	r24, 0xE5	; 229
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 fb 01 	sts	0x01FB, r25
     4f0:	80 93 fa 01 	sts	0x01FA, r24
    for (int i=1; i< 64;i++){
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
	    _fft_last[i] = _fft_data[i];
    };

}
     4f4:	08 95       	ret

000004f6 <_ZN6Effect12fft_generateEv>:
		_fft_data[i] = val/4 -128;
		_fft_img[i] = 0;
	 };
}

void Effect::fft_generate()
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	8c 01       	movw	r16, r24
{
    fix_fft(_fft_data,_fft_img,7,0);
     500:	89 57       	subi	r24, 0x79	; 121
     502:	9f 4f       	sbci	r25, 0xFF	; 255
     504:	09 5f       	subi	r16, 0xF9	; 249
     506:	1f 4f       	sbci	r17, 0xFF	; 255
     508:	b8 01       	movw	r22, r16
     50a:	47 e0       	ldi	r20, 0x07	; 7
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	0e 94 bd 0b 	call	0x177a	; 0x177a <_Z7fix_fftPcS_ii>
     516:	e8 01       	movw	r28, r16
     518:	cf 57       	subi	r28, 0x7F	; 127
     51a:	df 4f       	sbci	r29, 0xFF	; 255
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	10 e0       	ldi	r17, 0x00	; 0

    for (int i=1; i< 64;i++){
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
     520:	28 81       	ld	r18, Y
     522:	33 27       	eor	r19, r19
     524:	27 fd       	sbrc	r18, 7
     526:	30 95       	com	r19
     528:	c0 58       	subi	r28, 0x80	; 128
     52a:	d0 40       	sbci	r29, 0x00	; 0
     52c:	88 81       	ld	r24, Y
     52e:	c0 58       	subi	r28, 0x80	; 128
     530:	df 4f       	sbci	r29, 0xFF	; 255
     532:	99 27       	eor	r25, r25
     534:	87 fd       	sbrc	r24, 7
     536:	90 95       	com	r25
     538:	88 9f       	mul	r24, r24
     53a:	b0 01       	movw	r22, r0
     53c:	89 9f       	mul	r24, r25
     53e:	70 0d       	add	r23, r0
     540:	98 9f       	mul	r25, r24
     542:	70 0d       	add	r23, r0
     544:	11 24       	eor	r1, r1
     546:	c9 01       	movw	r24, r18
     548:	88 9f       	mul	r24, r24
     54a:	90 01       	movw	r18, r0
     54c:	89 9f       	mul	r24, r25
     54e:	30 0d       	add	r19, r0
     550:	98 9f       	mul	r25, r24
     552:	30 0d       	add	r19, r0
     554:	11 24       	eor	r1, r1
     556:	62 0f       	add	r22, r18
     558:	73 1f       	adc	r23, r19
     55a:	88 27       	eor	r24, r24
     55c:	77 fd       	sbrc	r23, 7
     55e:	80 95       	com	r24
     560:	98 2f       	mov	r25, r24
     562:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__floatsisf>
     566:	0e 94 3f 13 	call	0x267e	; 0x267e <sqrt>
     56a:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fixsfsi>
     56e:	68 83       	st	Y, r22
	    _fft_last[i] = _fft_data[i];
     570:	c0 58       	subi	r28, 0x80	; 128
     572:	df 4f       	sbci	r29, 0xFF	; 255
     574:	68 83       	st	Y, r22

void Effect::fft_generate()
{
    fix_fft(_fft_data,_fft_img,7,0);

    for (int i=1; i< 64;i++){
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
     57a:	cf 57       	subi	r28, 0x7F	; 127
     57c:	d0 40       	sbci	r29, 0x00	; 0
     57e:	00 34       	cpi	r16, 0x40	; 64
     580:	11 05       	cpc	r17, r1
     582:	71 f6       	brne	.-100    	; 0x520 <_ZN6Effect12fft_generateEv+0x2a>
    	_fft_data[i] = sqrt(_fft_data[i] * _fft_data[i] + _fft_img[i] * _fft_img[i]);
	    _fft_last[i] = _fft_data[i];
    };

}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <_ZN6Effect6getmicEv>:
	delay(this->_milli);
}

////// AUDIO PROCESSING

void Effect::getmic()
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	ec 01       	movw	r28, r24
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
{
	int i=0,val;
	for(i=0; i < 128; i++){
		val = analogRead(0);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 b2 11 	call	0x2364	; 0x2364 <analogRead>
		_fft_data[i] = val/4 -128;
     5a2:	c9 57       	subi	r28, 0x79	; 121
     5a4:	df 4f       	sbci	r29, 0xFF	; 255
     5a6:	64 e0       	ldi	r22, 0x04	; 4
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
     5ae:	60 58       	subi	r22, 0x80	; 128
     5b0:	68 83       	st	Y, r22
     5b2:	c7 58       	subi	r28, 0x87	; 135
     5b4:	d0 40       	sbci	r29, 0x00	; 0
		_fft_img[i] = 0;
     5b6:	1f 82       	std	Y+7, r1	; 0x07
////// AUDIO PROCESSING

void Effect::getmic()
{
	int i=0,val;
	for(i=0; i < 128; i++){
     5b8:	0f 5f       	subi	r16, 0xFF	; 255
     5ba:	1f 4f       	sbci	r17, 0xFF	; 255
     5bc:	21 96       	adiw	r28, 0x01	; 1
     5be:	00 38       	cpi	r16, 0x80	; 128
     5c0:	11 05       	cpc	r17, r1
     5c2:	61 f7       	brne	.-40     	; 0x59c <_ZN6Effect6getmicEv+0xe>
		val = analogRead(0);
		_fft_data[i] = val/4 -128;
		_fft_img[i] = 0;
	 };
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <_ZN6Effect17renderfunc_rotateEm>:
			if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
				LedCube::setpixel(0,_frame,z);
		}
}

void Effect::renderfunc_rotate(uint32_t matrix)
     5ce:	8f 92       	push	r8
     5d0:	9f 92       	push	r9
     5d2:	af 92       	push	r10
     5d4:	bf 92       	push	r11
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	7a 01       	movw	r14, r20
     5e8:	8b 01       	movw	r16, r22
{
	byte i = 0,z=4;
	switch(_frame){
     5ea:	fc 01       	movw	r30, r24
     5ec:	85 81       	ldd	r24, Z+5	; 0x05
     5ee:	82 30       	cpi	r24, 0x02	; 2
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <_ZN6Effect17renderfunc_rotateEm+0x26>
     5f2:	73 c1       	rjmp	.+742    	; 0x8da <_ZN6Effect17renderfunc_rotateEm+0x30c>
     5f4:	83 30       	cpi	r24, 0x03	; 3
     5f6:	30 f4       	brcc	.+12     	; 0x604 <_ZN6Effect17renderfunc_rotateEm+0x36>
     5f8:	88 23       	and	r24, r24
     5fa:	59 f0       	breq	.+22     	; 0x612 <_ZN6Effect17renderfunc_rotateEm+0x44>
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	09 f0       	breq	.+2      	; 0x602 <_ZN6Effect17renderfunc_rotateEm+0x34>
     600:	81 c3       	rjmp	.+1794   	; 0xd04 <__stack+0x405>
     602:	b9 c0       	rjmp	.+370    	; 0x776 <_ZN6Effect17renderfunc_rotateEm+0x1a8>
     604:	83 30       	cpi	r24, 0x03	; 3
     606:	09 f4       	brne	.+2      	; 0x60a <_ZN6Effect17renderfunc_rotateEm+0x3c>
     608:	1a c2       	rjmp	.+1076   	; 0xa3e <__stack+0x13f>
     60a:	84 30       	cpi	r24, 0x04	; 4
     60c:	09 f0       	breq	.+2      	; 0x610 <_ZN6Effect17renderfunc_rotateEm+0x42>
     60e:	7a c3       	rjmp	.+1780   	; 0xd04 <__stack+0x405>
     610:	c8 c2       	rjmp	.+1424   	; 0xba2 <__stack+0x2a3>
     612:	f4 e0       	ldi	r31, 0x04	; 4
     614:	df 2e       	mov	r13, r31
     616:	c0 e0       	ldi	r28, 0x00	; 0
     618:	d0 e0       	ldi	r29, 0x00	; 0
	case 0:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     61a:	e1 e0       	ldi	r30, 0x01	; 1
     61c:	8e 2e       	mov	r8, r30
     61e:	91 2c       	mov	r9, r1
     620:	a1 2c       	mov	r10, r1
     622:	b1 2c       	mov	r11, r1
}

void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
     624:	cc 2e       	mov	r12, r28
     626:	9e 01       	movw	r18, r28
     628:	2c 5f       	subi	r18, 0xFC	; 252
     62a:	3f 4f       	sbci	r19, 0xFF	; 255
	case 0:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     62c:	d5 01       	movw	r26, r10
     62e:	c4 01       	movw	r24, r8
     630:	02 2e       	mov	r0, r18
     632:	04 c0       	rjmp	.+8      	; 0x63c <_ZN6Effect17renderfunc_rotateEm+0x6e>
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	aa 1f       	adc	r26, r26
     63a:	bb 1f       	adc	r27, r27
     63c:	0a 94       	dec	r0
     63e:	d2 f7       	brpl	.-12     	; 0x634 <_ZN6Effect17renderfunc_rotateEm+0x66>
     640:	8e 21       	and	r24, r14
     642:	9f 21       	and	r25, r15
     644:	a0 23       	and	r26, r16
     646:	b1 23       	and	r27, r17
     648:	04 c0       	rjmp	.+8      	; 0x652 <_ZN6Effect17renderfunc_rotateEm+0x84>
     64a:	b6 95       	lsr	r27
     64c:	a7 95       	ror	r26
     64e:	97 95       	ror	r25
     650:	87 95       	ror	r24
     652:	2a 95       	dec	r18
     654:	d2 f7       	brpl	.-12     	; 0x64a <_ZN6Effect17renderfunc_rotateEm+0x7c>
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	a1 05       	cpc	r26, r1
     65a:	b1 05       	cpc	r27, r1
     65c:	29 f4       	brne	.+10     	; 0x668 <_ZN6Effect17renderfunc_rotateEm+0x9a>
					LedCube::setpixel(4,2,z);
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	4d 2d       	mov	r20, r13
     664:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     668:	9e 01       	movw	r18, r28
     66a:	2d 5f       	subi	r18, 0xFD	; 253
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     66e:	d5 01       	movw	r26, r10
     670:	c4 01       	movw	r24, r8
     672:	02 2e       	mov	r0, r18
     674:	04 c0       	rjmp	.+8      	; 0x67e <_ZN6Effect17renderfunc_rotateEm+0xb0>
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	aa 1f       	adc	r26, r26
     67c:	bb 1f       	adc	r27, r27
     67e:	0a 94       	dec	r0
     680:	d2 f7       	brpl	.-12     	; 0x676 <_ZN6Effect17renderfunc_rotateEm+0xa8>
     682:	8e 21       	and	r24, r14
     684:	9f 21       	and	r25, r15
     686:	a0 23       	and	r26, r16
     688:	b1 23       	and	r27, r17
     68a:	04 c0       	rjmp	.+8      	; 0x694 <_ZN6Effect17renderfunc_rotateEm+0xc6>
     68c:	b6 95       	lsr	r27
     68e:	a7 95       	ror	r26
     690:	97 95       	ror	r25
     692:	87 95       	ror	r24
     694:	2a 95       	dec	r18
     696:	d2 f7       	brpl	.-12     	; 0x68c <_ZN6Effect17renderfunc_rotateEm+0xbe>
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	a1 05       	cpc	r26, r1
     69c:	b1 05       	cpc	r27, r1
     69e:	29 f4       	brne	.+10     	; 0x6aa <_ZN6Effect17renderfunc_rotateEm+0xdc>
					LedCube::setpixel(3,2,z);
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	62 e0       	ldi	r22, 0x02	; 2
     6a4:	4d 2d       	mov	r20, r13
     6a6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     6aa:	9e 01       	movw	r18, r28
     6ac:	2e 5f       	subi	r18, 0xFE	; 254
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     6b0:	d5 01       	movw	r26, r10
     6b2:	c4 01       	movw	r24, r8
     6b4:	02 2e       	mov	r0, r18
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <_ZN6Effect17renderfunc_rotateEm+0xf2>
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	aa 1f       	adc	r26, r26
     6be:	bb 1f       	adc	r27, r27
     6c0:	0a 94       	dec	r0
     6c2:	d2 f7       	brpl	.-12     	; 0x6b8 <_ZN6Effect17renderfunc_rotateEm+0xea>
     6c4:	8e 21       	and	r24, r14
     6c6:	9f 21       	and	r25, r15
     6c8:	a0 23       	and	r26, r16
     6ca:	b1 23       	and	r27, r17
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <_ZN6Effect17renderfunc_rotateEm+0x108>
     6ce:	b6 95       	lsr	r27
     6d0:	a7 95       	ror	r26
     6d2:	97 95       	ror	r25
     6d4:	87 95       	ror	r24
     6d6:	2a 95       	dec	r18
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <_ZN6Effect17renderfunc_rotateEm+0x100>
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	a1 05       	cpc	r26, r1
     6de:	b1 05       	cpc	r27, r1
     6e0:	29 f4       	brne	.+10     	; 0x6ec <_ZN6Effect17renderfunc_rotateEm+0x11e>
					LedCube::setpixel(2,2,z);
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	4d 2d       	mov	r20, r13
     6e8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     6ec:	9e 01       	movw	r18, r28
     6ee:	2f 5f       	subi	r18, 0xFF	; 255
     6f0:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     6f2:	d5 01       	movw	r26, r10
     6f4:	c4 01       	movw	r24, r8
     6f6:	02 2e       	mov	r0, r18
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <_ZN6Effect17renderfunc_rotateEm+0x134>
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	aa 1f       	adc	r26, r26
     700:	bb 1f       	adc	r27, r27
     702:	0a 94       	dec	r0
     704:	d2 f7       	brpl	.-12     	; 0x6fa <_ZN6Effect17renderfunc_rotateEm+0x12c>
     706:	8e 21       	and	r24, r14
     708:	9f 21       	and	r25, r15
     70a:	a0 23       	and	r26, r16
     70c:	b1 23       	and	r27, r17
     70e:	04 c0       	rjmp	.+8      	; 0x718 <_ZN6Effect17renderfunc_rotateEm+0x14a>
     710:	b6 95       	lsr	r27
     712:	a7 95       	ror	r26
     714:	97 95       	ror	r25
     716:	87 95       	ror	r24
     718:	2a 95       	dec	r18
     71a:	d2 f7       	brpl	.-12     	; 0x710 <_ZN6Effect17renderfunc_rotateEm+0x142>
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	a1 05       	cpc	r26, r1
     720:	b1 05       	cpc	r27, r1
     722:	29 f4       	brne	.+10     	; 0x72e <_ZN6Effect17renderfunc_rotateEm+0x160>
					LedCube::setpixel(1,2,z);
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	62 e0       	ldi	r22, 0x02	; 2
     728:	4d 2d       	mov	r20, r13
     72a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     72e:	d5 01       	movw	r26, r10
     730:	c4 01       	movw	r24, r8
     732:	0c 2c       	mov	r0, r12
     734:	04 c0       	rjmp	.+8      	; 0x73e <_ZN6Effect17renderfunc_rotateEm+0x170>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	aa 1f       	adc	r26, r26
     73c:	bb 1f       	adc	r27, r27
     73e:	0a 94       	dec	r0
     740:	d2 f7       	brpl	.-12     	; 0x736 <_ZN6Effect17renderfunc_rotateEm+0x168>
     742:	8e 21       	and	r24, r14
     744:	9f 21       	and	r25, r15
     746:	a0 23       	and	r26, r16
     748:	b1 23       	and	r27, r17
     74a:	04 c0       	rjmp	.+8      	; 0x754 <_ZN6Effect17renderfunc_rotateEm+0x186>
     74c:	b6 95       	lsr	r27
     74e:	a7 95       	ror	r26
     750:	97 95       	ror	r25
     752:	87 95       	ror	r24
     754:	ca 94       	dec	r12
     756:	d2 f7       	brpl	.-12     	; 0x74c <_ZN6Effect17renderfunc_rotateEm+0x17e>
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	a1 05       	cpc	r26, r1
     75c:	b1 05       	cpc	r27, r1
     75e:	29 f4       	brne	.+10     	; 0x76a <_ZN6Effect17renderfunc_rotateEm+0x19c>
					LedCube::setpixel(0,2,z);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	4d 2d       	mov	r20, r13
     766:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     76a:	25 96       	adiw	r28, 0x05	; 5
void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
	case 0:
		for(;i<CUBESIZE;i++,z--){
     76c:	dd 20       	and	r13, r13
     76e:	09 f4       	brne	.+2      	; 0x772 <_ZN6Effect17renderfunc_rotateEm+0x1a4>
     770:	c9 c2       	rjmp	.+1426   	; 0xd04 <__stack+0x405>
     772:	da 94       	dec	r13
     774:	57 cf       	rjmp	.-338    	; 0x624 <_ZN6Effect17renderfunc_rotateEm+0x56>
     776:	74 e0       	ldi	r23, 0x04	; 4
     778:	d7 2e       	mov	r13, r23
     77a:	c0 e0       	ldi	r28, 0x00	; 0
     77c:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	86 2e       	mov	r8, r22
     782:	91 2c       	mov	r9, r1
     784:	a1 2c       	mov	r10, r1
     786:	b1 2c       	mov	r11, r1
void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
	case 0:
		for(;i<CUBESIZE;i++,z--){
     788:	cc 2e       	mov	r12, r28
     78a:	9e 01       	movw	r18, r28
     78c:	2c 5f       	subi	r18, 0xFC	; 252
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     790:	d5 01       	movw	r26, r10
     792:	c4 01       	movw	r24, r8
     794:	02 2e       	mov	r0, r18
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <_ZN6Effect17renderfunc_rotateEm+0x1d2>
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	aa 1f       	adc	r26, r26
     79e:	bb 1f       	adc	r27, r27
     7a0:	0a 94       	dec	r0
     7a2:	d2 f7       	brpl	.-12     	; 0x798 <_ZN6Effect17renderfunc_rotateEm+0x1ca>
     7a4:	8e 21       	and	r24, r14
     7a6:	9f 21       	and	r25, r15
     7a8:	a0 23       	and	r26, r16
     7aa:	b1 23       	and	r27, r17
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <_ZN6Effect17renderfunc_rotateEm+0x1e8>
     7ae:	b6 95       	lsr	r27
     7b0:	a7 95       	ror	r26
     7b2:	97 95       	ror	r25
     7b4:	87 95       	ror	r24
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <_ZN6Effect17renderfunc_rotateEm+0x1e0>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 05       	cpc	r26, r1
     7be:	b1 05       	cpc	r27, r1
     7c0:	29 f4       	brne	.+10     	; 0x7cc <_ZN6Effect17renderfunc_rotateEm+0x1fe>
					LedCube::setpixel(4,4,z);
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	4d 2d       	mov	r20, r13
     7c8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     7cc:	9e 01       	movw	r18, r28
     7ce:	2d 5f       	subi	r18, 0xFD	; 253
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     7d2:	d5 01       	movw	r26, r10
     7d4:	c4 01       	movw	r24, r8
     7d6:	02 2e       	mov	r0, r18
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <_ZN6Effect17renderfunc_rotateEm+0x214>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	aa 1f       	adc	r26, r26
     7e0:	bb 1f       	adc	r27, r27
     7e2:	0a 94       	dec	r0
     7e4:	d2 f7       	brpl	.-12     	; 0x7da <_ZN6Effect17renderfunc_rotateEm+0x20c>
     7e6:	8e 21       	and	r24, r14
     7e8:	9f 21       	and	r25, r15
     7ea:	a0 23       	and	r26, r16
     7ec:	b1 23       	and	r27, r17
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <_ZN6Effect17renderfunc_rotateEm+0x22a>
     7f0:	b6 95       	lsr	r27
     7f2:	a7 95       	ror	r26
     7f4:	97 95       	ror	r25
     7f6:	87 95       	ror	r24
     7f8:	2a 95       	dec	r18
     7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <_ZN6Effect17renderfunc_rotateEm+0x222>
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	a1 05       	cpc	r26, r1
     800:	b1 05       	cpc	r27, r1
     802:	29 f4       	brne	.+10     	; 0x80e <_ZN6Effect17renderfunc_rotateEm+0x240>
					LedCube::setpixel(3,3,z);
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	4d 2d       	mov	r20, r13
     80a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     80e:	9e 01       	movw	r18, r28
     810:	2e 5f       	subi	r18, 0xFE	; 254
     812:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     814:	d5 01       	movw	r26, r10
     816:	c4 01       	movw	r24, r8
     818:	02 2e       	mov	r0, r18
     81a:	04 c0       	rjmp	.+8      	; 0x824 <_ZN6Effect17renderfunc_rotateEm+0x256>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	aa 1f       	adc	r26, r26
     822:	bb 1f       	adc	r27, r27
     824:	0a 94       	dec	r0
     826:	d2 f7       	brpl	.-12     	; 0x81c <_ZN6Effect17renderfunc_rotateEm+0x24e>
     828:	8e 21       	and	r24, r14
     82a:	9f 21       	and	r25, r15
     82c:	a0 23       	and	r26, r16
     82e:	b1 23       	and	r27, r17
     830:	04 c0       	rjmp	.+8      	; 0x83a <_ZN6Effect17renderfunc_rotateEm+0x26c>
     832:	b6 95       	lsr	r27
     834:	a7 95       	ror	r26
     836:	97 95       	ror	r25
     838:	87 95       	ror	r24
     83a:	2a 95       	dec	r18
     83c:	d2 f7       	brpl	.-12     	; 0x832 <_ZN6Effect17renderfunc_rotateEm+0x264>
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	a1 05       	cpc	r26, r1
     842:	b1 05       	cpc	r27, r1
     844:	29 f4       	brne	.+10     	; 0x850 <_ZN6Effect17renderfunc_rotateEm+0x282>
					LedCube::setpixel(2,2,z);
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	62 e0       	ldi	r22, 0x02	; 2
     84a:	4d 2d       	mov	r20, r13
     84c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     850:	9e 01       	movw	r18, r28
     852:	2f 5f       	subi	r18, 0xFF	; 255
     854:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     856:	d5 01       	movw	r26, r10
     858:	c4 01       	movw	r24, r8
     85a:	02 2e       	mov	r0, r18
     85c:	04 c0       	rjmp	.+8      	; 0x866 <_ZN6Effect17renderfunc_rotateEm+0x298>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	0a 94       	dec	r0
     868:	d2 f7       	brpl	.-12     	; 0x85e <_ZN6Effect17renderfunc_rotateEm+0x290>
     86a:	8e 21       	and	r24, r14
     86c:	9f 21       	and	r25, r15
     86e:	a0 23       	and	r26, r16
     870:	b1 23       	and	r27, r17
     872:	04 c0       	rjmp	.+8      	; 0x87c <_ZN6Effect17renderfunc_rotateEm+0x2ae>
     874:	b6 95       	lsr	r27
     876:	a7 95       	ror	r26
     878:	97 95       	ror	r25
     87a:	87 95       	ror	r24
     87c:	2a 95       	dec	r18
     87e:	d2 f7       	brpl	.-12     	; 0x874 <_ZN6Effect17renderfunc_rotateEm+0x2a6>
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	a1 05       	cpc	r26, r1
     884:	b1 05       	cpc	r27, r1
     886:	29 f4       	brne	.+10     	; 0x892 <_ZN6Effect17renderfunc_rotateEm+0x2c4>
					LedCube::setpixel(1,1,z);
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	4d 2d       	mov	r20, r13
     88e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     892:	d5 01       	movw	r26, r10
     894:	c4 01       	movw	r24, r8
     896:	0c 2c       	mov	r0, r12
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <_ZN6Effect17renderfunc_rotateEm+0x2d4>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	aa 1f       	adc	r26, r26
     8a0:	bb 1f       	adc	r27, r27
     8a2:	0a 94       	dec	r0
     8a4:	d2 f7       	brpl	.-12     	; 0x89a <_ZN6Effect17renderfunc_rotateEm+0x2cc>
     8a6:	8e 21       	and	r24, r14
     8a8:	9f 21       	and	r25, r15
     8aa:	a0 23       	and	r26, r16
     8ac:	b1 23       	and	r27, r17
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <_ZN6Effect17renderfunc_rotateEm+0x2ea>
     8b0:	b6 95       	lsr	r27
     8b2:	a7 95       	ror	r26
     8b4:	97 95       	ror	r25
     8b6:	87 95       	ror	r24
     8b8:	ca 94       	dec	r12
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <_ZN6Effect17renderfunc_rotateEm+0x2e2>
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	a1 05       	cpc	r26, r1
     8c0:	b1 05       	cpc	r27, r1
     8c2:	29 f4       	brne	.+10     	; 0x8ce <_ZN6Effect17renderfunc_rotateEm+0x300>
					LedCube::setpixel(0,0,z);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	4d 2d       	mov	r20, r13
     8ca:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     8ce:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
     8d0:	dd 20       	and	r13, r13
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <_ZN6Effect17renderfunc_rotateEm+0x308>
     8d4:	17 c2       	rjmp	.+1070   	; 0xd04 <__stack+0x405>
     8d6:	da 94       	dec	r13
     8d8:	57 cf       	rjmp	.-338    	; 0x788 <_ZN6Effect17renderfunc_rotateEm+0x1ba>
     8da:	54 e0       	ldi	r21, 0x04	; 4
     8dc:	d5 2e       	mov	r13, r21
     8de:	c0 e0       	ldi	r28, 0x00	; 0
     8e0:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	84 2e       	mov	r8, r20
     8e6:	91 2c       	mov	r9, r1
     8e8:	a1 2c       	mov	r10, r1
     8ea:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
     8ec:	cc 2e       	mov	r12, r28
     8ee:	9e 01       	movw	r18, r28
     8f0:	2c 5f       	subi	r18, 0xFC	; 252
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     8f4:	d5 01       	movw	r26, r10
     8f6:	c4 01       	movw	r24, r8
     8f8:	02 2e       	mov	r0, r18
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0x5>
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	0a 94       	dec	r0
     906:	d2 f7       	brpl	.-12     	; 0x8fc <_ZN6Effect17renderfunc_rotateEm+0x32e>
     908:	8e 21       	and	r24, r14
     90a:	9f 21       	and	r25, r15
     90c:	a0 23       	and	r26, r16
     90e:	b1 23       	and	r27, r17
     910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0x1b>
     912:	b6 95       	lsr	r27
     914:	a7 95       	ror	r26
     916:	97 95       	ror	r25
     918:	87 95       	ror	r24
     91a:	2a 95       	dec	r18
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__stack+0x13>
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	a1 05       	cpc	r26, r1
     922:	b1 05       	cpc	r27, r1
     924:	29 f4       	brne	.+10     	; 0x930 <__stack+0x31>
					LedCube::setpixel(2,4,z);
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	4d 2d       	mov	r20, r13
     92c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     930:	9e 01       	movw	r18, r28
     932:	2d 5f       	subi	r18, 0xFD	; 253
     934:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     936:	d5 01       	movw	r26, r10
     938:	c4 01       	movw	r24, r8
     93a:	02 2e       	mov	r0, r18
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0x47>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	aa 1f       	adc	r26, r26
     944:	bb 1f       	adc	r27, r27
     946:	0a 94       	dec	r0
     948:	d2 f7       	brpl	.-12     	; 0x93e <__stack+0x3f>
     94a:	8e 21       	and	r24, r14
     94c:	9f 21       	and	r25, r15
     94e:	a0 23       	and	r26, r16
     950:	b1 23       	and	r27, r17
     952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
     954:	b6 95       	lsr	r27
     956:	a7 95       	ror	r26
     958:	97 95       	ror	r25
     95a:	87 95       	ror	r24
     95c:	2a 95       	dec	r18
     95e:	d2 f7       	brpl	.-12     	; 0x954 <__stack+0x55>
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	a1 05       	cpc	r26, r1
     964:	b1 05       	cpc	r27, r1
     966:	29 f4       	brne	.+10     	; 0x972 <__stack+0x73>
					LedCube::setpixel(2,3,z);
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	4d 2d       	mov	r20, r13
     96e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     972:	9e 01       	movw	r18, r28
     974:	2e 5f       	subi	r18, 0xFE	; 254
     976:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     978:	d5 01       	movw	r26, r10
     97a:	c4 01       	movw	r24, r8
     97c:	02 2e       	mov	r0, r18
     97e:	04 c0       	rjmp	.+8      	; 0x988 <__stack+0x89>
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	aa 1f       	adc	r26, r26
     986:	bb 1f       	adc	r27, r27
     988:	0a 94       	dec	r0
     98a:	d2 f7       	brpl	.-12     	; 0x980 <__stack+0x81>
     98c:	8e 21       	and	r24, r14
     98e:	9f 21       	and	r25, r15
     990:	a0 23       	and	r26, r16
     992:	b1 23       	and	r27, r17
     994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x9f>
     996:	b6 95       	lsr	r27
     998:	a7 95       	ror	r26
     99a:	97 95       	ror	r25
     99c:	87 95       	ror	r24
     99e:	2a 95       	dec	r18
     9a0:	d2 f7       	brpl	.-12     	; 0x996 <__stack+0x97>
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	29 f4       	brne	.+10     	; 0x9b4 <__stack+0xb5>
					LedCube::setpixel(2,2,z);
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	62 e0       	ldi	r22, 0x02	; 2
     9ae:	4d 2d       	mov	r20, r13
     9b0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     9b4:	9e 01       	movw	r18, r28
     9b6:	2f 5f       	subi	r18, 0xFF	; 255
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     9ba:	d5 01       	movw	r26, r10
     9bc:	c4 01       	movw	r24, r8
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__stack+0xcb>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__stack+0xc3>
     9ce:	8e 21       	and	r24, r14
     9d0:	9f 21       	and	r25, r15
     9d2:	a0 23       	and	r26, r16
     9d4:	b1 23       	and	r27, r17
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__stack+0xe1>
     9d8:	b6 95       	lsr	r27
     9da:	a7 95       	ror	r26
     9dc:	97 95       	ror	r25
     9de:	87 95       	ror	r24
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__stack+0xd9>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 05       	cpc	r26, r1
     9e8:	b1 05       	cpc	r27, r1
     9ea:	29 f4       	brne	.+10     	; 0x9f6 <__stack+0xf7>
					LedCube::setpixel(2,1,z);
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	4d 2d       	mov	r20, r13
     9f2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     9f6:	d5 01       	movw	r26, r10
     9f8:	c4 01       	movw	r24, r8
     9fa:	0c 2c       	mov	r0, r12
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__stack+0x107>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	aa 1f       	adc	r26, r26
     a04:	bb 1f       	adc	r27, r27
     a06:	0a 94       	dec	r0
     a08:	d2 f7       	brpl	.-12     	; 0x9fe <__stack+0xff>
     a0a:	8e 21       	and	r24, r14
     a0c:	9f 21       	and	r25, r15
     a0e:	a0 23       	and	r26, r16
     a10:	b1 23       	and	r27, r17
     a12:	04 c0       	rjmp	.+8      	; 0xa1c <__stack+0x11d>
     a14:	b6 95       	lsr	r27
     a16:	a7 95       	ror	r26
     a18:	97 95       	ror	r25
     a1a:	87 95       	ror	r24
     a1c:	ca 94       	dec	r12
     a1e:	d2 f7       	brpl	.-12     	; 0xa14 <__stack+0x115>
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	a1 05       	cpc	r26, r1
     a24:	b1 05       	cpc	r27, r1
     a26:	29 f4       	brne	.+10     	; 0xa32 <__stack+0x133>
					LedCube::setpixel(2,0,z);
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	4d 2d       	mov	r20, r13
     a2e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     a32:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
     a34:	dd 20       	and	r13, r13
     a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x13b>
     a38:	65 c1       	rjmp	.+714    	; 0xd04 <__stack+0x405>
     a3a:	da 94       	dec	r13
     a3c:	57 cf       	rjmp	.-338    	; 0x8ec <_ZN6Effect17renderfunc_rotateEm+0x31e>
     a3e:	34 e0       	ldi	r19, 0x04	; 4
     a40:	d3 2e       	mov	r13, r19
     a42:	c0 e0       	ldi	r28, 0x00	; 0
     a44:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	82 2e       	mov	r8, r18
     a4a:	91 2c       	mov	r9, r1
     a4c:	a1 2c       	mov	r10, r1
     a4e:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
     a50:	cc 2e       	mov	r12, r28
     a52:	9e 01       	movw	r18, r28
     a54:	2c 5f       	subi	r18, 0xFC	; 252
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     a58:	d5 01       	movw	r26, r10
     a5a:	c4 01       	movw	r24, r8
     a5c:	02 2e       	mov	r0, r18
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x169>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	aa 1f       	adc	r26, r26
     a66:	bb 1f       	adc	r27, r27
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__stack+0x161>
     a6c:	8e 21       	and	r24, r14
     a6e:	9f 21       	and	r25, r15
     a70:	a0 23       	and	r26, r16
     a72:	b1 23       	and	r27, r17
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__stack+0x17f>
     a76:	b6 95       	lsr	r27
     a78:	a7 95       	ror	r26
     a7a:	97 95       	ror	r25
     a7c:	87 95       	ror	r24
     a7e:	2a 95       	dec	r18
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__stack+0x177>
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	29 f4       	brne	.+10     	; 0xa94 <__stack+0x195>
					LedCube::setpixel(4,0,z);
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	4d 2d       	mov	r20, r13
     a90:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     a94:	9e 01       	movw	r18, r28
     a96:	2d 5f       	subi	r18, 0xFD	; 253
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     a9a:	d5 01       	movw	r26, r10
     a9c:	c4 01       	movw	r24, r8
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__stack+0x1ab>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	aa 1f       	adc	r26, r26
     aa8:	bb 1f       	adc	r27, r27
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__stack+0x1a3>
     aae:	8e 21       	and	r24, r14
     ab0:	9f 21       	and	r25, r15
     ab2:	a0 23       	and	r26, r16
     ab4:	b1 23       	and	r27, r17
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x1c1>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	2a 95       	dec	r18
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x1b9>
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	a1 05       	cpc	r26, r1
     ac8:	b1 05       	cpc	r27, r1
     aca:	29 f4       	brne	.+10     	; 0xad6 <__stack+0x1d7>
					LedCube::setpixel(3,1,z);
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	4d 2d       	mov	r20, r13
     ad2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     ad6:	9e 01       	movw	r18, r28
     ad8:	2e 5f       	subi	r18, 0xFE	; 254
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     adc:	d5 01       	movw	r26, r10
     ade:	c4 01       	movw	r24, r8
     ae0:	02 2e       	mov	r0, r18
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x1ed>
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	aa 1f       	adc	r26, r26
     aea:	bb 1f       	adc	r27, r27
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x1e5>
     af0:	8e 21       	and	r24, r14
     af2:	9f 21       	and	r25, r15
     af4:	a0 23       	and	r26, r16
     af6:	b1 23       	and	r27, r17
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <__stack+0x203>
     afa:	b6 95       	lsr	r27
     afc:	a7 95       	ror	r26
     afe:	97 95       	ror	r25
     b00:	87 95       	ror	r24
     b02:	2a 95       	dec	r18
     b04:	d2 f7       	brpl	.-12     	; 0xafa <__stack+0x1fb>
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	a1 05       	cpc	r26, r1
     b0a:	b1 05       	cpc	r27, r1
     b0c:	29 f4       	brne	.+10     	; 0xb18 <__stack+0x219>
					LedCube::setpixel(2,2,z);
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	62 e0       	ldi	r22, 0x02	; 2
     b12:	4d 2d       	mov	r20, r13
     b14:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     b18:	9e 01       	movw	r18, r28
     b1a:	2f 5f       	subi	r18, 0xFF	; 255
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     b1e:	d5 01       	movw	r26, r10
     b20:	c4 01       	movw	r24, r8
     b22:	02 2e       	mov	r0, r18
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <__stack+0x22f>
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	aa 1f       	adc	r26, r26
     b2c:	bb 1f       	adc	r27, r27
     b2e:	0a 94       	dec	r0
     b30:	d2 f7       	brpl	.-12     	; 0xb26 <__stack+0x227>
     b32:	8e 21       	and	r24, r14
     b34:	9f 21       	and	r25, r15
     b36:	a0 23       	and	r26, r16
     b38:	b1 23       	and	r27, r17
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__stack+0x245>
     b3c:	b6 95       	lsr	r27
     b3e:	a7 95       	ror	r26
     b40:	97 95       	ror	r25
     b42:	87 95       	ror	r24
     b44:	2a 95       	dec	r18
     b46:	d2 f7       	brpl	.-12     	; 0xb3c <__stack+0x23d>
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	a1 05       	cpc	r26, r1
     b4c:	b1 05       	cpc	r27, r1
     b4e:	29 f4       	brne	.+10     	; 0xb5a <__stack+0x25b>
					LedCube::setpixel(1,3,z);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	63 e0       	ldi	r22, 0x03	; 3
     b54:	4d 2d       	mov	r20, r13
     b56:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     b5a:	d5 01       	movw	r26, r10
     b5c:	c4 01       	movw	r24, r8
     b5e:	0c 2c       	mov	r0, r12
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__stack+0x26b>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	aa 1f       	adc	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	0a 94       	dec	r0
     b6c:	d2 f7       	brpl	.-12     	; 0xb62 <__stack+0x263>
     b6e:	8e 21       	and	r24, r14
     b70:	9f 21       	and	r25, r15
     b72:	a0 23       	and	r26, r16
     b74:	b1 23       	and	r27, r17
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <__stack+0x281>
     b78:	b6 95       	lsr	r27
     b7a:	a7 95       	ror	r26
     b7c:	97 95       	ror	r25
     b7e:	87 95       	ror	r24
     b80:	ca 94       	dec	r12
     b82:	d2 f7       	brpl	.-12     	; 0xb78 <__stack+0x279>
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	29 f4       	brne	.+10     	; 0xb96 <__stack+0x297>
					LedCube::setpixel(0,4,z);
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	4d 2d       	mov	r20, r13
     b92:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     b96:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
     b98:	dd 20       	and	r13, r13
     b9a:	09 f4       	brne	.+2      	; 0xb9e <__stack+0x29f>
     b9c:	b3 c0       	rjmp	.+358    	; 0xd04 <__stack+0x405>
     b9e:	da 94       	dec	r13
     ba0:	57 cf       	rjmp	.-338    	; 0xa50 <__stack+0x151>
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	d9 2e       	mov	r13, r25
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	88 2e       	mov	r8, r24
     bae:	91 2c       	mov	r9, r1
     bb0:	a1 2c       	mov	r10, r1
     bb2:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
     bb4:	cc 2e       	mov	r12, r28
     bb6:	9e 01       	movw	r18, r28
     bb8:	2c 5f       	subi	r18, 0xFC	; 252
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     bbc:	d5 01       	movw	r26, r10
     bbe:	c4 01       	movw	r24, r8
     bc0:	02 2e       	mov	r0, r18
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__stack+0x2cd>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	aa 1f       	adc	r26, r26
     bca:	bb 1f       	adc	r27, r27
     bcc:	0a 94       	dec	r0
     bce:	d2 f7       	brpl	.-12     	; 0xbc4 <__stack+0x2c5>
     bd0:	8e 21       	and	r24, r14
     bd2:	9f 21       	and	r25, r15
     bd4:	a0 23       	and	r26, r16
     bd6:	b1 23       	and	r27, r17
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__stack+0x2e3>
     bda:	b6 95       	lsr	r27
     bdc:	a7 95       	ror	r26
     bde:	97 95       	ror	r25
     be0:	87 95       	ror	r24
     be2:	2a 95       	dec	r18
     be4:	d2 f7       	brpl	.-12     	; 0xbda <__stack+0x2db>
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	29 f4       	brne	.+10     	; 0xbf8 <__stack+0x2f9>
					LedCube::setpixel(0,2,z);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	62 e0       	ldi	r22, 0x02	; 2
     bf2:	4d 2d       	mov	r20, r13
     bf4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     bf8:	9e 01       	movw	r18, r28
     bfa:	2d 5f       	subi	r18, 0xFD	; 253
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     bfe:	d5 01       	movw	r26, r10
     c00:	c4 01       	movw	r24, r8
     c02:	02 2e       	mov	r0, r18
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <__stack+0x30f>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	aa 1f       	adc	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	0a 94       	dec	r0
     c10:	d2 f7       	brpl	.-12     	; 0xc06 <__stack+0x307>
     c12:	8e 21       	and	r24, r14
     c14:	9f 21       	and	r25, r15
     c16:	a0 23       	and	r26, r16
     c18:	b1 23       	and	r27, r17
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__stack+0x325>
     c1c:	b6 95       	lsr	r27
     c1e:	a7 95       	ror	r26
     c20:	97 95       	ror	r25
     c22:	87 95       	ror	r24
     c24:	2a 95       	dec	r18
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__stack+0x31d>
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	a1 05       	cpc	r26, r1
     c2c:	b1 05       	cpc	r27, r1
     c2e:	29 f4       	brne	.+10     	; 0xc3a <__stack+0x33b>
					LedCube::setpixel(1,2,z);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	4d 2d       	mov	r20, r13
     c36:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     c3a:	9e 01       	movw	r18, r28
     c3c:	2e 5f       	subi	r18, 0xFE	; 254
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     c40:	d5 01       	movw	r26, r10
     c42:	c4 01       	movw	r24, r8
     c44:	02 2e       	mov	r0, r18
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <__stack+0x351>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	aa 1f       	adc	r26, r26
     c4e:	bb 1f       	adc	r27, r27
     c50:	0a 94       	dec	r0
     c52:	d2 f7       	brpl	.-12     	; 0xc48 <__stack+0x349>
     c54:	8e 21       	and	r24, r14
     c56:	9f 21       	and	r25, r15
     c58:	a0 23       	and	r26, r16
     c5a:	b1 23       	and	r27, r17
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <__stack+0x367>
     c5e:	b6 95       	lsr	r27
     c60:	a7 95       	ror	r26
     c62:	97 95       	ror	r25
     c64:	87 95       	ror	r24
     c66:	2a 95       	dec	r18
     c68:	d2 f7       	brpl	.-12     	; 0xc5e <__stack+0x35f>
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	a1 05       	cpc	r26, r1
     c6e:	b1 05       	cpc	r27, r1
     c70:	29 f4       	brne	.+10     	; 0xc7c <__stack+0x37d>
					LedCube::setpixel(2,2,z);
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	62 e0       	ldi	r22, 0x02	; 2
     c76:	4d 2d       	mov	r20, r13
     c78:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     c7c:	9e 01       	movw	r18, r28
     c7e:	2f 5f       	subi	r18, 0xFF	; 255
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     c82:	d5 01       	movw	r26, r10
     c84:	c4 01       	movw	r24, r8
     c86:	02 2e       	mov	r0, r18
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__stack+0x393>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	0a 94       	dec	r0
     c94:	d2 f7       	brpl	.-12     	; 0xc8a <__stack+0x38b>
     c96:	8e 21       	and	r24, r14
     c98:	9f 21       	and	r25, r15
     c9a:	a0 23       	and	r26, r16
     c9c:	b1 23       	and	r27, r17
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <__stack+0x3a9>
     ca0:	b6 95       	lsr	r27
     ca2:	a7 95       	ror	r26
     ca4:	97 95       	ror	r25
     ca6:	87 95       	ror	r24
     ca8:	2a 95       	dec	r18
     caa:	d2 f7       	brpl	.-12     	; 0xca0 <__stack+0x3a1>
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	29 f4       	brne	.+10     	; 0xcbe <__stack+0x3bf>
					LedCube::setpixel(3,2,z);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	4d 2d       	mov	r20, r13
     cba:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     cbe:	d5 01       	movw	r26, r10
     cc0:	c4 01       	movw	r24, r8
     cc2:	0c 2c       	mov	r0, r12
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <__stack+0x3cf>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	aa 1f       	adc	r26, r26
     ccc:	bb 1f       	adc	r27, r27
     cce:	0a 94       	dec	r0
     cd0:	d2 f7       	brpl	.-12     	; 0xcc6 <__stack+0x3c7>
     cd2:	8e 21       	and	r24, r14
     cd4:	9f 21       	and	r25, r15
     cd6:	a0 23       	and	r26, r16
     cd8:	b1 23       	and	r27, r17
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__stack+0x3e5>
     cdc:	b6 95       	lsr	r27
     cde:	a7 95       	ror	r26
     ce0:	97 95       	ror	r25
     ce2:	87 95       	ror	r24
     ce4:	ca 94       	dec	r12
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__stack+0x3dd>
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	a1 05       	cpc	r26, r1
     cec:	b1 05       	cpc	r27, r1
     cee:	29 f4       	brne	.+10     	; 0xcfa <__stack+0x3fb>
					LedCube::setpixel(4,2,z);
     cf0:	84 e0       	ldi	r24, 0x04	; 4
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	4d 2d       	mov	r20, r13
     cf6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     cfa:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
     cfc:	dd 20       	and	r13, r13
     cfe:	11 f0       	breq	.+4      	; 0xd04 <__stack+0x405>
     d00:	da 94       	dec	r13
     d02:	58 cf       	rjmp	.-336    	; 0xbb4 <__stack+0x2b5>
					LedCube::setpixel(4,2,z);
			}
		break;
	}

}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	bf 90       	pop	r11
     d16:	af 90       	pop	r10
     d18:	9f 90       	pop	r9
     d1a:	8f 90       	pop	r8
     d1c:	08 95       	ret

00000d1e <_ZN6Effect16renderfunc_slideEm>:
	default:
		break;
	}
}

void Effect::renderfunc_slide(uint32_t matrix)
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	3c 01       	movw	r6, r24
     d3a:	7a 01       	movw	r14, r20
     d3c:	8b 01       	movw	r16, r22
     d3e:	b4 e0       	ldi	r27, 0x04	; 4
     d40:	db 2e       	mov	r13, r27
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
			if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     d46:	a1 e0       	ldi	r26, 0x01	; 1
     d48:	8a 2e       	mov	r8, r26
     d4a:	91 2c       	mov	r9, r1
     d4c:	a1 2c       	mov	r10, r1
     d4e:	b1 2c       	mov	r11, r1
     d50:	d5 01       	movw	r26, r10
     d52:	c4 01       	movw	r24, r8
     d54:	0c 2e       	mov	r0, r28
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <_ZN6Effect16renderfunc_slideEm+0x42>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	aa 1f       	adc	r26, r26
     d5e:	bb 1f       	adc	r27, r27
     d60:	0a 94       	dec	r0
     d62:	d2 f7       	brpl	.-12     	; 0xd58 <_ZN6Effect16renderfunc_slideEm+0x3a>
     d64:	8e 21       	and	r24, r14
     d66:	9f 21       	and	r25, r15
     d68:	a0 23       	and	r26, r16
     d6a:	b1 23       	and	r27, r17
     d6c:	0c 2e       	mov	r0, r28
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <_ZN6Effect16renderfunc_slideEm+0x5a>
     d70:	b6 95       	lsr	r27
     d72:	a7 95       	ror	r26
     d74:	97 95       	ror	r25
     d76:	87 95       	ror	r24
     d78:	0a 94       	dec	r0
     d7a:	d2 f7       	brpl	.-12     	; 0xd70 <_ZN6Effect16renderfunc_slideEm+0x52>
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	31 f4       	brne	.+12     	; 0xd90 <_ZN6Effect16renderfunc_slideEm+0x72>
				LedCube::setpixel(4,_frame,z);
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	f3 01       	movw	r30, r6
     d88:	65 81       	ldd	r22, Z+5	; 0x05
     d8a:	4d 2d       	mov	r20, r13
     d8c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     d90:	9e 01       	movw	r18, r28
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     d96:	d5 01       	movw	r26, r10
     d98:	c4 01       	movw	r24, r8
     d9a:	02 2e       	mov	r0, r18
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <_ZN6Effect16renderfunc_slideEm+0x88>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	aa 1f       	adc	r26, r26
     da4:	bb 1f       	adc	r27, r27
     da6:	0a 94       	dec	r0
     da8:	d2 f7       	brpl	.-12     	; 0xd9e <_ZN6Effect16renderfunc_slideEm+0x80>
     daa:	8e 21       	and	r24, r14
     dac:	9f 21       	and	r25, r15
     dae:	a0 23       	and	r26, r16
     db0:	b1 23       	and	r27, r17
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <_ZN6Effect16renderfunc_slideEm+0x9e>
     db4:	b6 95       	lsr	r27
     db6:	a7 95       	ror	r26
     db8:	97 95       	ror	r25
     dba:	87 95       	ror	r24
     dbc:	2a 95       	dec	r18
     dbe:	d2 f7       	brpl	.-12     	; 0xdb4 <_ZN6Effect16renderfunc_slideEm+0x96>
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	a1 05       	cpc	r26, r1
     dc4:	b1 05       	cpc	r27, r1
     dc6:	31 f4       	brne	.+12     	; 0xdd4 <_ZN6Effect16renderfunc_slideEm+0xb6>
				LedCube::setpixel(3,_frame,z);
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	f3 01       	movw	r30, r6
     dcc:	65 81       	ldd	r22, Z+5	; 0x05
     dce:	4d 2d       	mov	r20, r13
     dd0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     dd4:	9e 01       	movw	r18, r28
     dd6:	2e 5f       	subi	r18, 0xFE	; 254
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     dda:	d5 01       	movw	r26, r10
     ddc:	c4 01       	movw	r24, r8
     dde:	02 2e       	mov	r0, r18
     de0:	04 c0       	rjmp	.+8      	; 0xdea <_ZN6Effect16renderfunc_slideEm+0xcc>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	aa 1f       	adc	r26, r26
     de8:	bb 1f       	adc	r27, r27
     dea:	0a 94       	dec	r0
     dec:	d2 f7       	brpl	.-12     	; 0xde2 <_ZN6Effect16renderfunc_slideEm+0xc4>
     dee:	8e 21       	and	r24, r14
     df0:	9f 21       	and	r25, r15
     df2:	a0 23       	and	r26, r16
     df4:	b1 23       	and	r27, r17
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <_ZN6Effect16renderfunc_slideEm+0xe2>
     df8:	b6 95       	lsr	r27
     dfa:	a7 95       	ror	r26
     dfc:	97 95       	ror	r25
     dfe:	87 95       	ror	r24
     e00:	2a 95       	dec	r18
     e02:	d2 f7       	brpl	.-12     	; 0xdf8 <_ZN6Effect16renderfunc_slideEm+0xda>
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	a1 05       	cpc	r26, r1
     e08:	b1 05       	cpc	r27, r1
     e0a:	31 f4       	brne	.+12     	; 0xe18 <_ZN6Effect16renderfunc_slideEm+0xfa>
				LedCube::setpixel(2,_frame,z);
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	f3 01       	movw	r30, r6
     e10:	65 81       	ldd	r22, Z+5	; 0x05
     e12:	4d 2d       	mov	r20, r13
     e14:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     e18:	9e 01       	movw	r18, r28
     e1a:	2d 5f       	subi	r18, 0xFD	; 253
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     e1e:	d5 01       	movw	r26, r10
     e20:	c4 01       	movw	r24, r8
     e22:	02 2e       	mov	r0, r18
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <_ZN6Effect16renderfunc_slideEm+0x110>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	aa 1f       	adc	r26, r26
     e2c:	bb 1f       	adc	r27, r27
     e2e:	0a 94       	dec	r0
     e30:	d2 f7       	brpl	.-12     	; 0xe26 <_ZN6Effect16renderfunc_slideEm+0x108>
     e32:	8e 21       	and	r24, r14
     e34:	9f 21       	and	r25, r15
     e36:	a0 23       	and	r26, r16
     e38:	b1 23       	and	r27, r17
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <_ZN6Effect16renderfunc_slideEm+0x126>
     e3c:	b6 95       	lsr	r27
     e3e:	a7 95       	ror	r26
     e40:	97 95       	ror	r25
     e42:	87 95       	ror	r24
     e44:	2a 95       	dec	r18
     e46:	d2 f7       	brpl	.-12     	; 0xe3c <_ZN6Effect16renderfunc_slideEm+0x11e>
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	a1 05       	cpc	r26, r1
     e4c:	b1 05       	cpc	r27, r1
     e4e:	31 f4       	brne	.+12     	; 0xe5c <_ZN6Effect16renderfunc_slideEm+0x13e>
				LedCube::setpixel(1,_frame,z);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	f3 01       	movw	r30, r6
     e54:	65 81       	ldd	r22, Z+5	; 0x05
     e56:	4d 2d       	mov	r20, r13
     e58:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     e5c:	9e 01       	movw	r18, r28
     e5e:	2c 5f       	subi	r18, 0xFC	; 252
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
			if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     e62:	d5 01       	movw	r26, r10
     e64:	c4 01       	movw	r24, r8
     e66:	02 2e       	mov	r0, r18
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <_ZN6Effect16renderfunc_slideEm+0x154>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	0a 94       	dec	r0
     e74:	d2 f7       	brpl	.-12     	; 0xe6a <_ZN6Effect16renderfunc_slideEm+0x14c>
     e76:	8e 21       	and	r24, r14
     e78:	9f 21       	and	r25, r15
     e7a:	a0 23       	and	r26, r16
     e7c:	b1 23       	and	r27, r17
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <_ZN6Effect16renderfunc_slideEm+0x16a>
     e80:	b6 95       	lsr	r27
     e82:	a7 95       	ror	r26
     e84:	97 95       	ror	r25
     e86:	87 95       	ror	r24
     e88:	2a 95       	dec	r18
     e8a:	d2 f7       	brpl	.-12     	; 0xe80 <_ZN6Effect16renderfunc_slideEm+0x162>
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	a1 05       	cpc	r26, r1
     e90:	b1 05       	cpc	r27, r1
     e92:	31 f4       	brne	.+12     	; 0xea0 <_ZN6Effect16renderfunc_slideEm+0x182>
				LedCube::setpixel(0,_frame,z);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	f3 01       	movw	r30, r6
     e98:	65 81       	ldd	r22, Z+5	; 0x05
     e9a:	4d 2d       	mov	r20, r13
     e9c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
     ea0:	25 96       	adiw	r28, 0x05	; 5
}

void Effect::renderfunc_slide(uint32_t matrix)
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
     ea2:	dd 20       	and	r13, r13
     ea4:	11 f0       	breq	.+4      	; 0xeaa <_ZN6Effect16renderfunc_slideEm+0x18c>
     ea6:	da 94       	dec	r13
     ea8:	53 cf       	rjmp	.-346    	; 0xd50 <_ZN6Effect16renderfunc_slideEm+0x32>
			if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
				LedCube::setpixel(1,_frame,z);
			if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
				LedCube::setpixel(0,_frame,z);
		}
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	7f 90       	pop	r7
     ec2:	6f 90       	pop	r6
     ec4:	08 95       	ret

00000ec6 <_ZN6Effect13render_matrixEm>:
			}
		}
	}
}

void Effect::render_matrix(uint32_t matrix)
     ec6:	fc 01       	movw	r30, r24
{
	switch(this->_mod){
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	81 32       	cpi	r24, 0x21	; 33
     ecc:	31 f0       	breq	.+12     	; 0xeda <_ZN6Effect13render_matrixEm+0x14>
     ece:	82 32       	cpi	r24, 0x22	; 34
     ed0:	39 f4       	brne	.+14     	; 0xee0 <_ZN6Effect13render_matrixEm+0x1a>
	case MOD_ROTATE:
		this->renderfunc_rotate(matrix);
     ed2:	cf 01       	movw	r24, r30
     ed4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN6Effect17renderfunc_rotateEm>
     ed8:	08 95       	ret
		break;
	case MOD_SLIDE:
		this->renderfunc_slide(matrix);
     eda:	cf 01       	movw	r24, r30
     edc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6Effect16renderfunc_slideEm>
     ee0:	08 95       	ret

00000ee2 <_ZN6Effect5debugEhhh>:
{
	LedCube::plane(z);
	LedCube::transfer(number);
}

void Effect::debug(byte x, byte y, byte z)
     ee2:	86 2f       	mov	r24, r22
{
	LedCube::setpixel(x,y,z);
     ee4:	64 2f       	mov	r22, r20
     ee6:	42 2f       	mov	r20, r18
     ee8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
}
     eec:	08 95       	ret

00000eee <_ZN6Effect7bubblesEv>:
	LedCube::plane(random(5));
	LedCube::transfer(random(25));
	delay(this->_milli);
}

void Effect::bubbles()
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
{
	byte x = random(5),y=random(5);
     efa:	65 e0       	ldi	r22, 0x05	; 5
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 87 10 	call	0x210e	; 0x210e <_Z6randoml>
     f06:	f6 2e       	mov	r15, r22
     f08:	65 e0       	ldi	r22, 0x05	; 5
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 87 10 	call	0x210e	; 0x210e <_Z6randoml>
     f14:	06 2f       	mov	r16, r22
     f16:	10 e0       	ldi	r17, 0x00	; 0
	for(byte z=0;z<5;z++){
			LedCube::setpixel(x,y,z);
     f18:	8f 2d       	mov	r24, r15
     f1a:	60 2f       	mov	r22, r16
     f1c:	41 2f       	mov	r20, r17
     f1e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
			if(this->_milli > 1)
     f22:	6a 81       	ldd	r22, Y+2	; 0x02
     f24:	7b 81       	ldd	r23, Y+3	; 0x03
     f26:	62 30       	cpi	r22, 0x02	; 2
     f28:	71 05       	cpc	r23, r1
     f2a:	30 f0       	brcs	.+12     	; 0xf38 <_ZN6Effect7bubblesEv+0x4a>
				delay(this->_milli/2);
     f2c:	76 95       	lsr	r23
     f2e:	67 95       	ror	r22
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 11 11 	call	0x2222	; 0x2222 <delay>
}

void Effect::bubbles()
{
	byte x = random(5),y=random(5);
	for(byte z=0;z<5;z++){
     f38:	1f 5f       	subi	r17, 0xFF	; 255
     f3a:	15 30       	cpi	r17, 0x05	; 5
     f3c:	69 f7       	brne	.-38     	; 0xf18 <_ZN6Effect7bubblesEv+0x2a>
			LedCube::setpixel(x,y,z);
			if(this->_milli > 1)
				delay(this->_milli/2);
	}
	delay(this->_milli);
     f3e:	6a 81       	ldd	r22, Y+2	; 0x02
     f40:	7b 81       	ldd	r23, Y+3	; 0x03
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 11 11 	call	0x2222	; 0x2222 <delay>
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	08 95       	ret

00000f56 <_ZN6Effect5debugEhh>:
		}

	this->_mod = mod;
}

void Effect::debug(byte number, byte z)
     f56:	1f 93       	push	r17
     f58:	16 2f       	mov	r17, r22
     f5a:	84 2f       	mov	r24, r20
{
	LedCube::plane(z);
     f5c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7LedCube5planeEh>
	LedCube::transfer(number);
     f60:	81 2f       	mov	r24, r17
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
}
     f68:	1f 91       	pop	r17
     f6a:	08 95       	ret

00000f6c <_ZN6Effect5musicEv>:
	    	LedSquare::displaybig(((i  )%LEDS_PER_ROW));
	    }
	}
}

void Effect::music()
     f6c:	4f 92       	push	r4
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	e3 97       	sbiw	r28, 0x33	; 51
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8c 01       	movw	r16, r24
{
	int i = 1,y=0,z=0,bar[25],avg;

	unsigned int milli = 10 + 1;
	unsigned long t = millis();
     f9c:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>

	getmic();
     fa0:	c8 01       	movw	r24, r16
     fa2:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN6Effect6getmicEv>
	fft_generate();
     fa6:	c8 01       	movw	r24, r16
     fa8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN6Effect12fft_generateEv>
     fac:	2e 01       	movw	r4, r28
     fae:	08 94       	sec
     fb0:	41 1c       	adc	r4, r1
     fb2:	51 1c       	adc	r5, r1
     fb4:	58 e0       	ldi	r21, 0x08	; 8
     fb6:	e5 2e       	mov	r14, r21
     fb8:	51 e0       	ldi	r21, 0x01	; 1
     fba:	f5 2e       	mov	r15, r21
     fbc:	e0 0e       	add	r14, r16
     fbe:	f1 1e       	adc	r15, r17
     fc0:	82 01       	movw	r16, r4
	for(int i = 1; i < 64 ;t = millis(), i++,z++){
		for(avg = 0;avg<2;avg++){
			bar[z] += _fft_last[i++];
		}

		if((bar[z] /= 2) > 4) bar[z] = 4;
     fc2:	44 e0       	ldi	r20, 0x04	; 4
     fc4:	84 2e       	mov	r8, r20
     fc6:	91 2c       	mov	r9, r1
	unsigned long t = millis();

	getmic();
	fft_generate();

	for(int i = 1; i < 64 ;t = millis(), i++,z++){
     fc8:	3b e2       	ldi	r19, 0x2B	; 43
     fca:	a3 2e       	mov	r10, r19
     fcc:	b1 2c       	mov	r11, r1
     fce:	ac 0e       	add	r10, r28
     fd0:	bd 1e       	adc	r11, r29
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <_ZN6Effect5musicEv+0x84>
		for(avg = 0;avg<2;avg++){
			bar[z] += _fft_last[i++];
		}

		if((bar[z] /= 2) > 4) bar[z] = 4;
     fd4:	f8 01       	movw	r30, r16
     fd6:	91 82       	std	Z+1, r9	; 0x01
     fd8:	80 82       	st	Z, r8
	unsigned long t = millis();

	getmic();
	fft_generate();

	for(int i = 1; i < 64 ;t = millis(), i++,z++){
     fda:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
     fde:	0e 5f       	subi	r16, 0xFE	; 254
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	23 e0       	ldi	r18, 0x03	; 3
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	e2 0e       	add	r14, r18
     fe8:	f3 1e       	adc	r15, r19
     fea:	0a 15       	cp	r16, r10
     fec:	1b 05       	cpc	r17, r11
     fee:	e1 f1       	breq	.+120    	; 0x1068 <_ZN6Effect5musicEv+0xfc>
		for(avg = 0;avg<2;avg++){
			bar[z] += _fft_last[i++];
     ff0:	f7 01       	movw	r30, r14
     ff2:	80 81       	ld	r24, Z
     ff4:	99 27       	eor	r25, r25
     ff6:	87 fd       	sbrc	r24, 7
     ff8:	90 95       	com	r25
     ffa:	f8 01       	movw	r30, r16
     ffc:	20 81       	ld	r18, Z
     ffe:	31 81       	ldd	r19, Z+1	; 0x01
    1000:	82 0f       	add	r24, r18
    1002:	93 1f       	adc	r25, r19
    1004:	f7 01       	movw	r30, r14
    1006:	21 81       	ldd	r18, Z+1	; 0x01
    1008:	33 27       	eor	r19, r19
    100a:	27 fd       	sbrc	r18, 7
    100c:	30 95       	com	r19
		}

		if((bar[z] /= 2) > 4) bar[z] = 4;
    100e:	82 0f       	add	r24, r18
    1010:	93 1f       	adc	r25, r19
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
    101a:	f8 01       	movw	r30, r16
    101c:	71 83       	std	Z+1, r23	; 0x01
    101e:	60 83       	st	Z, r22
    1020:	65 30       	cpi	r22, 0x05	; 5
    1022:	71 05       	cpc	r23, r1
    1024:	bc f6       	brge	.-82     	; 0xfd4 <_ZN6Effect5musicEv+0x68>
    1026:	d9 cf       	rjmp	.-78     	; 0xfda <_ZN6Effect5musicEv+0x6e>

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
			for(i = 0;i<LEDS_PER_ROW;i++){
				for(z = 0;z<bar[i];z++){
					LedCube::setpixel(i,y,z);
    1028:	89 2f       	mov	r24, r25
    102a:	6d 2d       	mov	r22, r13
    102c:	40 2f       	mov	r20, r16
    102e:	9b ab       	std	Y+51, r25	; 0x33
    1030:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
	}

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
			for(i = 0;i<LEDS_PER_ROW;i++){
				for(z = 0;z<bar[i];z++){
    1034:	0f 5f       	subi	r16, 0xFF	; 255
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	9b a9       	ldd	r25, Y+51	; 0x33
    103a:	0a 15       	cp	r16, r10
    103c:	1b 05       	cpc	r17, r11
    103e:	a4 f3       	brlt	.-24     	; 0x1028 <_ZN6Effect5musicEv+0xbc>
    1040:	22 e0       	ldi	r18, 0x02	; 2
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	e2 0e       	add	r14, r18
    1046:	f3 1e       	adc	r15, r19
    1048:	9f 5f       	subi	r25, 0xFF	; 255
		if((bar[z] /= 2) > 4) bar[z] = 4;
	}

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
			for(i = 0;i<LEDS_PER_ROW;i++){
    104a:	95 30       	cpi	r25, 0x05	; 5
    104c:	31 f0       	breq	.+12     	; 0x105a <_ZN6Effect5musicEv+0xee>
				for(z = 0;z<bar[i];z++){
    104e:	f7 01       	movw	r30, r14
    1050:	a0 80       	ld	r10, Z
    1052:	b1 80       	ldd	r11, Z+1	; 0x01
    1054:	00 e0       	ldi	r16, 0x00	; 0
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	f0 cf       	rjmp	.-32     	; 0x103a <_ZN6Effect5musicEv+0xce>
    105a:	d3 94       	inc	r13

		if((bar[z] /= 2) > 4) bar[z] = 4;
	}

	while(millis() < t + milli){
		for(y = 0;y<LEDS_PER_ROW;y++){
    105c:	f5 e0       	ldi	r31, 0x05	; 5
    105e:	df 16       	cp	r13, r31
    1060:	61 f0       	breq	.+24     	; 0x107a <_ZN6Effect5musicEv+0x10e>
    1062:	72 01       	movw	r14, r4
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	f3 cf       	rjmp	.-26     	; 0x104e <_ZN6Effect5musicEv+0xe2>
		}

		if((bar[z] /= 2) > 4) bar[z] = 4;
	}

	while(millis() < t + milli){
    1068:	2b e0       	ldi	r18, 0x0B	; 11
    106a:	62 2e       	mov	r6, r18
    106c:	71 2c       	mov	r7, r1
    106e:	81 2c       	mov	r8, r1
    1070:	91 2c       	mov	r9, r1
    1072:	66 0e       	add	r6, r22
    1074:	77 1e       	adc	r7, r23
    1076:	88 1e       	adc	r8, r24
    1078:	99 1e       	adc	r9, r25
    107a:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    107e:	66 15       	cp	r22, r6
    1080:	77 05       	cpc	r23, r7
    1082:	88 05       	cpc	r24, r8
    1084:	99 05       	cpc	r25, r9
    1086:	10 f4       	brcc	.+4      	; 0x108c <_ZN6Effect5musicEv+0x120>
    1088:	dd 24       	eor	r13, r13
    108a:	eb cf       	rjmp	.-42     	; 0x1062 <_ZN6Effect5musicEv+0xf6>
					LedCube::setpixel(i,y,z);
				}
			}
		}
	}
}
    108c:	e3 96       	adiw	r28, 0x33	; 51
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	bf 90       	pop	r11
    10a8:	af 90       	pop	r10
    10aa:	9f 90       	pop	r9
    10ac:	8f 90       	pop	r8
    10ae:	7f 90       	pop	r7
    10b0:	6f 90       	pop	r6
    10b2:	5f 90       	pop	r5
    10b4:	4f 90       	pop	r4
    10b6:	08 95       	ret

000010b8 <_ZN6Effect6bounceEv>:

void Effect::bounce()
    10b8:	8f 92       	push	r8
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
{
	  unsigned int milli = this->_milli + 1;
    10d0:	fc 01       	movw	r30, r24
    10d2:	02 81       	ldd	r16, Z+2	; 0x02
    10d4:	13 81       	ldd	r17, Z+3	; 0x03
    10d6:	0f 5f       	subi	r16, 0xFF	; 255
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255

	   unsigned long t = millis();
    10da:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    10de:	6b 01       	movw	r12, r22
    10e0:	7c 01       	movw	r14, r24
    10e2:	ce ef       	ldi	r28, 0xFE	; 254
    10e4:	df ef       	ldi	r29, 0xFF	; 255

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
	     while(millis() < t + milli){
    10e6:	48 01       	movw	r8, r16
    10e8:	aa 24       	eor	r10, r10
    10ea:	bb 24       	eor	r11, r11
    10ec:	27 c0       	rjmp	.+78     	; 0x113c <_ZN6Effect6bounceEv+0x84>
	       LedSquare::displaycenter(constrain(z+2, 0, 4));
    10ee:	c3 30       	cpi	r28, 0x03	; 3
    10f0:	d1 05       	cpc	r29, r1
    10f2:	1c f0       	brlt	.+6      	; 0x10fa <_ZN6Effect6bounceEv+0x42>
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <_ZN6Effect6bounceEv+0x46>
    10fa:	ce 01       	movw	r24, r28
    10fc:	02 96       	adiw	r24, 0x02	; 2
    10fe:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN9LedSquare13displaycenterEi>
	       LedSquare::displaysmall(constrain(z+1, 0, 4));
    1102:	ff ef       	ldi	r31, 0xFF	; 255
    1104:	ce 3f       	cpi	r28, 0xFE	; 254
    1106:	df 07       	cpc	r29, r31
    1108:	19 f4       	brne	.+6      	; 0x1110 <_ZN6Effect6bounceEv+0x58>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	08 c0       	rjmp	.+16     	; 0x1120 <_ZN6Effect6bounceEv+0x68>
    1110:	c4 30       	cpi	r28, 0x04	; 4
    1112:	d1 05       	cpc	r29, r1
    1114:	19 f4       	brne	.+6      	; 0x111c <_ZN6Effect6bounceEv+0x64>
    1116:	84 e0       	ldi	r24, 0x04	; 4
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <_ZN6Effect6bounceEv+0x68>
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN9LedSquare12displaysmallEi>
	       LedSquare::displaybig(constrain(z  , 0, 4));
    1124:	ce 01       	movw	r24, r28
    1126:	c5 30       	cpi	r28, 0x05	; 5
    1128:	d1 05       	cpc	r29, r1
    112a:	14 f0       	brlt	.+4      	; 0x1130 <_ZN6Effect6bounceEv+0x78>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	97 ff       	sbrs	r25, 7
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <_ZN6Effect6bounceEv+0x80>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN9LedSquare10displaybigEi>
	  unsigned int milli = this->_milli + 1;

	   unsigned long t = millis();

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
	     while(millis() < t + milli){
    113c:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    1140:	a7 01       	movw	r20, r14
    1142:	96 01       	movw	r18, r12
    1144:	28 0d       	add	r18, r8
    1146:	39 1d       	adc	r19, r9
    1148:	4a 1d       	adc	r20, r10
    114a:	5b 1d       	adc	r21, r11
    114c:	62 17       	cp	r22, r18
    114e:	73 07       	cpc	r23, r19
    1150:	84 07       	cpc	r24, r20
    1152:	95 07       	cpc	r25, r21
    1154:	60 f2       	brcs	.-104    	; 0x10ee <_ZN6Effect6bounceEv+0x36>
{
	  unsigned int milli = this->_milli + 1;

	   unsigned long t = millis();

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
    1156:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    115a:	6b 01       	movw	r12, r22
    115c:	7c 01       	movw	r14, r24
    115e:	21 96       	adiw	r28, 0x01	; 1
    1160:	c5 30       	cpi	r28, 0x05	; 5
    1162:	d1 05       	cpc	r29, r1
    1164:	59 f7       	brne	.-42     	; 0x113c <_ZN6Effect6bounceEv+0x84>
	       LedSquare::displaysmall(constrain(z+1, 0, 4));
	       LedSquare::displaybig(constrain(z  , 0, 4));
	     }
	  }

	  t = millis();
    1166:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    116a:	7b 01       	movw	r14, r22
    116c:	8c 01       	movw	r16, r24
    116e:	c4 e0       	ldi	r28, 0x04	; 4
    1170:	d0 e0       	ldi	r29, 0x00	; 0
    1172:	27 c0       	rjmp	.+78     	; 0x11c2 <_ZN6Effect6bounceEv+0x10a>
	  for(int z = 4; z > -3; t = millis(), z--){
	     while(millis() < t + milli){
	    	 LedSquare::displaybig(constrain(z+2, 0, 4));
    1174:	c3 30       	cpi	r28, 0x03	; 3
    1176:	d1 05       	cpc	r29, r1
    1178:	1c f0       	brlt	.+6      	; 0x1180 <_ZN6Effect6bounceEv+0xc8>
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <_ZN6Effect6bounceEv+0xcc>
    1180:	ce 01       	movw	r24, r28
    1182:	02 96       	adiw	r24, 0x02	; 2
    1184:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN9LedSquare10displaybigEi>
	    	 LedSquare::displaysmall(constrain(z+1, 0, 4));
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	ce 3f       	cpi	r28, 0xFE	; 254
    118c:	d8 07       	cpc	r29, r24
    118e:	19 f4       	brne	.+6      	; 0x1196 <_ZN6Effect6bounceEv+0xde>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	08 c0       	rjmp	.+16     	; 0x11a6 <_ZN6Effect6bounceEv+0xee>
    1196:	c4 30       	cpi	r28, 0x04	; 4
    1198:	d1 05       	cpc	r29, r1
    119a:	19 f4       	brne	.+6      	; 0x11a2 <_ZN6Effect6bounceEv+0xea>
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <_ZN6Effect6bounceEv+0xee>
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN9LedSquare12displaysmallEi>
	    	 LedSquare::displaycenter(constrain(z  , 0, 4));
    11aa:	ce 01       	movw	r24, r28
    11ac:	c5 30       	cpi	r28, 0x05	; 5
    11ae:	d1 05       	cpc	r29, r1
    11b0:	14 f0       	brlt	.+4      	; 0x11b6 <_ZN6Effect6bounceEv+0xfe>
    11b2:	84 e0       	ldi	r24, 0x04	; 4
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	97 ff       	sbrs	r25, 7
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <_ZN6Effect6bounceEv+0x106>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN9LedSquare13displaycenterEi>
	     }
	  }

	  t = millis();
	  for(int z = 4; z > -3; t = millis(), z--){
	     while(millis() < t + milli){
    11c2:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    11c6:	a8 01       	movw	r20, r16
    11c8:	97 01       	movw	r18, r14
    11ca:	28 0d       	add	r18, r8
    11cc:	39 1d       	adc	r19, r9
    11ce:	4a 1d       	adc	r20, r10
    11d0:	5b 1d       	adc	r21, r11
    11d2:	62 17       	cp	r22, r18
    11d4:	73 07       	cpc	r23, r19
    11d6:	84 07       	cpc	r24, r20
    11d8:	95 07       	cpc	r25, r21
    11da:	60 f2       	brcs	.-104    	; 0x1174 <_ZN6Effect6bounceEv+0xbc>
	       LedSquare::displaybig(constrain(z  , 0, 4));
	     }
	  }

	  t = millis();
	  for(int z = 4; z > -3; t = millis(), z--){
    11dc:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    11e0:	7b 01       	movw	r14, r22
    11e2:	8c 01       	movw	r16, r24
    11e4:	21 97       	sbiw	r28, 0x01	; 1
    11e6:	ef ef       	ldi	r30, 0xFF	; 255
    11e8:	cd 3f       	cpi	r28, 0xFD	; 253
    11ea:	de 07       	cpc	r29, r30
    11ec:	51 f7       	brne	.-44     	; 0x11c2 <_ZN6Effect6bounceEv+0x10a>
	    	 LedSquare::displaybig(constrain(z+2, 0, 4));
	    	 LedSquare::displaysmall(constrain(z+1, 0, 4));
	    	 LedSquare::displaycenter(constrain(z  , 0, 4));
	     }
	  }
}
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	bf 90       	pop	r11
    1200:	af 90       	pop	r10
    1202:	9f 90       	pop	r9
    1204:	8f 90       	pop	r8
    1206:	08 95       	ret

00001208 <_ZN6Effect14infinitesquareEv>:
	 		LedCube::draw(data,y,0);
		}
	}
}

void Effect::infinitesquare()
    1208:	2f 92       	push	r2
    120a:	3f 92       	push	r3
    120c:	4f 92       	push	r4
    120e:	5f 92       	push	r5
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
{
	unsigned int milli = this->_milli + 1;
    122c:	fc 01       	movw	r30, r24
    122e:	02 81       	ldd	r16, Z+2	; 0x02
    1230:	13 81       	ldd	r17, Z+3	; 0x03
    1232:	0f 5f       	subi	r16, 0xFF	; 255
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    1236:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    123a:	6b 01       	movw	r12, r22
    123c:	7c 01       	movw	r14, r24
    123e:	c0 e0       	ldi	r28, 0x00	; 0
    1240:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i = 0; i < LEDS_PER_ROW+2 ;t = millis(), i++){
	    while(millis() < t + milli){
    1242:	48 01       	movw	r8, r16
    1244:	aa 24       	eor	r10, r10
    1246:	bb 24       	eor	r11, r11
    1248:	18 c0       	rjmp	.+48     	; 0x127a <_ZN6Effect14infinitesquareEv+0x72>
	    	LedSquare::displaycenter(((i+2)%LEDS_PER_ROW));
    124a:	c1 01       	movw	r24, r2
    124c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN9LedSquare13displaycenterEi>
	    	LedSquare::displaysmall(((i+1)%LEDS_PER_ROW));
    1250:	c2 01       	movw	r24, r4
    1252:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN9LedSquare12displaysmallEi>
	    	LedSquare::displaybig(((i  )%LEDS_PER_ROW));
    1256:	c3 01       	movw	r24, r6
    1258:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN9LedSquare10displaybigEi>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();
	int i;
	for(i = 0; i < LEDS_PER_ROW+2 ;t = millis(), i++){
	    while(millis() < t + milli){
    125c:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    1260:	6e 15       	cp	r22, r14
    1262:	7f 05       	cpc	r23, r15
    1264:	80 07       	cpc	r24, r16
    1266:	91 07       	cpc	r25, r17
    1268:	80 f3       	brcs	.-32     	; 0x124a <_ZN6Effect14infinitesquareEv+0x42>
void Effect::infinitesquare()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();
	int i;
	for(i = 0; i < LEDS_PER_ROW+2 ;t = millis(), i++){
    126a:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    126e:	6b 01       	movw	r12, r22
    1270:	7c 01       	movw	r14, r24
    1272:	21 96       	adiw	r28, 0x01	; 1
    1274:	c7 30       	cpi	r28, 0x07	; 7
    1276:	d1 05       	cpc	r29, r1
    1278:	d9 f0       	breq	.+54     	; 0x12b0 <_ZN6Effect14infinitesquareEv+0xa8>
	    while(millis() < t + milli){
	    	LedSquare::displaycenter(((i+2)%LEDS_PER_ROW));
    127a:	ce 01       	movw	r24, r28
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	65 e0       	ldi	r22, 0x05	; 5
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
    1286:	1c 01       	movw	r2, r24
	    	LedSquare::displaysmall(((i+1)%LEDS_PER_ROW));
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	65 e0       	ldi	r22, 0x05	; 5
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
    1294:	2c 01       	movw	r4, r24
	    	LedSquare::displaybig(((i  )%LEDS_PER_ROW));
    1296:	ce 01       	movw	r24, r28
    1298:	65 e0       	ldi	r22, 0x05	; 5
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
    12a0:	3c 01       	movw	r6, r24
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();
	int i;
	for(i = 0; i < LEDS_PER_ROW+2 ;t = millis(), i++){
	    while(millis() < t + milli){
    12a2:	87 01       	movw	r16, r14
    12a4:	76 01       	movw	r14, r12
    12a6:	e8 0c       	add	r14, r8
    12a8:	f9 1c       	adc	r15, r9
    12aa:	0a 1d       	adc	r16, r10
    12ac:	1b 1d       	adc	r17, r11
    12ae:	d6 cf       	rjmp	.-84     	; 0x125c <_ZN6Effect14infinitesquareEv+0x54>
	    	LedSquare::displaycenter(((i+2)%LEDS_PER_ROW));
	    	LedSquare::displaysmall(((i+1)%LEDS_PER_ROW));
	    	LedSquare::displaybig(((i  )%LEDS_PER_ROW));
	    }
	}
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	5f 90       	pop	r5
    12ce:	4f 90       	pop	r4
    12d0:	3f 90       	pop	r3
    12d2:	2f 90       	pop	r2
    12d4:	08 95       	ret

000012d6 <_ZN6Effect6smileyEv>:
void Effect::renderfunc_explode(uint32_t matrix)
{

}

void Effect::smiley()
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	ec 01       	movw	r28, r24
{
	unsigned int milli = this->_milli + 1;
    12f2:	0a 81       	ldd	r16, Y+2	; 0x02
    12f4:	1b 81       	ldd	r17, Y+3	; 0x03
    12f6:	0f 5f       	subi	r16, 0xFF	; 255
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    12fa:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    12fe:	6b 01       	movw	r12, r22
    1300:	7c 01       	movw	r14, r24
    1302:	bb 24       	eor	r11, r11

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
    1304:	38 01       	movw	r6, r16
    1306:	88 24       	eor	r8, r8
    1308:	99 24       	eor	r9, r9
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <_ZN6Effect6smileyEv+0x42>
	 		LedCube::draw(smiley_lol,y,this->_mod);
    130c:	82 eb       	ldi	r24, 0xB2	; 178
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	6b 2d       	mov	r22, r11
    1312:	4c 81       	ldd	r20, Y+4	; 0x04
    1314:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7LedCube4drawEPhhh>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
    1318:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	26 0d       	add	r18, r6
    1322:	37 1d       	adc	r19, r7
    1324:	48 1d       	adc	r20, r8
    1326:	59 1d       	adc	r21, r9
    1328:	62 17       	cp	r22, r18
    132a:	73 07       	cpc	r23, r19
    132c:	84 07       	cpc	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	68 f3       	brcs	.-38     	; 0x130c <_ZN6Effect6smileyEv+0x36>
void Effect::smiley()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
    1332:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    1336:	6b 01       	movw	r12, r22
    1338:	7c 01       	movw	r14, r24
    133a:	b3 94       	inc	r11
    133c:	85 e0       	ldi	r24, 0x05	; 5
    133e:	b8 16       	cp	r11, r24
    1340:	59 f7       	brne	.-42     	; 0x1318 <_ZN6Effect6smileyEv+0x42>
	    while(millis() < t + milli){
	 		LedCube::draw(smiley_lol,y,this->_mod);
		}
	}
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	7f 90       	pop	r7
    135a:	6f 90       	pop	r6
    135c:	08 95       	ret

0000135e <_ZN6Effect10drawstringEPKch>:

void Effect::setspeed(unsigned int t)
{
	this->_milli  = t;
}
void Effect::drawstring(const char* str,byte len)
    135e:	4f 92       	push	r4
    1360:	5f 92       	push	r5
    1362:	6f 92       	push	r6
    1364:	7f 92       	push	r7
    1366:	8f 92       	push	r8
    1368:	9f 92       	push	r9
    136a:	af 92       	push	r10
    136c:	bf 92       	push	r11
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	2b 01       	movw	r4, r22
    1382:	c4 2e       	mov	r12, r20
{
	unsigned int milli = this->_milli + 1;
    1384:	0a 81       	ldd	r16, Y+2	; 0x02
    1386:	1b 81       	ldd	r17, Y+3	; 0x03
    1388:	0f 5f       	subi	r16, 0xFF	; 255
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    138c:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	dd 24       	eor	r13, r13

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
				while(millis() < t + milli){
    1396:	48 01       	movw	r8, r16
    1398:	aa 24       	eor	r10, r10
    139a:	bb 24       	eor	r11, r11
    139c:	48 c0       	rjmp	.+144    	; 0x142e <_ZN6Effect10drawstringEPKch+0xd0>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
    139e:	1d 82       	std	Y+5, r1	; 0x05
				while(millis() < t + milli){
				if(str[i] == ' '){
    13a0:	32 01       	movw	r6, r4
    13a2:	6d 0c       	add	r6, r13
    13a4:	71 1c       	adc	r7, r1
    13a6:	3e c0       	rjmp	.+124    	; 0x1424 <_ZN6Effect10drawstringEPKch+0xc6>
    13a8:	d3 01       	movw	r26, r6
    13aa:	ec 91       	ld	r30, X
    13ac:	e0 32       	cpi	r30, 0x20	; 32
    13ae:	19 f4       	brne	.+6      	; 0x13b6 <_ZN6Effect10drawstringEPKch+0x58>
					LedCube::clear();
    13b0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN7LedCube5clearEv>
    13b4:	29 c0       	rjmp	.+82     	; 0x1408 <_ZN6Effect10drawstringEPKch+0xaa>
					continue;
				}
				if(str[i] > 47 && str[i] < 58){
    13b6:	8e 2f       	mov	r24, r30
    13b8:	80 53       	subi	r24, 0x30	; 48
    13ba:	8a 30       	cpi	r24, 0x0A	; 10
    13bc:	50 f4       	brcc	.+20     	; 0x13d2 <_ZN6Effect10drawstringEPKch+0x74>
					render_matrix(ascii_map[str[i]-48]);
    13be:	ff 27       	eor	r31, r31
    13c0:	e7 fd       	sbrc	r30, 7
    13c2:	f0 95       	com	r31
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	ee 59       	subi	r30, 0x9E	; 158
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <_ZN6Effect10drawstringEPKch+0x8e>
					continue;
				}else if(str[i] > 64 && str[i] < 91){
    13d2:	8e 2f       	mov	r24, r30
    13d4:	81 54       	subi	r24, 0x41	; 65
    13d6:	8a 31       	cpi	r24, 0x1A	; 26
    13d8:	b8 f4       	brcc	.+46     	; 0x1408 <_ZN6Effect10drawstringEPKch+0xaa>
					render_matrix(ascii_map[str[i]-55]);
    13da:	ff 27       	eor	r31, r31
    13dc:	e7 fd       	sbrc	r30, 7
    13de:	f0 95       	com	r31
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	ea 5b       	subi	r30, 0xBA	; 186
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	40 81       	ld	r20, Z
    13ee:	51 81       	ldd	r21, Z+1	; 0x01
    13f0:	62 81       	ldd	r22, Z+2	; 0x02
    13f2:	73 81       	ldd	r23, Z+3	; 0x03
    13f4:	ce 01       	movw	r24, r28
    13f6:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN6Effect13render_matrixEm>
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <_ZN6Effect10drawstringEPKch+0xaa>
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
				while(millis() < t + milli){
    13fc:	79 01       	movw	r14, r18
    13fe:	8a 01       	movw	r16, r20
    1400:	e8 0c       	add	r14, r8
    1402:	f9 1c       	adc	r15, r9
    1404:	0a 1d       	adc	r16, r10
    1406:	1b 1d       	adc	r17, r11
    1408:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    140c:	6e 15       	cp	r22, r14
    140e:	7f 05       	cpc	r23, r15
    1410:	80 07       	cpc	r24, r16
    1412:	91 07       	cpc	r25, r17
    1414:	48 f2       	brcs	.-110    	; 0x13a8 <_ZN6Effect10drawstringEPKch+0x4a>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
    1416:	0e 94 03 11 	call	0x2206	; 0x2206 <millis>
    141a:	9b 01       	movw	r18, r22
    141c:	ac 01       	movw	r20, r24
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	8d 83       	std	Y+5, r24	; 0x05
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	8e 81       	ldd	r24, Y+6	; 0x06
    1428:	98 17       	cp	r25, r24
    142a:	40 f3       	brcs	.-48     	; 0x13fc <_ZN6Effect10drawstringEPKch+0x9e>
void Effect::drawstring(const char* str,byte len)
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
    142c:	d3 94       	inc	r13
    142e:	dc 14       	cp	r13, r12
    1430:	08 f4       	brcc	.+2      	; 0x1434 <_ZN6Effect10drawstringEPKch+0xd6>
    1432:	b5 cf       	rjmp	.-150    	; 0x139e <_ZN6Effect10drawstringEPKch+0x40>
					continue;
				}
			}
		}
	}
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	9f 90       	pop	r9
    144a:	8f 90       	pop	r8
    144c:	7f 90       	pop	r7
    144e:	6f 90       	pop	r6
    1450:	5f 90       	pop	r5
    1452:	4f 90       	pop	r4
    1454:	08 95       	ret

00001456 <_ZN6EffectD0Ev>:

Effect::Effect() {
	this->_milli  = 100;
}

Effect::~Effect() {
    1456:	fc 01       	movw	r30, r24
    1458:	85 ee       	ldi	r24, 0xE5	; 229
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24

}
    1460:	cf 01       	movw	r24, r30
    1462:	0e 94 b8 10 	call	0x2170	; 0x2170 <_ZdlPv>
    1466:	08 95       	ret

00001468 <_ZN9LedSquare10displaybigEi>:
  LedCube::transfer(17);
  LedCube::transfer(18);
}

void LedSquare::displaybig(int z){
  LedCube::plane(z);
    1468:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7LedCube5planeEh>
  LedCube::setpixel(0, 0);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(1, 0);
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(2, 0);
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(3, 0);
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 0);
    148c:	84 e0       	ldi	r24, 0x04	; 4
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 1);
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 2);
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	62 e0       	ldi	r22, 0x02	; 2
    14a0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 3);
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	63 e0       	ldi	r22, 0x03	; 3
    14a8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 4);
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	64 e0       	ldi	r22, 0x04	; 4
    14b0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 4);
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	64 e0       	ldi	r22, 0x04	; 4
    14b8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(1, 4);
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	64 e0       	ldi	r22, 0x04	; 4
    14c0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(2, 4);
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	64 e0       	ldi	r22, 0x04	; 4
    14c8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(3, 4);
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	64 e0       	ldi	r22, 0x04	; 4
    14d0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 1);
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 2);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 3);
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	63 e0       	ldi	r22, 0x03	; 3
    14e8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN7LedCube8setpixelEhh>

}
    14ec:	08 95       	ret

000014ee <_ZN9LedSquare12displaysmallEi>:
  LedCube::plane(z);
  LedCube::transfer(12);
}

void LedSquare::displaysmall(int z){
  LedCube::plane(z);
    14ee:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7LedCube5planeEh>
  LedCube::transfer(6);
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
  LedCube::transfer(7);
    14fa:	87 e0       	ldi	r24, 0x07	; 7
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
  LedCube::transfer(8);
    1502:	88 e0       	ldi	r24, 0x08	; 8
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>

  LedCube::transfer(11);
    150a:	8b e0       	ldi	r24, 0x0B	; 11
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
  LedCube::transfer(13);
    1512:	8d e0       	ldi	r24, 0x0D	; 13
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>

  LedCube::transfer(16);
    151a:	80 e1       	ldi	r24, 0x10	; 16
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
  LedCube::transfer(17);
    1522:	81 e1       	ldi	r24, 0x11	; 17
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
  LedCube::transfer(18);
    152a:	82 e1       	ldi	r24, 0x12	; 18
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
}
    1532:	08 95       	ret

00001534 <_ZN9LedSquare13displaycenterEi>:
	// TODO Auto-generated destructor stub
}

void LedSquare::displaycenter(int z){

  LedCube::plane(z);
    1534:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7LedCube5planeEh>
  LedCube::transfer(12);
    1538:	8c e0       	ldi	r24, 0x0C	; 12
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
}
    1540:	08 95       	ret

00001542 <setup>:
    }

    bt_save = bt_val;
}

void setup() {
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
	g_command.mod = MOD_SLIDE;
    1546:	81 e2       	ldi	r24, 0x21	; 33
    1548:	80 93 42 03 	sts	0x0342, r24
	g_command.cmd = CMD_TEXT;
    154c:	80 ef       	ldi	r24, 0xF0	; 240
    154e:	80 93 41 03 	sts	0x0341, r24

	Serial.begin(9600);
    1552:	06 e1       	ldi	r16, 0x16	; 22
    1554:	14 e0       	ldi	r17, 0x04	; 4
    1556:	c8 01       	movw	r24, r16
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	55 e2       	ldi	r21, 0x25	; 37
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN14HardwareSerial5beginEm>
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    1564:	e0 91 16 04 	lds	r30, 0x0416
    1568:	f0 91 17 04 	lds	r31, 0x0417
    156c:	02 80       	ldd	r0, Z+2	; 0x02
    156e:	f3 81       	ldd	r31, Z+3	; 0x03
    1570:	e0 2d       	mov	r30, r0
    1572:	c8 01       	movw	r24, r16
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	71 e0       	ldi	r23, 0x01	; 1
    1578:	41 e1       	ldi	r20, 0x11	; 17
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	09 95       	icall
	Serial.write("LED CUBE rev. 1\r\n");
	analogReference(DEFAULT);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	0e 94 af 11 	call	0x235e	; 0x235e <analogReference>

	pinMode(A1, INPUT);
    1584:	8f e0       	ldi	r24, 0x0F	; 15
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <pinMode>

	LedCube::init();
    158c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN7LedCube4initEv>

	Effect1.setspeed(120);
    1590:	0a ef       	ldi	r16, 0xFA	; 250
    1592:	11 e0       	ldi	r17, 0x01	; 1
    1594:	c8 01       	movw	r24, r16
    1596:	68 e7       	ldi	r22, 0x78	; 120
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_ZN6Effect8setspeedEj>
	Effect1.setmod(g_command.mod);
    159e:	c8 01       	movw	r24, r16
    15a0:	60 91 42 03 	lds	r22, 0x0342
    15a4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN6Effect6setmodEh>

	g_command.buf = g_buff+3;
    15a8:	89 e4       	ldi	r24, 0x49	; 73
    15aa:	93 e0       	ldi	r25, 0x03	; 3
    15ac:	90 93 45 03 	sts	0x0345, r25
    15b0:	80 93 44 03 	sts	0x0344, r24

	strcpy(g_command.buf,"RALPH");
    15b4:	62 e1       	ldi	r22, 0x12	; 18
    15b6:	71 e0       	ldi	r23, 0x01	; 1
    15b8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcpy>
	g_command.len = strlen(g_command.buf);
    15bc:	a0 91 44 03 	lds	r26, 0x0344
    15c0:	b0 91 45 03 	lds	r27, 0x0345
    15c4:	fd 01       	movw	r30, r26
    15c6:	01 90       	ld	r0, Z+
    15c8:	00 20       	and	r0, r0
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <setup+0x84>
    15cc:	31 97       	sbiw	r30, 0x01	; 1
    15ce:	ea 1b       	sub	r30, r26
    15d0:	fb 0b       	sbc	r31, r27
    15d2:	e0 93 43 03 	sts	0x0343, r30
}
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	08 95       	ret

000015dc <_Z9proc_varsv>:

byte bt_state = 0xF0,bt_val = 0, bt_save = 0;

void proc_vars()
{
    bt_val = digitalRead(A1);
    15dc:	8f e0       	ldi	r24, 0x0F	; 15
    15de:	0e 94 4e 12 	call	0x249c	; 0x249c <digitalRead>
    15e2:	98 2f       	mov	r25, r24
    15e4:	80 93 86 03 	sts	0x0386, r24
    if(bt_save != bt_val && bt_val == LOW){
    15e8:	80 91 87 03 	lds	r24, 0x0387
    15ec:	89 17       	cp	r24, r25
    15ee:	79 f0       	breq	.+30     	; 0x160e <_Z9proc_varsv+0x32>
    15f0:	99 23       	and	r25, r25
    15f2:	69 f4       	brne	.+26     	; 0x160e <_Z9proc_varsv+0x32>
    	if(bt_state == 0xF6) bt_state = 0xF0;
    15f4:	80 91 cb 01 	lds	r24, 0x01CB
    15f8:	86 3f       	cpi	r24, 0xF6	; 246
    15fa:	11 f4       	brne	.+4      	; 0x1600 <_Z9proc_varsv+0x24>
    15fc:	80 ef       	ldi	r24, 0xF0	; 240
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <_Z9proc_varsv+0x26>
    	else bt_state++;
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	80 93 cb 01 	sts	0x01CB, r24

    	g_command.cmd = bt_state;
    1606:	80 91 cb 01 	lds	r24, 0x01CB
    160a:	80 93 41 03 	sts	0x0341, r24
    }

    bt_save = bt_val;
    160e:	90 93 87 03 	sts	0x0387, r25
}
    1612:	08 95       	ret

00001614 <_Z9fetchdatav>:
	strcpy(g_command.buf,"RALPH");
	g_command.len = strlen(g_command.buf);
}


void fetchdata()
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	c0 e0       	ldi	r28, 0x00	; 0
    161a:	d0 e0       	ldi	r29, 0x00	; 0
{

	int i = 0;
	for(;Serial.available() > 0 && i<32;i++) {
    161c:	86 e1       	ldi	r24, 0x16	; 22
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_ZN14HardwareSerial9availableEv>
    1624:	18 16       	cp	r1, r24
    1626:	19 06       	cpc	r1, r25
    1628:	6c f4       	brge	.+26     	; 0x1644 <_Z9fetchdatav+0x30>
    162a:	c0 32       	cpi	r28, 0x20	; 32
    162c:	d1 05       	cpc	r29, r1
    162e:	61 f0       	breq	.+24     	; 0x1648 <_Z9fetchdatav+0x34>
		g_buff[i] = Serial.read();
    1630:	86 e1       	ldi	r24, 0x16	; 22
    1632:	94 e0       	ldi	r25, 0x04	; 4
    1634:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN14HardwareSerial4readEv>
    1638:	fe 01       	movw	r30, r28
    163a:	ea 5b       	subi	r30, 0xBA	; 186
    163c:	fc 4f       	sbci	r31, 0xFC	; 252
    163e:	80 83       	st	Z, r24

void fetchdata()
{

	int i = 0;
	for(;Serial.available() > 0 && i<32;i++) {
    1640:	21 96       	adiw	r28, 0x01	; 1
    1642:	ec cf       	rjmp	.-40     	; 0x161c <_Z9fetchdatav+0x8>
		g_buff[i] = Serial.read();
	}

	if(i>1){
    1644:	22 97       	sbiw	r28, 0x02	; 2
    1646:	a4 f0       	brlt	.+40     	; 0x1670 <_Z9fetchdatav+0x5c>
		g_command.cmd = g_buff[0];
    1648:	80 91 46 03 	lds	r24, 0x0346
    164c:	80 93 41 03 	sts	0x0341, r24
		g_command.mod = g_buff[1];
    1650:	80 91 47 03 	lds	r24, 0x0347
    1654:	80 93 42 03 	sts	0x0342, r24
		g_command.len = g_buff[2];
    1658:	80 91 48 03 	lds	r24, 0x0348
    165c:	80 93 43 03 	sts	0x0343, r24
		strcpy(g_command.buf,g_buff+3);
    1660:	80 91 44 03 	lds	r24, 0x0344
    1664:	90 91 45 03 	lds	r25, 0x0345
    1668:	69 e4       	ldi	r22, 0x49	; 73
    166a:	73 e0       	ldi	r23, 0x03	; 3
    166c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <strcpy>
	}

	proc_vars();
    1670:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_Z9proc_varsv>

}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <loop>:


void loop() {
	fetchdata();
    167a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <_Z9fetchdatav>

	switch(g_command.cmd){
    167e:	80 91 41 03 	lds	r24, 0x0341
    1682:	83 3f       	cpi	r24, 0xF3	; 243
    1684:	39 f1       	breq	.+78     	; 0x16d4 <loop+0x5a>
    1686:	84 3f       	cpi	r24, 0xF4	; 244
    1688:	40 f4       	brcc	.+16     	; 0x169a <loop+0x20>
    168a:	81 3f       	cpi	r24, 0xF1	; 241
    168c:	c9 f0       	breq	.+50     	; 0x16c0 <loop+0x46>
    168e:	82 3f       	cpi	r24, 0xF2	; 242
    1690:	e0 f4       	brcc	.+56     	; 0x16ca <loop+0x50>
    1692:	80 3f       	cpi	r24, 0xF0	; 240
    1694:	09 f0       	breq	.+2      	; 0x1698 <loop+0x1e>
    1696:	49 c0       	rjmp	.+146    	; 0x172a <loop+0xb0>
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <loop+0x30>
    169a:	85 3f       	cpi	r24, 0xF5	; 245
    169c:	29 f1       	breq	.+74     	; 0x16e8 <loop+0x6e>
    169e:	85 3f       	cpi	r24, 0xF5	; 245
    16a0:	f0 f0       	brcs	.+60     	; 0x16de <loop+0x64>
    16a2:	86 3f       	cpi	r24, 0xF6	; 246
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <loop+0x2e>
    16a6:	41 c0       	rjmp	.+130    	; 0x172a <loop+0xb0>
    16a8:	24 c0       	rjmp	.+72     	; 0x16f2 <loop+0x78>
	case CMD_TEXT:
		Effect1.drawstring(g_command.buf,g_command.len);
    16aa:	60 91 44 03 	lds	r22, 0x0344
    16ae:	70 91 45 03 	lds	r23, 0x0345
    16b2:	8a ef       	ldi	r24, 0xFA	; 250
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	40 91 43 03 	lds	r20, 0x0343
    16ba:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN6Effect10drawstringEPKch>
    16be:	08 95       	ret
		break;
	case CMD_HEART:
		Effect1.music();
    16c0:	8a ef       	ldi	r24, 0xFA	; 250
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN6Effect5musicEv>
    16c8:	08 95       	ret
		break;
	case CMD_SMILE:
		Effect1.smiley();
    16ca:	8a ef       	ldi	r24, 0xFA	; 250
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN6Effect6smileyEv>
    16d2:	08 95       	ret
		break;
	case CMD_BUBBLES:
		Effect1.bubbles();
    16d4:	8a ef       	ldi	r24, 0xFA	; 250
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	0e 94 77 07 	call	0xeee	; 0xeee <_ZN6Effect7bubblesEv>
    16dc:	08 95       	ret
		break;
	case CMD_BOUNCE:
		Effect1.infinitesquare();
    16de:	8a ef       	ldi	r24, 0xFA	; 250
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6Effect14infinitesquareEv>
    16e6:	08 95       	ret
		break;
	case CMD_INFINITE:
		Effect1.bounce();
    16e8:	8a ef       	ldi	r24, 0xFA	; 250
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_ZN6Effect6bounceEv>
    16f0:	08 95       	ret
		break;
	case CMD_DEBUG:
		if(g_command.mod == MOD_DBG_COORD)
    16f2:	80 91 42 03 	lds	r24, 0x0342
    16f6:	84 32       	cpi	r24, 0x24	; 36
    16f8:	61 f4       	brne	.+24     	; 0x1712 <loop+0x98>
			Effect1.debug((byte)g_command.buf[0],
						  (byte)g_command.buf[1],
						  (byte)g_command.buf[2]);
    16fa:	e0 91 44 03 	lds	r30, 0x0344
    16fe:	f0 91 45 03 	lds	r31, 0x0345
    1702:	8a ef       	ldi	r24, 0xFA	; 250
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	60 81       	ld	r22, Z
    1708:	41 81       	ldd	r20, Z+1	; 0x01
    170a:	22 81       	ldd	r18, Z+2	; 0x02
    170c:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN6Effect5debugEhhh>
    1710:	08 95       	ret
		else if(g_command.mod == MOD_DBG_NUMBER)
    1712:	85 32       	cpi	r24, 0x25	; 37
    1714:	51 f4       	brne	.+20     	; 0x172a <loop+0xb0>
			Effect1.debug((byte)g_command.buf[0],(byte)g_command.buf[0]);
    1716:	e0 91 44 03 	lds	r30, 0x0344
    171a:	f0 91 45 03 	lds	r31, 0x0345
    171e:	40 81       	ld	r20, Z
    1720:	8a ef       	ldi	r24, 0xFA	; 250
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	64 2f       	mov	r22, r20
    1726:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN6Effect5debugEhh>
    172a:	08 95       	ret

0000172c <__vector_13>:

#include "TimerOne.h"

TimerOne Timer1;              // preinstatiate

ISR(TIMER1_OVF_vect)          // interrupt service routine that wraps a user defined function supplied by attachInterrupt
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
{
  Timer1.isrCallback();
    174e:	e0 91 8c 03 	lds	r30, 0x038C
    1752:	f0 91 8d 03 	lds	r31, 0x038D
    1756:	09 95       	icall
}
    1758:	ff 91       	pop	r31
    175a:	ef 91       	pop	r30
    175c:	bf 91       	pop	r27
    175e:	af 91       	pop	r26
    1760:	9f 91       	pop	r25
    1762:	8f 91       	pop	r24
    1764:	7f 91       	pop	r23
    1766:	6f 91       	pop	r22
    1768:	5f 91       	pop	r21
    176a:	4f 91       	pop	r20
    176c:	3f 91       	pop	r19
    176e:	2f 91       	pop	r18
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <_Z7fix_fftPcS_ii>:
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    177a:	2f 92       	push	r2
    177c:	3f 92       	push	r3
    177e:	4f 92       	push	r4
    1780:	5f 92       	push	r5
    1782:	6f 92       	push	r6
    1784:	7f 92       	push	r7
    1786:	8f 92       	push	r8
    1788:	9f 92       	push	r9
    178a:	af 92       	push	r10
    178c:	bf 92       	push	r11
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	66 97       	sbiw	r28, 0x16	; 22
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	9a 87       	std	Y+10, r25	; 0x0a
    17b0:	89 87       	std	Y+9, r24	; 0x09
    17b2:	7c 87       	std	Y+12, r23	; 0x0c
    17b4:	6b 87       	std	Y+11, r22	; 0x0b
    17b6:	3e 87       	std	Y+14, r19	; 0x0e
    17b8:	2d 87       	std	Y+13, r18	; 0x0d
{
    int mr, nn, i, j, l, k, istep, n, scale, shift;
    char qr, qi, tr, ti, wr, wi;

    n = 1 << m;
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	c9 2e       	mov	r12, r25
    17be:	d1 2c       	mov	r13, r1
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <_Z7fix_fftPcS_ii+0x4c>
    17c2:	cc 0c       	add	r12, r12
    17c4:	dd 1c       	adc	r13, r13
    17c6:	4a 95       	dec	r20
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <_Z7fix_fftPcS_ii+0x48>

    /* max FFT size = N_WAVE */
    if (n > N_WAVE)
    17ca:	21 e0       	ldi	r18, 0x01	; 1
    17cc:	c2 16       	cp	r12, r18
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	d2 06       	cpc	r13, r18
    17d2:	1c f0       	brlt	.+6      	; 0x17da <_Z7fix_fftPcS_ii+0x60>
    17d4:	2f ef       	ldi	r18, 0xFF	; 255
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	47 c1       	rjmp	.+654    	; 0x1a68 <_Z7fix_fftPcS_ii+0x2ee>
	  return -1;

    mr = 0;
    nn = n - 1;
    17da:	86 01       	movw	r16, r12
    17dc:	01 50       	subi	r16, 0x01	; 1
    17de:	10 40       	sbci	r17, 0x00	; 0
    17e0:	e9 84       	ldd	r14, Y+9	; 0x09
    17e2:	fa 84       	ldd	r15, Y+10	; 0x0a
    17e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    17e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	31 c0       	rjmp	.+98     	; 0x1854 <_Z7fix_fftPcS_ii+0xda>
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
    17f2:	96 01       	movw	r18, r12
	  l = n;
	  do {
		l >>= 1;
    17f4:	35 95       	asr	r19
    17f6:	27 95       	ror	r18
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
	  l = n;
	  do {
    17f8:	c9 01       	movw	r24, r18
    17fa:	84 0f       	add	r24, r20
    17fc:	95 1f       	adc	r25, r21
    17fe:	08 17       	cp	r16, r24
    1800:	19 07       	cpc	r17, r25
    1802:	c4 f3       	brlt	.-16     	; 0x17f4 <_Z7fix_fftPcS_ii+0x7a>
		l >>= 1;
	  } while (mr+l > nn);
	  mr = (mr & (l-1)) + l;
    1804:	c9 01       	movw	r24, r18
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	48 23       	and	r20, r24
    180a:	59 23       	and	r21, r25
    180c:	42 0f       	add	r20, r18
    180e:	53 1f       	adc	r21, r19

	  if (mr <= m)
    1810:	64 17       	cp	r22, r20
    1812:	75 07       	cpc	r23, r21
    1814:	cc f4       	brge	.+50     	; 0x1848 <_Z7fix_fftPcS_ii+0xce>
		continue;
	  tr = fr[m];
    1816:	f7 01       	movw	r30, r14
    1818:	91 81       	ldd	r25, Z+1	; 0x01
	  fr[m] = fr[mr];
    181a:	29 85       	ldd	r18, Y+9	; 0x09
    181c:	3a 85       	ldd	r19, Y+10	; 0x0a
    181e:	24 0f       	add	r18, r20
    1820:	35 1f       	adc	r19, r21
    1822:	f9 01       	movw	r30, r18
    1824:	80 81       	ld	r24, Z
    1826:	f7 01       	movw	r30, r14
    1828:	81 83       	std	Z+1, r24	; 0x01
	  fr[mr] = tr;
    182a:	f9 01       	movw	r30, r18
    182c:	90 83       	st	Z, r25
	  ti = fi[m];
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	9c 91       	ld	r25, X
    1832:	11 97       	sbiw	r26, 0x01	; 1
	  fi[m] = fi[mr];
    1834:	2b 85       	ldd	r18, Y+11	; 0x0b
    1836:	3c 85       	ldd	r19, Y+12	; 0x0c
    1838:	24 0f       	add	r18, r20
    183a:	35 1f       	adc	r19, r21
    183c:	f9 01       	movw	r30, r18
    183e:	80 81       	ld	r24, Z
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	8c 93       	st	X, r24
    1844:	11 97       	sbiw	r26, 0x01	; 1
	  fi[mr] = ti;
    1846:	90 83       	st	Z, r25
    mr = 0;
    nn = n - 1;
    scale = 0;

    /* decimation in time - re-order data */
    for (m=1; m<=nn; ++m) {
    1848:	6f 5f       	subi	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	08 94       	sec
    184e:	e1 1c       	adc	r14, r1
    1850:	f1 1c       	adc	r15, r1
    1852:	11 96       	adiw	r26, 0x01	; 1
    1854:	06 17       	cp	r16, r22
    1856:	17 07       	cpc	r17, r23
    1858:	64 f6       	brge	.-104    	; 0x17f2 <_Z7fix_fftPcS_ii+0x78>
    185a:	01 e0       	ldi	r16, 0x01	; 1
    185c:	40 2e       	mov	r4, r16
    185e:	51 2c       	mov	r5, r1
    1860:	27 e0       	ldi	r18, 0x07	; 7
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	38 87       	std	Y+8, r19	; 0x08
    1866:	2f 83       	std	Y+7, r18	; 0x07
    1868:	f9 c0       	rjmp	.+498    	; 0x1a5c <_Z7fix_fftPcS_ii+0x2e2>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	4d 85       	ldd	r20, Y+13	; 0x0d
    186e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1870:	45 2b       	or	r20, r21
    1872:	09 f0       	breq	.+2      	; 0x1876 <_Z7fix_fftPcS_ii+0xfc>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	51 e0       	ldi	r21, 0x01	; 1
    1878:	85 27       	eor	r24, r21
    187a:	68 2f       	mov	r22, r24
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	7e 83       	std	Y+6, r23	; 0x06
    1880:	6d 83       	std	Y+5, r22	; 0x05
	  /*
	    it may not be obvious, but the shift will be
	    performed on each data point exactly once,
	    during this pass.
	  */
	  istep = l << 1;
    1882:	32 01       	movw	r6, r4
    1884:	66 0c       	add	r6, r6
    1886:	77 1c       	adc	r7, r7
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    1888:	8b 85       	ldd	r24, Y+11	; 0x0b
    188a:	9c 85       	ldd	r25, Y+12	; 0x0c
    188c:	84 0d       	add	r24, r4
    188e:	95 1d       	adc	r25, r5
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	a9 85       	ldd	r26, Y+9	; 0x09
    1896:	ba 85       	ldd	r27, Y+10	; 0x0a
    1898:	a4 0d       	add	r26, r4
    189a:	b5 1d       	adc	r27, r5
    189c:	bc 83       	std	Y+4, r27	; 0x04
    189e:	ab 83       	std	Y+3, r26	; 0x03
    18a0:	1c 8a       	std	Y+20, r1	; 0x14
    18a2:	1b 8a       	std	Y+19, r1	; 0x13
    18a4:	cf c0       	rjmp	.+414    	; 0x1a44 <_Z7fix_fftPcS_ii+0x2ca>
	  */
	  istep = l << 1;
	  for (m=0; m<l; ++m) {
		j = m << k;
		/* 0 <= j < N_WAVE/2 */
		wr =  pgm_read_word_near(Sinewave + j+N_WAVE/4);
    18a6:	8b 89       	ldd	r24, Y+19	; 0x13
    18a8:	9c 89       	ldd	r25, Y+20	; 0x14
    18aa:	0f 80       	ldd	r0, Y+7	; 0x07
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <_Z7fix_fftPcS_ii+0x138>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <_Z7fix_fftPcS_ii+0x134>
    18b6:	fc 01       	movw	r30, r24
    18b8:	e8 55       	subi	r30, 0x58	; 88
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	25 91       	lpm	r18, Z+
    18be:	34 91       	lpm	r19, Z+
    18c0:	42 2f       	mov	r20, r18
Serial.println(Sinewave[256]);

Serial.println("");*/


		wi = -pgm_read_word_near(Sinewave + j);
    18c2:	fc 01       	movw	r30, r24
    18c4:	e8 59       	subi	r30, 0x98	; 152
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	85 91       	lpm	r24, Z+
    18ca:	94 91       	lpm	r25, Z+
    18cc:	28 2f       	mov	r18, r24
    18ce:	21 95       	neg	r18
		if (inverse)
    18d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    18d2:	fe 85       	ldd	r31, Y+14	; 0x0e
    18d4:	ef 2b       	or	r30, r31
    18d6:	09 f0       	breq	.+2      	; 0x18da <_Z7fix_fftPcS_ii+0x160>
		    wi = -wi;
    18d8:	21 95       	neg	r18
		if (shift) {
    18da:	6d 81       	ldd	r22, Y+5	; 0x05
    18dc:	7e 81       	ldd	r23, Y+6	; 0x06
    18de:	67 2b       	or	r22, r23
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <_Z7fix_fftPcS_ii+0x16c>
		    wr >>= 1;
    18e2:	45 95       	asr	r20
		    wi >>= 1;
    18e4:	25 95       	asr	r18
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    18e6:	89 84       	ldd	r8, Y+9	; 0x09
    18e8:	9a 84       	ldd	r9, Y+10	; 0x0a
    18ea:	8b 89       	ldd	r24, Y+19	; 0x13
    18ec:	9c 89       	ldd	r25, Y+20	; 0x14
    18ee:	88 0e       	add	r8, r24
    18f0:	99 1e       	adc	r9, r25
    18f2:	ab 84       	ldd	r10, Y+11	; 0x0b
    18f4:	bc 84       	ldd	r11, Y+12	; 0x0c
    18f6:	a8 0e       	add	r10, r24
    18f8:	b9 1e       	adc	r11, r25
    18fa:	1c 01       	movw	r2, r24
    18fc:	eb 80       	ldd	r14, Y+3	; 0x03
    18fe:	fc 80       	ldd	r15, Y+4	; 0x04
    1900:	09 81       	ldd	r16, Y+1	; 0x01
    1902:	1a 81       	ldd	r17, Y+2	; 0x02
  //Serial.println(a);
 //Serial.println(b);


    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    1904:	a4 2f       	mov	r26, r20
    1906:	bb 27       	eor	r27, r27
    1908:	a7 fd       	sbrc	r26, 7
    190a:	b0 95       	com	r27
    190c:	b8 8b       	std	Y+16, r27	; 0x10
    190e:	af 87       	std	Y+15, r26	; 0x0f
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
    1910:	e2 2f       	mov	r30, r18
    1912:	ff 27       	eor	r31, r31
    1914:	e7 fd       	sbrc	r30, 7
    1916:	f0 95       	com	r31
    1918:	fa 8b       	std	Y+18, r31	; 0x12
    191a:	e9 8b       	std	Y+17, r30	; 0x11
    191c:	7d c0       	rjmp	.+250    	; 0x1a18 <_Z7fix_fftPcS_ii+0x29e>
  //Serial.println(a);
 //Serial.println(b);


    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    191e:	d7 01       	movw	r26, r14
    1920:	8c 91       	ld	r24, X
    1922:	e8 2f       	mov	r30, r24
    1924:	ff 27       	eor	r31, r31
    1926:	e7 fd       	sbrc	r30, 7
    1928:	f0 95       	com	r31
    192a:	fe 8b       	std	Y+22, r31	; 0x16
    192c:	ed 8b       	std	Y+21, r30	; 0x15
    192e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1930:	38 89       	ldd	r19, Y+16	; 0x10
    1932:	2e 9f       	mul	r18, r30
    1934:	a0 01       	movw	r20, r0
    1936:	2f 9f       	mul	r18, r31
    1938:	50 0d       	add	r21, r0
    193a:	3e 9f       	mul	r19, r30
    193c:	50 0d       	add	r21, r0
    193e:	11 24       	eor	r1, r1
    1940:	b6 e0       	ldi	r27, 0x06	; 6
    1942:	55 95       	asr	r21
    1944:	47 95       	ror	r20
    1946:	ba 95       	dec	r27
    1948:	e1 f7       	brne	.-8      	; 0x1942 <_Z7fix_fftPcS_ii+0x1c8>
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
    194a:	d8 01       	movw	r26, r16
    194c:	6c 91       	ld	r22, X
    194e:	77 27       	eor	r23, r23
    1950:	67 fd       	sbrc	r22, 7
    1952:	70 95       	com	r23
    1954:	e9 89       	ldd	r30, Y+17	; 0x11
    1956:	fa 89       	ldd	r31, Y+18	; 0x12
    1958:	e6 9f       	mul	r30, r22
    195a:	90 01       	movw	r18, r0
    195c:	e7 9f       	mul	r30, r23
    195e:	30 0d       	add	r19, r0
    1960:	f6 9f       	mul	r31, r22
    1962:	30 0d       	add	r19, r0
    1964:	11 24       	eor	r1, r1
    1966:	a6 e0       	ldi	r26, 0x06	; 6
    1968:	35 95       	asr	r19
    196a:	27 95       	ror	r18
    196c:	aa 95       	dec	r26
    196e:	e1 f7       	brne	.-8      	; 0x1968 <_Z7fix_fftPcS_ii+0x1ee>
    1970:	a4 2f       	mov	r26, r20
    1972:	a1 70       	andi	r26, 0x01	; 1
    1974:	c9 01       	movw	r24, r18
    1976:	95 95       	asr	r25
    1978:	87 95       	ror	r24
    197a:	a8 1b       	sub	r26, r24
    197c:	55 95       	asr	r21
    197e:	47 95       	ror	r20
    1980:	a4 0f       	add	r26, r20
    1982:	21 70       	andi	r18, 0x01	; 1
    1984:	a2 1b       	sub	r26, r18
  //Serial.println(a);
 //Serial.println(b);


    /* shift right one less bit (i.e. 15-1) */
    int c = ((int)a * (int)b) >> 6;
    1986:	4f 85       	ldd	r20, Y+15	; 0x0f
    1988:	58 89       	ldd	r21, Y+16	; 0x10
    198a:	46 9f       	mul	r20, r22
    198c:	90 01       	movw	r18, r0
    198e:	47 9f       	mul	r20, r23
    1990:	30 0d       	add	r19, r0
    1992:	56 9f       	mul	r21, r22
    1994:	30 0d       	add	r19, r0
    1996:	11 24       	eor	r1, r1
    1998:	76 e0       	ldi	r23, 0x06	; 6
    199a:	35 95       	asr	r19
    199c:	27 95       	ror	r18
    199e:	7a 95       	dec	r23
    19a0:	e1 f7       	brne	.-8      	; 0x199a <_Z7fix_fftPcS_ii+0x220>
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
		    j = i + l;
		    tr = FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
		    ti = FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);
    19a2:	6d 89       	ldd	r22, Y+21	; 0x15
    19a4:	7e 89       	ldd	r23, Y+22	; 0x16
    19a6:	e6 9f       	mul	r30, r22
    19a8:	a0 01       	movw	r20, r0
    19aa:	e7 9f       	mul	r30, r23
    19ac:	50 0d       	add	r21, r0
    19ae:	f6 9f       	mul	r31, r22
    19b0:	50 0d       	add	r21, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	66 e0       	ldi	r22, 0x06	; 6
    19b6:	55 95       	asr	r21
    19b8:	47 95       	ror	r20
    19ba:	6a 95       	dec	r22
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <_Z7fix_fftPcS_ii+0x23c>
    19be:	ba 01       	movw	r22, r20
    19c0:	75 95       	asr	r23
    19c2:	67 95       	ror	r22
    19c4:	c9 01       	movw	r24, r18
    19c6:	95 95       	asr	r25
    19c8:	87 95       	ror	r24
    19ca:	68 0f       	add	r22, r24
    19cc:	21 70       	andi	r18, 0x01	; 1
    19ce:	62 0f       	add	r22, r18
    19d0:	41 70       	andi	r20, 0x01	; 1
    19d2:	64 0f       	add	r22, r20
		    qr = fr[i];
    19d4:	f4 01       	movw	r30, r8
    19d6:	90 81       	ld	r25, Z
		    qi = fi[i];
    19d8:	f5 01       	movw	r30, r10
    19da:	20 81       	ld	r18, Z
		    if (shift) {
    19dc:	4d 81       	ldd	r20, Y+5	; 0x05
    19de:	5e 81       	ldd	r21, Y+6	; 0x06
    19e0:	45 2b       	or	r20, r21
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <_Z7fix_fftPcS_ii+0x26e>
			  qr >>= 1;
    19e4:	95 95       	asr	r25
			  qi >>= 1;
    19e6:	25 95       	asr	r18
		    }
		    fr[j] = qr - tr;
    19e8:	89 2f       	mov	r24, r25
    19ea:	8a 1b       	sub	r24, r26
    19ec:	f7 01       	movw	r30, r14
    19ee:	80 83       	st	Z, r24
		    fi[j] = qi - ti;
    19f0:	82 2f       	mov	r24, r18
    19f2:	86 1b       	sub	r24, r22
    19f4:	f8 01       	movw	r30, r16
    19f6:	80 83       	st	Z, r24
		    fr[i] = qr + tr;
    19f8:	9a 0f       	add	r25, r26
    19fa:	d4 01       	movw	r26, r8
    19fc:	9c 93       	st	X, r25
		    fi[i] = qi + ti;
    19fe:	26 0f       	add	r18, r22
    1a00:	f5 01       	movw	r30, r10
    1a02:	20 83       	st	Z, r18
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fix_fft(char fr[], char fi[], int m, int inverse)
    1a04:	26 0c       	add	r2, r6
    1a06:	37 1c       	adc	r3, r7
    1a08:	e6 0c       	add	r14, r6
    1a0a:	f7 1c       	adc	r15, r7
    1a0c:	06 0d       	add	r16, r6
    1a0e:	17 1d       	adc	r17, r7
    1a10:	86 0c       	add	r8, r6
    1a12:	97 1c       	adc	r9, r7
    1a14:	a6 0c       	add	r10, r6
    1a16:	b7 1c       	adc	r11, r7
		    wi = -wi;
		if (shift) {
		    wr >>= 1;
		    wi >>= 1;
		}
		for (i=m; i<n; i+=istep) {
    1a18:	2c 14       	cp	r2, r12
    1a1a:	3d 04       	cpc	r3, r13
    1a1c:	0c f4       	brge	.+2      	; 0x1a20 <_Z7fix_fftPcS_ii+0x2a6>
    1a1e:	7f cf       	rjmp	.-258    	; 0x191e <_Z7fix_fftPcS_ii+0x1a4>
	    it may not be obvious, but the shift will be
	    performed on each data point exactly once,
	    during this pass.
	  */
	  istep = l << 1;
	  for (m=0; m<l; ++m) {
    1a20:	2b 89       	ldd	r18, Y+19	; 0x13
    1a22:	3c 89       	ldd	r19, Y+20	; 0x14
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	3c 8b       	std	Y+20, r19	; 0x14
    1a2a:	2b 8b       	std	Y+19, r18	; 0x13
    1a2c:	49 81       	ldd	r20, Y+1	; 0x01
    1a2e:	5a 81       	ldd	r21, Y+2	; 0x02
    1a30:	4f 5f       	subi	r20, 0xFF	; 255
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	5a 83       	std	Y+2, r21	; 0x02
    1a36:	49 83       	std	Y+1, r20	; 0x01
    1a38:	6b 81       	ldd	r22, Y+3	; 0x03
    1a3a:	7c 81       	ldd	r23, Y+4	; 0x04
    1a3c:	6f 5f       	subi	r22, 0xFF	; 255
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	7c 83       	std	Y+4, r23	; 0x04
    1a42:	6b 83       	std	Y+3, r22	; 0x03
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	84 15       	cp	r24, r4
    1a4a:	95 05       	cpc	r25, r5
    1a4c:	0c f4       	brge	.+2      	; 0x1a50 <_Z7fix_fftPcS_ii+0x2d6>
    1a4e:	2b cf       	rjmp	.-426    	; 0x18a6 <_Z7fix_fftPcS_ii+0x12c>
		    fi[j] = qi - ti;
		    fr[i] = qr + tr;
		    fi[i] = qi + ti;
		}
	  }
	  --k;
    1a50:	af 81       	ldd	r26, Y+7	; 0x07
    1a52:	b8 85       	ldd	r27, Y+8	; 0x08
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	b8 87       	std	Y+8, r27	; 0x08
    1a58:	af 83       	std	Y+7, r26	; 0x07
    1a5a:	23 01       	movw	r4, r6
	  fi[mr] = ti;
    }

    l = 1;
    k = LOG2_N_WAVE-1;
    while (l < n) {
    1a5c:	4c 14       	cp	r4, r12
    1a5e:	5d 04       	cpc	r5, r13
    1a60:	0c f4       	brge	.+2      	; 0x1a64 <_Z7fix_fftPcS_ii+0x2ea>
    1a62:	03 cf       	rjmp	.-506    	; 0x186a <_Z7fix_fftPcS_ii+0xf0>
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
	  }
	  --k;
	  l = istep;
    }
    return scale;
}
    1a68:	c9 01       	movw	r24, r18
    1a6a:	66 96       	adiw	r28, 0x16	; 22
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	7f 90       	pop	r7
    1a90:	6f 90       	pop	r6
    1a92:	5f 90       	pop	r5
    1a94:	4f 90       	pop	r4
    1a96:	3f 90       	pop	r3
    1a98:	2f 90       	pop	r2
    1a9a:	08 95       	ret

00001a9c <_ZN7LedCube5planeEh>:
		if(matrix[4+(i*CUBESIZE)] == 1)
			LedCube::setpixel(0,y,z);
	}
}

void LedCube::plane(byte z)
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	d8 2e       	mov	r13, r24
    1aac:	06 ed       	ldi	r16, 0xD6	; 214
    1aae:	11 e0       	ldi	r17, 0x01	; 1
    1ab0:	c0 e0       	ldi	r28, 0x00	; 0
    1ab2:	d0 e0       	ldi	r29, 0x00	; 0
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
	    if(i == z || z >= LEDS_PER_ROW){
    1ab4:	e8 2e       	mov	r14, r24
    1ab6:	ff 24       	eor	r15, r15
    1ab8:	ce 15       	cp	r28, r14
    1aba:	df 05       	cpc	r29, r15
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <_ZN7LedCube5planeEh+0x28>
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	8d 15       	cp	r24, r13
    1ac2:	20 f4       	brcc	.+8      	; 0x1acc <_ZN7LedCube5planeEh+0x30>
	      digitalWrite(cathodePins[i], HIGH);
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	80 81       	ld	r24, Z
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <_ZN7LedCube5planeEh+0x36>
	    }else{
	       digitalWrite(cathodePins[i], LOW);
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 81       	ld	r24, Z
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <digitalWrite>
}

void LedCube::plane(byte z)
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
    1ad6:	21 96       	adiw	r28, 0x01	; 1
    1ad8:	0e 5f       	subi	r16, 0xFE	; 254
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	c5 30       	cpi	r28, 0x05	; 5
    1ade:	d1 05       	cpc	r29, r1
    1ae0:	59 f7       	brne	.-42     	; 0x1ab8 <_ZN7LedCube5planeEh+0x1c>
	      digitalWrite(cathodePins[i], HIGH);
	    }else{
	       digitalWrite(cathodePins[i], LOW);
	    }
	  }
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	08 95       	ret

00001af2 <_ZN7LedCube8transferEi>:
	//enable decoders
	pinMode(pEN, OUTPUT);
	digitalWrite(pEN, HIGH);
}

void LedCube::transfer(int num)
    1af2:	cf 92       	push	r12
    1af4:	df 92       	push	r13
    1af6:	ef 92       	push	r14
    1af8:	ff 92       	push	r15
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
{
	  int weight=1,pin=0;
	  num = constrain(num, 0, 24);
    1b02:	89 31       	cpi	r24, 0x19	; 25
    1b04:	91 05       	cpc	r25, r1
    1b06:	14 f0       	brlt	.+4      	; 0x1b0c <_ZN7LedCube8transferEi+0x1a>
    1b08:	88 e1       	ldi	r24, 0x18	; 24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	6c 01       	movw	r12, r24
    1b0e:	97 ff       	sbrs	r25, 7
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <_ZN7LedCube8transferEi+0x24>
    1b12:	cc 24       	eor	r12, r12
    1b14:	dd 24       	eor	r13, r13
    1b16:	9c ec       	ldi	r25, 0xCC	; 204
    1b18:	e9 2e       	mov	r14, r25
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	f9 2e       	mov	r15, r25
    1b1e:	01 e0       	ldi	r16, 0x01	; 1
    1b20:	10 e0       	ldi	r17, 0x00	; 0
    1b22:	c0 e0       	ldi	r28, 0x00	; 0
    1b24:	d0 e0       	ldi	r29, 0x00	; 0

	  for(; pin < DECODER_BITS; weight*=2, pin++)
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);
    1b26:	b8 01       	movw	r22, r16
    1b28:	6c 21       	and	r22, r12
    1b2a:	7d 21       	and	r23, r13
    1b2c:	0c 2e       	mov	r0, r28
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <_ZN7LedCube8transferEi+0x42>
    1b30:	75 95       	asr	r23
    1b32:	67 95       	ror	r22
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <_ZN7LedCube8transferEi+0x3e>
    1b38:	f7 01       	movw	r30, r14
    1b3a:	80 81       	ld	r24, Z
    1b3c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <digitalWrite>
void LedCube::transfer(int num)
{
	  int weight=1,pin=0;
	  num = constrain(num, 0, 24);

	  for(; pin < DECODER_BITS; weight*=2, pin++)
    1b40:	00 0f       	add	r16, r16
    1b42:	11 1f       	adc	r17, r17
    1b44:	21 96       	adiw	r28, 0x01	; 1
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	e8 0e       	add	r14, r24
    1b4c:	f9 1e       	adc	r15, r25
    1b4e:	c5 30       	cpi	r28, 0x05	; 5
    1b50:	d1 05       	cpc	r29, r1
    1b52:	49 f7       	brne	.-46     	; 0x1b26 <_ZN7LedCube8transferEi+0x34>
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);

	  delayMicroseconds(MICRO);
    1b54:	80 e5       	ldi	r24, 0x50	; 80
    1b56:	93 ec       	ldi	r25, 0xC3	; 195
    1b58:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <delayMicroseconds>
}
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	08 95       	ret

00001b6e <_ZN7LedCube8setpixelEhhh>:
void LedCube::setpixel(byte x,byte y)
{
	transfer((y * LEDS_PER_ROW) + x);
}

void LedCube::setpixel(byte x,byte y,byte z)
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	f8 2e       	mov	r15, r24
    1b76:	06 2f       	mov	r16, r22
    1b78:	84 2f       	mov	r24, r20
{
	plane(z);
    1b7a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7LedCube5planeEh>
	transfer((y * LEDS_PER_ROW) + x);
    1b7e:	85 e0       	ldi	r24, 0x05	; 5
    1b80:	08 9f       	mul	r16, r24
    1b82:	80 01       	movw	r16, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	c8 01       	movw	r24, r16
    1b88:	8f 0d       	add	r24, r15
    1b8a:	91 1d       	adc	r25, r1
    1b8c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
}
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	08 95       	ret

00001b98 <_ZN7LedCube4drawEPhhh>:
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);

	  delayMicroseconds(MICRO);
}

void LedCube::draw(byte* matrix,byte y, byte mod)
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	06 2f       	mov	r16, r22
    1ba2:	ec 01       	movw	r28, r24
    1ba4:	14 e0       	ldi	r17, 0x04	; 4
{
	byte i = 0,z=4;
	for(;i<CUBESIZE;i++,z--){
		if(matrix[0+(i*CUBESIZE)] == 1)
    1ba6:	88 81       	ld	r24, Y
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	29 f4       	brne	.+10     	; 0x1bb6 <_ZN7LedCube4drawEPhhh+0x1e>
			LedCube::setpixel(4,y,z);
    1bac:	84 e0       	ldi	r24, 0x04	; 4
    1bae:	60 2f       	mov	r22, r16
    1bb0:	41 2f       	mov	r20, r17
    1bb2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
		if(matrix[1+(i*CUBESIZE)] == 1)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	29 f4       	brne	.+10     	; 0x1bc6 <_ZN7LedCube4drawEPhhh+0x2e>
			LedCube::setpixel(3,y,z);
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	60 2f       	mov	r22, r16
    1bc0:	41 2f       	mov	r20, r17
    1bc2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
		if(matrix[2+(i*CUBESIZE)] == 1)
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <_ZN7LedCube4drawEPhhh+0x3e>
			LedCube::setpixel(2,y,z);
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	60 2f       	mov	r22, r16
    1bd0:	41 2f       	mov	r20, r17
    1bd2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
		if(matrix[3+(i*CUBESIZE)] == 1)
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	21 f4       	brne	.+8      	; 0x1be4 <_ZN7LedCube4drawEPhhh+0x4c>
			LedCube::setpixel(1,y,z);
    1bdc:	60 2f       	mov	r22, r16
    1bde:	41 2f       	mov	r20, r17
    1be0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
		if(matrix[4+(i*CUBESIZE)] == 1)
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <_ZN7LedCube4drawEPhhh+0x5c>
			LedCube::setpixel(0,y,z);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	60 2f       	mov	r22, r16
    1bee:	41 2f       	mov	r20, r17
    1bf0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7LedCube8setpixelEhhh>
    1bf4:	25 96       	adiw	r28, 0x05	; 5
}

void LedCube::draw(byte* matrix,byte y, byte mod)
{
	byte i = 0,z=4;
	for(;i<CUBESIZE;i++,z--){
    1bf6:	11 23       	and	r17, r17
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <_ZN7LedCube4drawEPhhh+0x66>
    1bfa:	11 50       	subi	r17, 0x01	; 1
    1bfc:	d4 cf       	rjmp	.-88     	; 0x1ba6 <_ZN7LedCube4drawEPhhh+0xe>
		if(matrix[3+(i*CUBESIZE)] == 1)
			LedCube::setpixel(1,y,z);
		if(matrix[4+(i*CUBESIZE)] == 1)
			LedCube::setpixel(0,y,z);
	}
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	08 95       	ret

00001c08 <_ZN7LedCube8setpixelEhh>:
	  }
}

void LedCube::setpixel(byte x,byte y)
{
	transfer((y * LEDS_PER_ROW) + x);
    1c08:	95 e0       	ldi	r25, 0x05	; 5
    1c0a:	69 9f       	mul	r22, r25
    1c0c:	b0 01       	movw	r22, r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	9b 01       	movw	r18, r22
    1c12:	28 0f       	add	r18, r24
    1c14:	31 1d       	adc	r19, r1
    1c16:	c9 01       	movw	r24, r18
    1c18:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
}
    1c1c:	08 95       	ret

00001c1e <_ZN7LedCube5clearEv>:
	       digitalWrite(cathodePins[i], LOW);
	    }
	  }
}

void LedCube::clear()
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	c6 ed       	ldi	r28, 0xD6	; 214
    1c24:	d1 e0       	ldi	r29, 0x01	; 1
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
	       digitalWrite(cathodePins[i], LOW);
    1c26:	88 81       	ld	r24, Y
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <digitalWrite>
	       transfer(0);
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_ZN7LedCube8transferEi>
    1c36:	22 96       	adiw	r28, 0x02	; 2
}

void LedCube::clear()
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	c0 3e       	cpi	r28, 0xE0	; 224
    1c3c:	d8 07       	cpc	r29, r24
    1c3e:	99 f7       	brne	.-26     	; 0x1c26 <_ZN7LedCube5clearEv+0x8>
	       digitalWrite(cathodePins[i], LOW);
	       transfer(0);

	  }
}
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	08 95       	ret

00001c46 <_ZN7LedCube4initEv>:
LedCube::~LedCube()
{

}

void LedCube::init()
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	cc ec       	ldi	r28, 0xCC	; 204
    1c4c:	d1 e0       	ldi	r29, 0x01	; 1
{
	for(int i =0; i < DECODER_BITS; i++){
		pinMode(decoderPins[i], OUTPUT);
    1c4e:	88 81       	ld	r24, Y
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <pinMode>
		digitalWrite(decoderPins[i], LOW);
    1c56:	88 81       	ld	r24, Y
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <digitalWrite>
    1c5e:	22 96       	adiw	r28, 0x02	; 2

}

void LedCube::init()
{
	for(int i =0; i < DECODER_BITS; i++){
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	c6 3d       	cpi	r28, 0xD6	; 214
    1c64:	d8 07       	cpc	r29, r24
    1c66:	99 f7       	brne	.-26     	; 0x1c4e <_ZN7LedCube4initEv+0x8>
    1c68:	c6 ed       	ldi	r28, 0xD6	; 214
    1c6a:	d1 e0       	ldi	r29, 0x01	; 1
		pinMode(decoderPins[i], OUTPUT);
		digitalWrite(decoderPins[i], LOW);
	}
	for(int i = 0; i < LEDS_PER_ROW; i++){
		pinMode(cathodePins[i], OUTPUT);
    1c6c:	88 81       	ld	r24, Y
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <pinMode>
		digitalWrite(cathodePins[i], LOW);
    1c74:	88 81       	ld	r24, Y
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <digitalWrite>
    1c7c:	22 96       	adiw	r28, 0x02	; 2
{
	for(int i =0; i < DECODER_BITS; i++){
		pinMode(decoderPins[i], OUTPUT);
		digitalWrite(decoderPins[i], LOW);
	}
	for(int i = 0; i < LEDS_PER_ROW; i++){
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	c0 3e       	cpi	r28, 0xE0	; 224
    1c82:	d8 07       	cpc	r29, r24
    1c84:	99 f7       	brne	.-26     	; 0x1c6c <_ZN7LedCube4initEv+0x26>
		pinMode(cathodePins[i], OUTPUT);
		digitalWrite(cathodePins[i], LOW);
	}

	//enable decoders
	pinMode(pEN, OUTPUT);
    1c86:	8c e0       	ldi	r24, 0x0C	; 12
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <pinMode>
	digitalWrite(pEN, HIGH);
    1c8e:	8c e0       	ldi	r24, 0x0C	; 12
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <digitalWrite>
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1c9c:	08 95       	ret

00001c9e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	8f 93       	push	r24
    1cb0:	9f 93       	push	r25
    1cb2:	ef 93       	push	r30
    1cb4:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1cb6:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1cba:	20 91 ce 03 	lds	r18, 0x03CE
    1cbe:	30 91 cf 03 	lds	r19, 0x03CF
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	2f 73       	andi	r18, 0x3F	; 63
    1cc8:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1cca:	80 91 d0 03 	lds	r24, 0x03D0
    1cce:	90 91 d1 03 	lds	r25, 0x03D1
    1cd2:	28 17       	cp	r18, r24
    1cd4:	39 07       	cpc	r19, r25
    1cd6:	59 f0       	breq	.+22     	; 0x1cee <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    1cd8:	e0 91 ce 03 	lds	r30, 0x03CE
    1cdc:	f0 91 cf 03 	lds	r31, 0x03CF
    1ce0:	e2 57       	subi	r30, 0x72	; 114
    1ce2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce4:	40 83       	st	Z, r20
    buffer->head = i;
    1ce6:	30 93 cf 03 	sts	0x03CF, r19
    1cea:	20 93 ce 03 	sts	0x03CE, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	4f 91       	pop	r20
    1cf8:	3f 91       	pop	r19
    1cfa:	2f 91       	pop	r18
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1d06:	e0 91 22 04 	lds	r30, 0x0422
    1d0a:	f0 91 23 04 	lds	r31, 0x0423
    1d0e:	e0 5c       	subi	r30, 0xC0	; 192
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	81 91       	ld	r24, Z+
    1d14:	91 91       	ld	r25, Z+
    1d16:	20 81       	ld	r18, Z
    1d18:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1d1a:	82 1b       	sub	r24, r18
    1d1c:	93 0b       	sbc	r25, r19
    1d1e:	8f 73       	andi	r24, 0x3F	; 63
    1d20:	90 70       	andi	r25, 0x00	; 0
    1d22:	89 2b       	or	r24, r25
    1d24:	11 f0       	breq	.+4      	; 0x1d2a <_Z14serialEventRunv+0x24>
    1d26:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_Z11serialEventv>
    1d2a:	08 95       	ret

00001d2c <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	2f 93       	push	r18
    1d38:	3f 93       	push	r19
    1d3a:	4f 93       	push	r20
    1d3c:	5f 93       	push	r21
    1d3e:	6f 93       	push	r22
    1d40:	7f 93       	push	r23
    1d42:	8f 93       	push	r24
    1d44:	9f 93       	push	r25
    1d46:	af 93       	push	r26
    1d48:	bf 93       	push	r27
    1d4a:	ef 93       	push	r30
    1d4c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1d4e:	20 91 12 04 	lds	r18, 0x0412
    1d52:	30 91 13 04 	lds	r19, 0x0413
    1d56:	80 91 14 04 	lds	r24, 0x0414
    1d5a:	90 91 15 04 	lds	r25, 0x0415
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	31 f4       	brne	.+12     	; 0x1d70 <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1d64:	80 91 c1 00 	lds	r24, 0x00C1
    1d68:	8f 7d       	andi	r24, 0xDF	; 223
    1d6a:	80 93 c1 00 	sts	0x00C1, r24
    1d6e:	16 c0       	rjmp	.+44     	; 0x1d9c <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1d70:	e0 91 14 04 	lds	r30, 0x0414
    1d74:	f0 91 15 04 	lds	r31, 0x0415
    1d78:	ee 52       	subi	r30, 0x2E	; 46
    1d7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d7c:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1d7e:	80 91 14 04 	lds	r24, 0x0414
    1d82:	90 91 15 04 	lds	r25, 0x0415
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	60 e4       	ldi	r22, 0x40	; 64
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
    1d90:	90 93 15 04 	sts	0x0415, r25
    1d94:	80 93 14 04 	sts	0x0414, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1d98:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	bf 91       	pop	r27
    1da2:	af 91       	pop	r26
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	7f 91       	pop	r23
    1daa:	6f 91       	pop	r22
    1dac:	5f 91       	pop	r21
    1dae:	4f 91       	pop	r20
    1db0:	3f 91       	pop	r19
    1db2:	2f 91       	pop	r18
    1db4:	0f 90       	pop	r0
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	0f 90       	pop	r0
    1dba:	1f 90       	pop	r1
    1dbc:	18 95       	reti

00001dbe <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	ec 01       	movw	r28, r24
    1dd2:	7a 01       	movw	r14, r20
    1dd4:	8b 01       	movw	r16, r22
    1dd6:	dd 24       	eor	r13, r13
    1dd8:	40 30       	cpi	r20, 0x00	; 0
    1dda:	81 ee       	ldi	r24, 0xE1	; 225
    1ddc:	58 07       	cpc	r21, r24
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	68 07       	cpc	r22, r24
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	78 07       	cpc	r23, r24
    1de6:	11 f0       	breq	.+4      	; 0x1dec <_ZN14HardwareSerial5beginEm+0x2e>
    1de8:	dd 24       	eor	r13, r13
    1dea:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	a9 2e       	mov	r10, r25
    1df0:	b1 2c       	mov	r11, r1
    1df2:	ec 89       	ldd	r30, Y+20	; 0x14
    1df4:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1df6:	dd 20       	and	r13, r13
    1df8:	69 f0       	breq	.+26     	; 0x1e14 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1dfa:	c5 01       	movw	r24, r10
    1dfc:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <_ZN14HardwareSerial5beginEm+0x46>
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	0a 94       	dec	r0
    1e06:	e2 f7       	brpl	.-8      	; 0x1e00 <_ZN14HardwareSerial5beginEm+0x42>
    1e08:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	79 e0       	ldi	r23, 0x09	; 9
    1e0e:	8d e3       	ldi	r24, 0x3D	; 61
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	05 c0       	rjmp	.+10     	; 0x1e1e <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1e14:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1e16:	60 e8       	ldi	r22, 0x80	; 128
    1e18:	74 e8       	ldi	r23, 0x84	; 132
    1e1a:	8e e1       	ldi	r24, 0x1E	; 30
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a8 01       	movw	r20, r16
    1e20:	97 01       	movw	r18, r14
    1e22:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodsi4>
    1e26:	21 50       	subi	r18, 0x01	; 1
    1e28:	30 40       	sbci	r19, 0x00	; 0
    1e2a:	40 40       	sbci	r20, 0x00	; 0
    1e2c:	50 40       	sbci	r21, 0x00	; 0
    1e2e:	56 95       	lsr	r21
    1e30:	47 95       	ror	r20
    1e32:	37 95       	ror	r19
    1e34:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1e36:	80 e1       	ldi	r24, 0x10	; 16
    1e38:	20 30       	cpi	r18, 0x00	; 0
    1e3a:	38 07       	cpc	r19, r24
    1e3c:	20 f0       	brcs	.+8      	; 0x1e46 <_ZN14HardwareSerial5beginEm+0x88>
    1e3e:	dd 20       	and	r13, r13
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <_ZN14HardwareSerial5beginEm+0x88>
    1e42:	dd 24       	eor	r13, r13
    1e44:	d6 cf       	rjmp	.-84     	; 0x1df2 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1e46:	e8 89       	ldd	r30, Y+16	; 0x10
    1e48:	f9 89       	ldd	r31, Y+17	; 0x11
    1e4a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1e4c:	ea 89       	ldd	r30, Y+18	; 0x12
    1e4e:	fb 89       	ldd	r31, Y+19	; 0x13
    1e50:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1e52:	ee 89       	ldd	r30, Y+22	; 0x16
    1e54:	ff 89       	ldd	r31, Y+23	; 0x17
    1e56:	40 81       	ld	r20, Z
    1e58:	21 e0       	ldi	r18, 0x01	; 1
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	c9 01       	movw	r24, r18
    1e5e:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <_ZN14HardwareSerial5beginEm+0xa8>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <_ZN14HardwareSerial5beginEm+0xa4>
    1e6a:	48 2b       	or	r20, r24
    1e6c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1e6e:	ee 89       	ldd	r30, Y+22	; 0x16
    1e70:	ff 89       	ldd	r31, Y+23	; 0x17
    1e72:	40 81       	ld	r20, Z
    1e74:	c9 01       	movw	r24, r18
    1e76:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <_ZN14HardwareSerial5beginEm+0xc0>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0a 94       	dec	r0
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <_ZN14HardwareSerial5beginEm+0xbc>
    1e82:	48 2b       	or	r20, r24
    1e84:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1e86:	ee 89       	ldd	r30, Y+22	; 0x16
    1e88:	ff 89       	ldd	r31, Y+23	; 0x17
    1e8a:	40 81       	ld	r20, Z
    1e8c:	c9 01       	movw	r24, r18
    1e8e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <_ZN14HardwareSerial5beginEm+0xd8>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <_ZN14HardwareSerial5beginEm+0xd4>
    1e9a:	48 2b       	or	r20, r24
    1e9c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1e9e:	ee 89       	ldd	r30, Y+22	; 0x16
    1ea0:	ff 89       	ldd	r31, Y+23	; 0x17
    1ea2:	80 81       	ld	r24, Z
    1ea4:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <_ZN14HardwareSerial5beginEm+0xee>
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <_ZN14HardwareSerial5beginEm+0xea>
    1eb0:	20 95       	com	r18
    1eb2:	28 23       	and	r18, r24
    1eb4:	20 83       	st	Z, r18
}
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	ff 90       	pop	r15
    1ec0:	ef 90       	pop	r14
    1ec2:	df 90       	pop	r13
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	08 95       	ret

00001eca <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1eca:	dc 01       	movw	r26, r24
    1ecc:	1c 96       	adiw	r26, 0x0c	; 12
    1ece:	ed 91       	ld	r30, X+
    1ed0:	fc 91       	ld	r31, X
    1ed2:	1d 97       	sbiw	r26, 0x0d	; 13
    1ed4:	e0 5c       	subi	r30, 0xC0	; 192
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	21 91       	ld	r18, Z+
    1eda:	31 91       	ld	r19, Z+
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	28 1b       	sub	r18, r24
    1ee2:	39 0b       	sbc	r19, r25
    1ee4:	2f 73       	andi	r18, 0x3F	; 63
    1ee6:	30 70       	andi	r19, 0x00	; 0
}
    1ee8:	c9 01       	movw	r24, r18
    1eea:	08 95       	ret

00001eec <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1eec:	dc 01       	movw	r26, r24
    1eee:	1c 96       	adiw	r26, 0x0c	; 12
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	1d 97       	sbiw	r26, 0x0d	; 13
    1ef6:	e0 5c       	subi	r30, 0xC0	; 192
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	20 81       	ld	r18, Z
    1efc:	31 81       	ldd	r19, Z+1	; 0x01
    1efe:	e0 54       	subi	r30, 0x40	; 64
    1f00:	f0 40       	sbci	r31, 0x00	; 0
    1f02:	df 01       	movw	r26, r30
    1f04:	ae 5b       	subi	r26, 0xBE	; 190
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	8d 91       	ld	r24, X+
    1f0a:	9c 91       	ld	r25, X
    1f0c:	11 97       	sbiw	r26, 0x01	; 1
    1f0e:	28 17       	cp	r18, r24
    1f10:	39 07       	cpc	r19, r25
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <_ZN14HardwareSerial4peekEv+0x2e>
    1f14:	2f ef       	ldi	r18, 0xFF	; 255
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1f1a:	8d 91       	ld	r24, X+
    1f1c:	9c 91       	ld	r25, X
    1f1e:	e8 0f       	add	r30, r24
    1f20:	f9 1f       	adc	r31, r25
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1f28:	c9 01       	movw	r24, r18
    1f2a:	08 95       	ret

00001f2c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	1c 96       	adiw	r26, 0x0c	; 12
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	1d 97       	sbiw	r26, 0x0d	; 13
    1f36:	e0 5c       	subi	r30, 0xC0	; 192
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	20 81       	ld	r18, Z
    1f3c:	31 81       	ldd	r19, Z+1	; 0x01
    1f3e:	e0 54       	subi	r30, 0x40	; 64
    1f40:	f0 40       	sbci	r31, 0x00	; 0
    1f42:	df 01       	movw	r26, r30
    1f44:	ae 5b       	subi	r26, 0xBE	; 190
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
    1f48:	8d 91       	ld	r24, X+
    1f4a:	9c 91       	ld	r25, X
    1f4c:	11 97       	sbiw	r26, 0x01	; 1
    1f4e:	28 17       	cp	r18, r24
    1f50:	39 07       	cpc	r19, r25
    1f52:	19 f4       	brne	.+6      	; 0x1f5a <_ZN14HardwareSerial4readEv+0x2e>
    1f54:	2f ef       	ldi	r18, 0xFF	; 255
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	10 c0       	rjmp	.+32     	; 0x1f7a <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1f5a:	8d 91       	ld	r24, X+
    1f5c:	9c 91       	ld	r25, X
    1f5e:	11 97       	sbiw	r26, 0x01	; 1
    1f60:	e8 0f       	add	r30, r24
    1f62:	f9 1f       	adc	r31, r25
    1f64:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1f66:	8d 91       	ld	r24, X+
    1f68:	9c 91       	ld	r25, X
    1f6a:	11 97       	sbiw	r26, 0x01	; 1
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	8f 73       	andi	r24, 0x3F	; 63
    1f70:	90 70       	andi	r25, 0x00	; 0
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	9c 93       	st	X, r25
    1f76:	8e 93       	st	-X, r24
    return c;
    1f78:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1f7a:	c9 01       	movw	r24, r18
    1f7c:	08 95       	ret

00001f7e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1f7e:	fc 01       	movw	r30, r24
    1f80:	86 85       	ldd	r24, Z+14	; 0x0e
    1f82:	97 85       	ldd	r25, Z+15	; 0x0f
    1f84:	dc 01       	movw	r26, r24
    1f86:	a0 5c       	subi	r26, 0xC0	; 192
    1f88:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	ee 5b       	subi	r30, 0xBE	; 190
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	2d 91       	ld	r18, X+
    1f92:	3c 91       	ld	r19, X
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	28 17       	cp	r18, r24
    1f9c:	39 07       	cpc	r19, r25
    1f9e:	c1 f7       	brne	.-16     	; 0x1f90 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    1fa0:	08 95       	ret

00001fa2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	ec 01       	movw	r28, r24
    1fa8:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1faa:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fac:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fae:	e0 5c       	subi	r30, 0xC0	; 192
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	e0 54       	subi	r30, 0x40	; 64
    1fb8:	f0 40       	sbci	r31, 0x00	; 0
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	60 e4       	ldi	r22, 0x40	; 64
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	0e 94 bf 13 	call	0x277e	; 0x277e <__divmodhi4>
    1fc4:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1fc6:	df 01       	movw	r26, r30
    1fc8:	ae 5b       	subi	r26, 0xBE	; 190
    1fca:	bf 4f       	sbci	r27, 0xFF	; 255
    1fcc:	8d 91       	ld	r24, X+
    1fce:	9c 91       	ld	r25, X
    1fd0:	11 97       	sbiw	r26, 0x01	; 1
    1fd2:	28 17       	cp	r18, r24
    1fd4:	39 07       	cpc	r19, r25
    1fd6:	d1 f3       	breq	.-12     	; 0x1fcc <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1fd8:	e0 5c       	subi	r30, 0xC0	; 192
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	e0 54       	subi	r30, 0x40	; 64
    1fe2:	f0 40       	sbci	r31, 0x00	; 0
    1fe4:	e8 0f       	add	r30, r24
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    1fea:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fec:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fee:	e0 5c       	subi	r30, 0xC0	; 192
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	31 83       	std	Z+1, r19	; 0x01
    1ff4:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1ff6:	ee 89       	ldd	r30, Y+22	; 0x16
    1ff8:	ff 89       	ldd	r31, Y+23	; 0x17
    1ffa:	20 81       	ld	r18, Z
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <_ZN14HardwareSerial5writeEh+0x66>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <_ZN14HardwareSerial5writeEh+0x62>
    200c:	28 2b       	or	r18, r24
    200e:	20 83       	st	Z, r18
  
  return 1;
}
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    201a:	10 92 19 04 	sts	0x0419, r1
    201e:	10 92 18 04 	sts	0x0418, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2022:	88 ee       	ldi	r24, 0xE8	; 232
    2024:	93 e0       	ldi	r25, 0x03	; 3
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	80 93 1a 04 	sts	0x041A, r24
    202e:	90 93 1b 04 	sts	0x041B, r25
    2032:	a0 93 1c 04 	sts	0x041C, r26
    2036:	b0 93 1d 04 	sts	0x041D, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    203a:	8d ee       	ldi	r24, 0xED	; 237
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	90 93 17 04 	sts	0x0417, r25
    2042:	80 93 16 04 	sts	0x0416, r24
{
  _rx_buffer = rx_buffer;
    2046:	8e e8       	ldi	r24, 0x8E	; 142
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	90 93 23 04 	sts	0x0423, r25
    204e:	80 93 22 04 	sts	0x0422, r24
  _tx_buffer = tx_buffer;
    2052:	82 ed       	ldi	r24, 0xD2	; 210
    2054:	93 e0       	ldi	r25, 0x03	; 3
    2056:	90 93 25 04 	sts	0x0425, r25
    205a:	80 93 24 04 	sts	0x0424, r24
  _ubrrh = ubrrh;
    205e:	85 ec       	ldi	r24, 0xC5	; 197
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	90 93 27 04 	sts	0x0427, r25
    2066:	80 93 26 04 	sts	0x0426, r24
  _ubrrl = ubrrl;
    206a:	84 ec       	ldi	r24, 0xC4	; 196
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	90 93 29 04 	sts	0x0429, r25
    2072:	80 93 28 04 	sts	0x0428, r24
  _ucsra = ucsra;
    2076:	80 ec       	ldi	r24, 0xC0	; 192
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	90 93 2b 04 	sts	0x042B, r25
    207e:	80 93 2a 04 	sts	0x042A, r24
  _ucsrb = ucsrb;
    2082:	81 ec       	ldi	r24, 0xC1	; 193
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	90 93 2d 04 	sts	0x042D, r25
    208a:	80 93 2c 04 	sts	0x042C, r24
  _udr = udr;
    208e:	86 ec       	ldi	r24, 0xC6	; 198
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	90 93 2f 04 	sts	0x042F, r25
    2096:	80 93 2e 04 	sts	0x042E, r24
  _rxen = rxen;
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	80 93 30 04 	sts	0x0430, r24
  _txen = txen;
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	80 93 31 04 	sts	0x0431, r24
  _rxcie = rxcie;
    20a6:	87 e0       	ldi	r24, 0x07	; 7
    20a8:	80 93 32 04 	sts	0x0432, r24
  _udrie = udrie;
    20ac:	85 e0       	ldi	r24, 0x05	; 5
    20ae:	80 93 33 04 	sts	0x0433, r24
  _u2x = u2x;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 93 34 04 	sts	0x0434, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    20b8:	08 95       	ret

000020ba <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	7c 01       	movw	r14, r24
    20cc:	6b 01       	movw	r12, r22
    20ce:	8a 01       	movw	r16, r20
    20d0:	c0 e0       	ldi	r28, 0x00	; 0
    20d2:	d0 e0       	ldi	r29, 0x00	; 0
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    20d6:	d6 01       	movw	r26, r12
    20d8:	6d 91       	ld	r22, X+
    20da:	6d 01       	movw	r12, r26
    20dc:	d7 01       	movw	r26, r14
    20de:	ed 91       	ld	r30, X+
    20e0:	fc 91       	ld	r31, X
    20e2:	01 90       	ld	r0, Z+
    20e4:	f0 81       	ld	r31, Z
    20e6:	e0 2d       	mov	r30, r0
    20e8:	c7 01       	movw	r24, r14
    20ea:	09 95       	icall
    20ec:	c8 0f       	add	r28, r24
    20ee:	d9 1f       	adc	r29, r25
    20f0:	01 50       	subi	r16, 0x01	; 1
    20f2:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    20f4:	01 15       	cp	r16, r1
    20f6:	11 05       	cpc	r17, r1
    20f8:	71 f7       	brne	.-36     	; 0x20d6 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    20fa:	ce 01       	movw	r24, r28
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	df 90       	pop	r13
    210a:	cf 90       	pop	r12
    210c:	08 95       	ret

0000210e <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	7b 01       	movw	r14, r22
    2118:	8c 01       	movw	r16, r24
{
  if (howbig == 0) {
    211a:	61 15       	cp	r22, r1
    211c:	71 05       	cpc	r23, r1
    211e:	81 05       	cpc	r24, r1
    2120:	91 05       	cpc	r25, r1
    2122:	29 f4       	brne	.+10     	; 0x212e <_Z6randoml+0x20>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	0b c0       	rjmp	.+22     	; 0x2144 <_Z6randoml+0x36>
    return 0;
  }
  return random() % howbig;
    212e:	0e 94 43 02 	call	0x486	; 0x486 <random>
    2132:	a8 01       	movw	r20, r16
    2134:	97 01       	movw	r18, r14
    2136:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <__divmodsi4>
    213a:	ac 01       	movw	r20, r24
    213c:	cb 01       	movw	r24, r22
    213e:	da 01       	movw	r26, r20
    2140:	9c 01       	movw	r18, r24
    2142:	ad 01       	movw	r20, r26
}
    2144:	b9 01       	movw	r22, r18
    2146:	ca 01       	movw	r24, r20
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	08 95       	ret

00002152 <main>:
#include <Arduino.h>

int main(void)
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
{
	init();
    2156:	0e 94 74 11 	call	0x22e8	; 0x22e8 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    215a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    215e:	c3 e8       	ldi	r28, 0x83	; 131
    2160:	de e0       	ldi	r29, 0x0E	; 14
#endif
	
	setup();
    
	for (;;) {
		loop();
    2162:	0e 94 3d 0b 	call	0x167a	; 0x167a <loop>
		if (serialEventRun) serialEventRun();
    2166:	20 97       	sbiw	r28, 0x00	; 0
    2168:	e1 f3       	breq	.-8      	; 0x2162 <main+0x10>
    216a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_Z14serialEventRunv>
    216e:	f9 cf       	rjmp	.-14     	; 0x2162 <main+0x10>

00002170 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    2170:	0e 94 98 01 	call	0x330	; 0x330 <free>
} 
    2174:	08 95       	ret

00002176 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2176:	1f 92       	push	r1
    2178:	0f 92       	push	r0
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	0f 92       	push	r0
    217e:	11 24       	eor	r1, r1
    2180:	2f 93       	push	r18
    2182:	3f 93       	push	r19
    2184:	8f 93       	push	r24
    2186:	9f 93       	push	r25
    2188:	af 93       	push	r26
    218a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    218c:	80 91 39 04 	lds	r24, 0x0439
    2190:	90 91 3a 04 	lds	r25, 0x043A
    2194:	a0 91 3b 04 	lds	r26, 0x043B
    2198:	b0 91 3c 04 	lds	r27, 0x043C
	unsigned char f = timer0_fract;
    219c:	30 91 3d 04 	lds	r19, 0x043D

	m += MILLIS_INC;
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	a1 1d       	adc	r26, r1
    21a4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    21a6:	23 2f       	mov	r18, r19
    21a8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    21aa:	2d 37       	cpi	r18, 0x7D	; 125
    21ac:	20 f0       	brcs	.+8      	; 0x21b6 <__vector_16+0x40>
		f -= FRACT_MAX;
    21ae:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	a1 1d       	adc	r26, r1
    21b4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    21b6:	20 93 3d 04 	sts	0x043D, r18
	timer0_millis = m;
    21ba:	80 93 39 04 	sts	0x0439, r24
    21be:	90 93 3a 04 	sts	0x043A, r25
    21c2:	a0 93 3b 04 	sts	0x043B, r26
    21c6:	b0 93 3c 04 	sts	0x043C, r27
	timer0_overflow_count++;
    21ca:	80 91 35 04 	lds	r24, 0x0435
    21ce:	90 91 36 04 	lds	r25, 0x0436
    21d2:	a0 91 37 04 	lds	r26, 0x0437
    21d6:	b0 91 38 04 	lds	r27, 0x0438
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	a1 1d       	adc	r26, r1
    21de:	b1 1d       	adc	r27, r1
    21e0:	80 93 35 04 	sts	0x0435, r24
    21e4:	90 93 36 04 	sts	0x0436, r25
    21e8:	a0 93 37 04 	sts	0x0437, r26
    21ec:	b0 93 38 04 	sts	0x0438, r27
}
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2206:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2208:	f8 94       	cli
	m = timer0_millis;
    220a:	20 91 39 04 	lds	r18, 0x0439
    220e:	30 91 3a 04 	lds	r19, 0x043A
    2212:	40 91 3b 04 	lds	r20, 0x043B
    2216:	50 91 3c 04 	lds	r21, 0x043C
	SREG = oldSREG;
    221a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    221c:	b9 01       	movw	r22, r18
    221e:	ca 01       	movw	r24, r20
    2220:	08 95       	ret

00002222 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2226:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    2228:	f8 94       	cli
	m = timer0_overflow_count;
    222a:	80 91 35 04 	lds	r24, 0x0435
    222e:	90 91 36 04 	lds	r25, 0x0436
    2232:	a0 91 37 04 	lds	r26, 0x0437
    2236:	b0 91 38 04 	lds	r27, 0x0438
#if defined(TCNT0)
	t = TCNT0;
    223a:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    223c:	a8 9b       	sbis	0x15, 0	; 21
    223e:	05 c0       	rjmp	.+10     	; 0x224a <delay+0x28>
    2240:	6f 3f       	cpi	r22, 0xFF	; 255
    2242:	19 f0       	breq	.+6      	; 0x224a <delay+0x28>
		m++;
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	a1 1d       	adc	r26, r1
    2248:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    224a:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    224c:	ba 2f       	mov	r27, r26
    224e:	a9 2f       	mov	r26, r25
    2250:	98 2f       	mov	r25, r24
    2252:	88 27       	eor	r24, r24
    2254:	86 0f       	add	r24, r22
    2256:	91 1d       	adc	r25, r1
    2258:	a1 1d       	adc	r26, r1
    225a:	b1 1d       	adc	r27, r1
    225c:	62 e0       	ldi	r22, 0x02	; 2
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	aa 1f       	adc	r26, r26
    2264:	bb 1f       	adc	r27, r27
    2266:	6a 95       	dec	r22
    2268:	d1 f7       	brne	.-12     	; 0x225e <delay+0x3c>
    226a:	bc 01       	movw	r22, r24
    226c:	2d c0       	rjmp	.+90     	; 0x22c8 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    226e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    2270:	f8 94       	cli
	m = timer0_overflow_count;
    2272:	80 91 35 04 	lds	r24, 0x0435
    2276:	90 91 36 04 	lds	r25, 0x0436
    227a:	a0 91 37 04 	lds	r26, 0x0437
    227e:	b0 91 38 04 	lds	r27, 0x0438
#if defined(TCNT0)
	t = TCNT0;
    2282:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2284:	a8 9b       	sbis	0x15, 0	; 21
    2286:	05 c0       	rjmp	.+10     	; 0x2292 <delay+0x70>
    2288:	ef 3f       	cpi	r30, 0xFF	; 255
    228a:	19 f0       	breq	.+6      	; 0x2292 <delay+0x70>
		m++;
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	a1 1d       	adc	r26, r1
    2290:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2292:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    2294:	ba 2f       	mov	r27, r26
    2296:	a9 2f       	mov	r26, r25
    2298:	98 2f       	mov	r25, r24
    229a:	88 27       	eor	r24, r24
    229c:	8e 0f       	add	r24, r30
    229e:	91 1d       	adc	r25, r1
    22a0:	a1 1d       	adc	r26, r1
    22a2:	b1 1d       	adc	r27, r1
    22a4:	e2 e0       	ldi	r30, 0x02	; 2
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	aa 1f       	adc	r26, r26
    22ac:	bb 1f       	adc	r27, r27
    22ae:	ea 95       	dec	r30
    22b0:	d1 f7       	brne	.-12     	; 0x22a6 <delay+0x84>
    22b2:	86 1b       	sub	r24, r22
    22b4:	97 0b       	sbc	r25, r23
    22b6:	88 5e       	subi	r24, 0xE8	; 232
    22b8:	93 40       	sbci	r25, 0x03	; 3
    22ba:	c8 f2       	brcs	.-78     	; 0x226e <delay+0x4c>
			ms--;
    22bc:	21 50       	subi	r18, 0x01	; 1
    22be:	30 40       	sbci	r19, 0x00	; 0
    22c0:	40 40       	sbci	r20, 0x00	; 0
    22c2:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    22c4:	68 51       	subi	r22, 0x18	; 24
    22c6:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    22c8:	21 15       	cp	r18, r1
    22ca:	31 05       	cpc	r19, r1
    22cc:	41 05       	cpc	r20, r1
    22ce:	51 05       	cpc	r21, r1
    22d0:	71 f6       	brne	.-100    	; 0x226e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    22d2:	08 95       	ret

000022d4 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	39 f0       	breq	.+14     	; 0x22e6 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    22e0:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <delayMicroseconds+0xe>
    22e6:	08 95       	ret

000022e8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    22e8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    22ea:	84 b5       	in	r24, 0x24	; 36
    22ec:	82 60       	ori	r24, 0x02	; 2
    22ee:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    22f0:	84 b5       	in	r24, 0x24	; 36
    22f2:	81 60       	ori	r24, 0x01	; 1
    22f4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    22f6:	85 b5       	in	r24, 0x25	; 37
    22f8:	82 60       	ori	r24, 0x02	; 2
    22fa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    22fc:	85 b5       	in	r24, 0x25	; 37
    22fe:	81 60       	ori	r24, 0x01	; 1
    2300:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2302:	ee e6       	ldi	r30, 0x6E	; 110
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	81 60       	ori	r24, 0x01	; 1
    230a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    230c:	e1 e8       	ldi	r30, 0x81	; 129
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2312:	80 81       	ld	r24, Z
    2314:	82 60       	ori	r24, 0x02	; 2
    2316:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2318:	80 81       	ld	r24, Z
    231a:	81 60       	ori	r24, 0x01	; 1
    231c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    231e:	e0 e8       	ldi	r30, 0x80	; 128
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	81 60       	ori	r24, 0x01	; 1
    2326:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2328:	e1 eb       	ldi	r30, 0xB1	; 177
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	84 60       	ori	r24, 0x04	; 4
    2330:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2332:	e0 eb       	ldi	r30, 0xB0	; 176
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	81 60       	ori	r24, 0x01	; 1
    233a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    233c:	ea e7       	ldi	r30, 0x7A	; 122
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	84 60       	ori	r24, 0x04	; 4
    2344:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2346:	80 81       	ld	r24, Z
    2348:	82 60       	ori	r24, 0x02	; 2
    234a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    234c:	80 81       	ld	r24, Z
    234e:	81 60       	ori	r24, 0x01	; 1
    2350:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2352:	80 81       	ld	r24, Z
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2358:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    235c:	08 95       	ret

0000235e <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    235e:	80 93 e0 01 	sts	0x01E0, r24
}
    2362:	08 95       	ret

00002364 <analogRead>:

int analogRead(uint8_t pin)
{
    2364:	98 2f       	mov	r25, r24
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2366:	8e 30       	cpi	r24, 0x0E	; 14
    2368:	08 f0       	brcs	.+2      	; 0x236c <analogRead+0x8>
    236a:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    236c:	97 70       	andi	r25, 0x07	; 7
    236e:	80 91 e0 01 	lds	r24, 0x01E0
    2372:	82 95       	swap	r24
    2374:	88 0f       	add	r24, r24
    2376:	88 0f       	add	r24, r24
    2378:	80 7c       	andi	r24, 0xC0	; 192
    237a:	89 2b       	or	r24, r25
    237c:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2380:	80 91 7a 00 	lds	r24, 0x007A
    2384:	80 64       	ori	r24, 0x40	; 64
    2386:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    238a:	80 91 7a 00 	lds	r24, 0x007A
    238e:	86 fd       	sbrc	r24, 6
    2390:	fc cf       	rjmp	.-8      	; 0x238a <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2392:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2396:	40 91 79 00 	lds	r20, 0x0079
    239a:	94 2f       	mov	r25, r20
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	28 2b       	or	r18, r24
    23a2:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    23a4:	c9 01       	movw	r24, r18
    23a6:	08 95       	ret

000023a8 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    23a8:	48 2f       	mov	r20, r24
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	ca 01       	movw	r24, r20
    23ae:	86 5a       	subi	r24, 0xA6	; 166
    23b0:	9e 4f       	sbci	r25, 0xFE	; 254
    23b2:	fc 01       	movw	r30, r24
    23b4:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    23b6:	4a 5b       	subi	r20, 0xBA	; 186
    23b8:	5e 4f       	sbci	r21, 0xFE	; 254
    23ba:	fa 01       	movw	r30, r20
    23bc:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    23be:	88 23       	and	r24, r24
    23c0:	c1 f0       	breq	.+48     	; 0x23f2 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    23c2:	e8 2f       	mov	r30, r24
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	e8 5d       	subi	r30, 0xD8	; 216
    23cc:	fe 4f       	sbci	r31, 0xFE	; 254
    23ce:	a5 91       	lpm	r26, Z+
    23d0:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    23d2:	66 23       	and	r22, r22
    23d4:	41 f4       	brne	.+16     	; 0x23e6 <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    23d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23d8:	f8 94       	cli
		*reg &= ~bit;
    23da:	8c 91       	ld	r24, X
    23dc:	20 95       	com	r18
    23de:	82 23       	and	r24, r18
    23e0:	8c 93       	st	X, r24
		SREG = oldSREG;
    23e2:	9f bf       	out	0x3f, r25	; 63
    23e4:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    23e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23e8:	f8 94       	cli
		*reg |= bit;
    23ea:	8c 91       	ld	r24, X
    23ec:	82 2b       	or	r24, r18
    23ee:	8c 93       	st	X, r24
		SREG = oldSREG;
    23f0:	9f bf       	out	0x3f, r25	; 63
    23f2:	08 95       	ret

000023f4 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    23f4:	48 2f       	mov	r20, r24
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	ca 01       	movw	r24, r20
    23fa:	82 59       	subi	r24, 0x92	; 146
    23fc:	9e 4f       	sbci	r25, 0xFE	; 254
    23fe:	fc 01       	movw	r30, r24
    2400:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2402:	ca 01       	movw	r24, r20
    2404:	86 5a       	subi	r24, 0xA6	; 166
    2406:	9e 4f       	sbci	r25, 0xFE	; 254
    2408:	fc 01       	movw	r30, r24
    240a:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    240c:	4a 5b       	subi	r20, 0xBA	; 186
    240e:	5e 4f       	sbci	r21, 0xFE	; 254
    2410:	fa 01       	movw	r30, r20
    2412:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2414:	33 23       	and	r19, r19
    2416:	09 f4       	brne	.+2      	; 0x241a <digitalWrite+0x26>
    2418:	40 c0       	rjmp	.+128    	; 0x249a <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    241a:	22 23       	and	r18, r18
    241c:	51 f1       	breq	.+84     	; 0x2472 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    241e:	23 30       	cpi	r18, 0x03	; 3
    2420:	71 f0       	breq	.+28     	; 0x243e <digitalWrite+0x4a>
    2422:	24 30       	cpi	r18, 0x04	; 4
    2424:	28 f4       	brcc	.+10     	; 0x2430 <digitalWrite+0x3c>
    2426:	21 30       	cpi	r18, 0x01	; 1
    2428:	a1 f0       	breq	.+40     	; 0x2452 <digitalWrite+0x5e>
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	11 f5       	brne	.+68     	; 0x2472 <digitalWrite+0x7e>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <digitalWrite+0x64>
    2430:	26 30       	cpi	r18, 0x06	; 6
    2432:	b1 f0       	breq	.+44     	; 0x2460 <digitalWrite+0x6c>
    2434:	27 30       	cpi	r18, 0x07	; 7
    2436:	c1 f0       	breq	.+48     	; 0x2468 <digitalWrite+0x74>
    2438:	24 30       	cpi	r18, 0x04	; 4
    243a:	d9 f4       	brne	.+54     	; 0x2472 <digitalWrite+0x7e>
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    243e:	80 91 80 00 	lds	r24, 0x0080
    2442:	8f 77       	andi	r24, 0x7F	; 127
    2444:	03 c0       	rjmp	.+6      	; 0x244c <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2446:	80 91 80 00 	lds	r24, 0x0080
    244a:	8f 7d       	andi	r24, 0xDF	; 223
    244c:	80 93 80 00 	sts	0x0080, r24
    2450:	10 c0       	rjmp	.+32     	; 0x2472 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2452:	84 b5       	in	r24, 0x24	; 36
    2454:	8f 77       	andi	r24, 0x7F	; 127
    2456:	02 c0       	rjmp	.+4      	; 0x245c <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2458:	84 b5       	in	r24, 0x24	; 36
    245a:	8f 7d       	andi	r24, 0xDF	; 223
    245c:	84 bd       	out	0x24, r24	; 36
    245e:	09 c0       	rjmp	.+18     	; 0x2472 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2460:	80 91 b0 00 	lds	r24, 0x00B0
    2464:	8f 77       	andi	r24, 0x7F	; 127
    2466:	03 c0       	rjmp	.+6      	; 0x246e <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2468:	80 91 b0 00 	lds	r24, 0x00B0
    246c:	8f 7d       	andi	r24, 0xDF	; 223
    246e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    2472:	e3 2f       	mov	r30, r19
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	ee 0f       	add	r30, r30
    2478:	ff 1f       	adc	r31, r31
    247a:	ee 5c       	subi	r30, 0xCE	; 206
    247c:	fe 4f       	sbci	r31, 0xFE	; 254
    247e:	a5 91       	lpm	r26, Z+
    2480:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    2482:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2484:	f8 94       	cli

	if (val == LOW) {
    2486:	66 23       	and	r22, r22
    2488:	21 f4       	brne	.+8      	; 0x2492 <digitalWrite+0x9e>
		*out &= ~bit;
    248a:	8c 91       	ld	r24, X
    248c:	90 95       	com	r25
    248e:	89 23       	and	r24, r25
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    2492:	8c 91       	ld	r24, X
    2494:	89 2b       	or	r24, r25
    2496:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2498:	2f bf       	out	0x3f, r18	; 63
    249a:	08 95       	ret

0000249c <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    249c:	68 2f       	mov	r22, r24
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	cb 01       	movw	r24, r22
    24a2:	82 59       	subi	r24, 0x92	; 146
    24a4:	9e 4f       	sbci	r25, 0xFE	; 254
    24a6:	fc 01       	movw	r30, r24
    24a8:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    24aa:	cb 01       	movw	r24, r22
    24ac:	86 5a       	subi	r24, 0xA6	; 166
    24ae:	9e 4f       	sbci	r25, 0xFE	; 254
    24b0:	fc 01       	movw	r30, r24
    24b2:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    24b4:	6a 5b       	subi	r22, 0xBA	; 186
    24b6:	7e 4f       	sbci	r23, 0xFE	; 254
    24b8:	fb 01       	movw	r30, r22
    24ba:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    24bc:	99 23       	and	r25, r25
    24be:	19 f4       	brne	.+6      	; 0x24c6 <digitalRead+0x2a>
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	3c c0       	rjmp	.+120    	; 0x253e <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    24c6:	22 23       	and	r18, r18
    24c8:	51 f1       	breq	.+84     	; 0x251e <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    24ca:	23 30       	cpi	r18, 0x03	; 3
    24cc:	71 f0       	breq	.+28     	; 0x24ea <digitalRead+0x4e>
    24ce:	24 30       	cpi	r18, 0x04	; 4
    24d0:	28 f4       	brcc	.+10     	; 0x24dc <digitalRead+0x40>
    24d2:	21 30       	cpi	r18, 0x01	; 1
    24d4:	a1 f0       	breq	.+40     	; 0x24fe <digitalRead+0x62>
    24d6:	22 30       	cpi	r18, 0x02	; 2
    24d8:	11 f5       	brne	.+68     	; 0x251e <digitalRead+0x82>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <digitalRead+0x68>
    24dc:	26 30       	cpi	r18, 0x06	; 6
    24de:	b1 f0       	breq	.+44     	; 0x250c <digitalRead+0x70>
    24e0:	27 30       	cpi	r18, 0x07	; 7
    24e2:	c1 f0       	breq	.+48     	; 0x2514 <digitalRead+0x78>
    24e4:	24 30       	cpi	r18, 0x04	; 4
    24e6:	d9 f4       	brne	.+54     	; 0x251e <digitalRead+0x82>
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24ea:	80 91 80 00 	lds	r24, 0x0080
    24ee:	8f 77       	andi	r24, 0x7F	; 127
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24f2:	80 91 80 00 	lds	r24, 0x0080
    24f6:	8f 7d       	andi	r24, 0xDF	; 223
    24f8:	80 93 80 00 	sts	0x0080, r24
    24fc:	10 c0       	rjmp	.+32     	; 0x251e <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24fe:	84 b5       	in	r24, 0x24	; 36
    2500:	8f 77       	andi	r24, 0x7F	; 127
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2504:	84 b5       	in	r24, 0x24	; 36
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	84 bd       	out	0x24, r24	; 36
    250a:	09 c0       	rjmp	.+18     	; 0x251e <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    250c:	80 91 b0 00 	lds	r24, 0x00B0
    2510:	8f 77       	andi	r24, 0x7F	; 127
    2512:	03 c0       	rjmp	.+6      	; 0x251a <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2514:	80 91 b0 00 	lds	r24, 0x00B0
    2518:	8f 7d       	andi	r24, 0xDF	; 223
    251a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    251e:	89 2f       	mov	r24, r25
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	84 5c       	subi	r24, 0xC4	; 196
    2528:	9e 4f       	sbci	r25, 0xFE	; 254
    252a:	fc 01       	movw	r30, r24
    252c:	a5 91       	lpm	r26, Z+
    252e:	b4 91       	lpm	r27, Z+
    2530:	8c 91       	ld	r24, X
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	84 23       	and	r24, r20
    2538:	11 f0       	breq	.+4      	; 0x253e <digitalRead+0xa2>
    253a:	21 e0       	ldi	r18, 0x01	; 1
    253c:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    253e:	c9 01       	movw	r24, r18
    2540:	08 95       	ret

00002542 <__fixsfsi>:
    2542:	04 d0       	rcall	.+8      	; 0x254c <__fixunssfsi>
    2544:	68 94       	set
    2546:	b1 11       	cpse	r27, r1
    2548:	90 c0       	rjmp	.+288    	; 0x266a <__fp_szero>
    254a:	08 95       	ret

0000254c <__fixunssfsi>:
    254c:	73 d0       	rcall	.+230    	; 0x2634 <__fp_splitA>
    254e:	88 f0       	brcs	.+34     	; 0x2572 <__fixunssfsi+0x26>
    2550:	9f 57       	subi	r25, 0x7F	; 127
    2552:	90 f0       	brcs	.+36     	; 0x2578 <__fixunssfsi+0x2c>
    2554:	b9 2f       	mov	r27, r25
    2556:	99 27       	eor	r25, r25
    2558:	b7 51       	subi	r27, 0x17	; 23
    255a:	a0 f0       	brcs	.+40     	; 0x2584 <__fixunssfsi+0x38>
    255c:	d1 f0       	breq	.+52     	; 0x2592 <__fixunssfsi+0x46>
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	88 1f       	adc	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	1a f0       	brmi	.+6      	; 0x256e <__fixunssfsi+0x22>
    2568:	ba 95       	dec	r27
    256a:	c9 f7       	brne	.-14     	; 0x255e <__fixunssfsi+0x12>
    256c:	12 c0       	rjmp	.+36     	; 0x2592 <__fixunssfsi+0x46>
    256e:	b1 30       	cpi	r27, 0x01	; 1
    2570:	81 f0       	breq	.+32     	; 0x2592 <__fixunssfsi+0x46>
    2572:	7a d0       	rcall	.+244    	; 0x2668 <__fp_zero>
    2574:	b1 e0       	ldi	r27, 0x01	; 1
    2576:	08 95       	ret
    2578:	77 c0       	rjmp	.+238    	; 0x2668 <__fp_zero>
    257a:	67 2f       	mov	r22, r23
    257c:	78 2f       	mov	r23, r24
    257e:	88 27       	eor	r24, r24
    2580:	b8 5f       	subi	r27, 0xF8	; 248
    2582:	39 f0       	breq	.+14     	; 0x2592 <__fixunssfsi+0x46>
    2584:	b9 3f       	cpi	r27, 0xF9	; 249
    2586:	cc f3       	brlt	.-14     	; 0x257a <__fixunssfsi+0x2e>
    2588:	86 95       	lsr	r24
    258a:	77 95       	ror	r23
    258c:	67 95       	ror	r22
    258e:	b3 95       	inc	r27
    2590:	d9 f7       	brne	.-10     	; 0x2588 <__fixunssfsi+0x3c>
    2592:	3e f4       	brtc	.+14     	; 0x25a2 <__fixunssfsi+0x56>
    2594:	90 95       	com	r25
    2596:	80 95       	com	r24
    2598:	70 95       	com	r23
    259a:	61 95       	neg	r22
    259c:	7f 4f       	sbci	r23, 0xFF	; 255
    259e:	8f 4f       	sbci	r24, 0xFF	; 255
    25a0:	9f 4f       	sbci	r25, 0xFF	; 255
    25a2:	08 95       	ret

000025a4 <__floatunsisf>:
    25a4:	e8 94       	clt
    25a6:	09 c0       	rjmp	.+18     	; 0x25ba <__floatsisf+0x12>

000025a8 <__floatsisf>:
    25a8:	97 fb       	bst	r25, 7
    25aa:	3e f4       	brtc	.+14     	; 0x25ba <__floatsisf+0x12>
    25ac:	90 95       	com	r25
    25ae:	80 95       	com	r24
    25b0:	70 95       	com	r23
    25b2:	61 95       	neg	r22
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	8f 4f       	sbci	r24, 0xFF	; 255
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	99 23       	and	r25, r25
    25bc:	a9 f0       	breq	.+42     	; 0x25e8 <__floatsisf+0x40>
    25be:	f9 2f       	mov	r31, r25
    25c0:	96 e9       	ldi	r25, 0x96	; 150
    25c2:	bb 27       	eor	r27, r27
    25c4:	93 95       	inc	r25
    25c6:	f6 95       	lsr	r31
    25c8:	87 95       	ror	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	b7 95       	ror	r27
    25d0:	f1 11       	cpse	r31, r1
    25d2:	f8 cf       	rjmp	.-16     	; 0x25c4 <__floatsisf+0x1c>
    25d4:	fa f4       	brpl	.+62     	; 0x2614 <__floatsisf+0x6c>
    25d6:	bb 0f       	add	r27, r27
    25d8:	11 f4       	brne	.+4      	; 0x25de <__floatsisf+0x36>
    25da:	60 ff       	sbrs	r22, 0
    25dc:	1b c0       	rjmp	.+54     	; 0x2614 <__floatsisf+0x6c>
    25de:	6f 5f       	subi	r22, 0xFF	; 255
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	8f 4f       	sbci	r24, 0xFF	; 255
    25e4:	9f 4f       	sbci	r25, 0xFF	; 255
    25e6:	16 c0       	rjmp	.+44     	; 0x2614 <__floatsisf+0x6c>
    25e8:	88 23       	and	r24, r24
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <__floatsisf+0x48>
    25ec:	96 e9       	ldi	r25, 0x96	; 150
    25ee:	11 c0       	rjmp	.+34     	; 0x2612 <__floatsisf+0x6a>
    25f0:	77 23       	and	r23, r23
    25f2:	21 f0       	breq	.+8      	; 0x25fc <__floatsisf+0x54>
    25f4:	9e e8       	ldi	r25, 0x8E	; 142
    25f6:	87 2f       	mov	r24, r23
    25f8:	76 2f       	mov	r23, r22
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <__floatsisf+0x5e>
    25fc:	66 23       	and	r22, r22
    25fe:	71 f0       	breq	.+28     	; 0x261c <__floatsisf+0x74>
    2600:	96 e8       	ldi	r25, 0x86	; 134
    2602:	86 2f       	mov	r24, r22
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	2a f0       	brmi	.+10     	; 0x2614 <__floatsisf+0x6c>
    260a:	9a 95       	dec	r25
    260c:	66 0f       	add	r22, r22
    260e:	77 1f       	adc	r23, r23
    2610:	88 1f       	adc	r24, r24
    2612:	da f7       	brpl	.-10     	; 0x260a <__floatsisf+0x62>
    2614:	88 0f       	add	r24, r24
    2616:	96 95       	lsr	r25
    2618:	87 95       	ror	r24
    261a:	97 f9       	bld	r25, 7
    261c:	08 95       	ret

0000261e <__fp_nan>:
    261e:	9f ef       	ldi	r25, 0xFF	; 255
    2620:	80 ec       	ldi	r24, 0xC0	; 192
    2622:	08 95       	ret

00002624 <__fp_split3>:
    2624:	57 fd       	sbrc	r21, 7
    2626:	90 58       	subi	r25, 0x80	; 128
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	59 f0       	breq	.+22     	; 0x2644 <__fp_splitA+0x10>
    262e:	5f 3f       	cpi	r21, 0xFF	; 255
    2630:	71 f0       	breq	.+28     	; 0x264e <__fp_splitA+0x1a>
    2632:	47 95       	ror	r20

00002634 <__fp_splitA>:
    2634:	88 0f       	add	r24, r24
    2636:	97 fb       	bst	r25, 7
    2638:	99 1f       	adc	r25, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <__fp_splitA+0x20>
    263c:	9f 3f       	cpi	r25, 0xFF	; 255
    263e:	79 f0       	breq	.+30     	; 0x265e <__fp_splitA+0x2a>
    2640:	87 95       	ror	r24
    2642:	08 95       	ret
    2644:	12 16       	cp	r1, r18
    2646:	13 06       	cpc	r1, r19
    2648:	14 06       	cpc	r1, r20
    264a:	55 1f       	adc	r21, r21
    264c:	f2 cf       	rjmp	.-28     	; 0x2632 <__fp_split3+0xe>
    264e:	46 95       	lsr	r20
    2650:	f1 df       	rcall	.-30     	; 0x2634 <__fp_splitA>
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <__fp_splitA+0x30>
    2654:	16 16       	cp	r1, r22
    2656:	17 06       	cpc	r1, r23
    2658:	18 06       	cpc	r1, r24
    265a:	99 1f       	adc	r25, r25
    265c:	f1 cf       	rjmp	.-30     	; 0x2640 <__fp_splitA+0xc>
    265e:	86 95       	lsr	r24
    2660:	71 05       	cpc	r23, r1
    2662:	61 05       	cpc	r22, r1
    2664:	08 94       	sec
    2666:	08 95       	ret

00002668 <__fp_zero>:
    2668:	e8 94       	clt

0000266a <__fp_szero>:
    266a:	bb 27       	eor	r27, r27
    266c:	66 27       	eor	r22, r22
    266e:	77 27       	eor	r23, r23
    2670:	cb 01       	movw	r24, r22
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret
    2676:	11 f4       	brne	.+4      	; 0x267c <__fp_szero+0x12>
    2678:	0e f4       	brtc	.+2      	; 0x267c <__fp_szero+0x12>
    267a:	d1 cf       	rjmp	.-94     	; 0x261e <__fp_nan>
    267c:	4a c0       	rjmp	.+148    	; 0x2712 <__fp_mpack>

0000267e <sqrt>:
    267e:	da df       	rcall	.-76     	; 0x2634 <__fp_splitA>
    2680:	d0 f3       	brcs	.-12     	; 0x2676 <__fp_szero+0xc>
    2682:	99 23       	and	r25, r25
    2684:	d9 f3       	breq	.-10     	; 0x267c <__fp_szero+0x12>
    2686:	ce f3       	brts	.-14     	; 0x267a <__fp_szero+0x10>
    2688:	9f 57       	subi	r25, 0x7F	; 127
    268a:	55 0b       	sbc	r21, r21
    268c:	87 ff       	sbrs	r24, 7
    268e:	51 d0       	rcall	.+162    	; 0x2732 <__fp_norm2>
    2690:	56 95       	lsr	r21
    2692:	97 95       	ror	r25
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	20 f4       	brcc	.+8      	; 0x26a0 <sqrt+0x22>
    2698:	66 0f       	add	r22, r22
    269a:	77 1f       	adc	r23, r23
    269c:	88 1f       	adc	r24, r24
    269e:	bb 1f       	adc	r27, r27
    26a0:	1f 93       	push	r17
    26a2:	0f 93       	push	r16
    26a4:	00 24       	eor	r0, r0
    26a6:	90 01       	movw	r18, r0
    26a8:	a0 01       	movw	r20, r0
    26aa:	80 01       	movw	r16, r0
    26ac:	f0 01       	movw	r30, r0
    26ae:	a0 e8       	ldi	r26, 0x80	; 128
    26b0:	0e 0f       	add	r16, r30
    26b2:	1f 1f       	adc	r17, r31
    26b4:	0a 1e       	adc	r0, r26
    26b6:	51 1d       	adc	r21, r1
    26b8:	60 1b       	sub	r22, r16
    26ba:	71 0b       	sbc	r23, r17
    26bc:	80 09       	sbc	r24, r0
    26be:	b5 0b       	sbc	r27, r21
    26c0:	48 f4       	brcc	.+18     	; 0x26d4 <sqrt+0x56>
    26c2:	60 0f       	add	r22, r16
    26c4:	71 1f       	adc	r23, r17
    26c6:	80 1d       	adc	r24, r0
    26c8:	b5 1f       	adc	r27, r21
    26ca:	0e 1b       	sub	r16, r30
    26cc:	1f 0b       	sbc	r17, r31
    26ce:	0a 0a       	sbc	r0, r26
    26d0:	51 09       	sbc	r21, r1
    26d2:	07 c0       	rjmp	.+14     	; 0x26e2 <sqrt+0x64>
    26d4:	2e 0f       	add	r18, r30
    26d6:	3f 1f       	adc	r19, r31
    26d8:	4a 1f       	adc	r20, r26
    26da:	0e 0f       	add	r16, r30
    26dc:	1f 1f       	adc	r17, r31
    26de:	0a 1e       	adc	r0, r26
    26e0:	51 1d       	adc	r21, r1
    26e2:	66 0f       	add	r22, r22
    26e4:	77 1f       	adc	r23, r23
    26e6:	88 1f       	adc	r24, r24
    26e8:	bb 1f       	adc	r27, r27
    26ea:	a6 95       	lsr	r26
    26ec:	f7 95       	ror	r31
    26ee:	e7 95       	ror	r30
    26f0:	f8 f6       	brcc	.-66     	; 0x26b0 <sqrt+0x32>
    26f2:	06 17       	cp	r16, r22
    26f4:	17 07       	cpc	r17, r23
    26f6:	08 06       	cpc	r0, r24
    26f8:	5b 07       	cpc	r21, r27
    26fa:	21 1d       	adc	r18, r1
    26fc:	31 1d       	adc	r19, r1
    26fe:	41 1d       	adc	r20, r1
    2700:	0f 91       	pop	r16
    2702:	1f 91       	pop	r17
    2704:	b9 01       	movw	r22, r18
    2706:	84 2f       	mov	r24, r20
    2708:	91 58       	subi	r25, 0x81	; 129
    270a:	88 0f       	add	r24, r24
    270c:	96 95       	lsr	r25
    270e:	87 95       	ror	r24
    2710:	08 95       	ret

00002712 <__fp_mpack>:
    2712:	9f 3f       	cpi	r25, 0xFF	; 255
    2714:	49 f0       	breq	.+18     	; 0x2728 <__fp_mpack+0x16>
    2716:	91 50       	subi	r25, 0x01	; 1
    2718:	28 f4       	brcc	.+10     	; 0x2724 <__fp_mpack+0x12>
    271a:	86 95       	lsr	r24
    271c:	77 95       	ror	r23
    271e:	67 95       	ror	r22
    2720:	b7 95       	ror	r27
    2722:	9f 5f       	subi	r25, 0xFF	; 255
    2724:	80 38       	cpi	r24, 0x80	; 128
    2726:	9f 4f       	sbci	r25, 0xFF	; 255
    2728:	88 0f       	add	r24, r24
    272a:	96 95       	lsr	r25
    272c:	87 95       	ror	r24
    272e:	97 f9       	bld	r25, 7
    2730:	08 95       	ret

00002732 <__fp_norm2>:
    2732:	91 50       	subi	r25, 0x01	; 1
    2734:	50 40       	sbci	r21, 0x00	; 0
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	d2 f7       	brpl	.-12     	; 0x2732 <__fp_norm2>
    273e:	08 95       	ret

00002740 <__mulsi3>:
    2740:	62 9f       	mul	r22, r18
    2742:	d0 01       	movw	r26, r0
    2744:	73 9f       	mul	r23, r19
    2746:	f0 01       	movw	r30, r0
    2748:	82 9f       	mul	r24, r18
    274a:	e0 0d       	add	r30, r0
    274c:	f1 1d       	adc	r31, r1
    274e:	64 9f       	mul	r22, r20
    2750:	e0 0d       	add	r30, r0
    2752:	f1 1d       	adc	r31, r1
    2754:	92 9f       	mul	r25, r18
    2756:	f0 0d       	add	r31, r0
    2758:	83 9f       	mul	r24, r19
    275a:	f0 0d       	add	r31, r0
    275c:	74 9f       	mul	r23, r20
    275e:	f0 0d       	add	r31, r0
    2760:	65 9f       	mul	r22, r21
    2762:	f0 0d       	add	r31, r0
    2764:	99 27       	eor	r25, r25
    2766:	72 9f       	mul	r23, r18
    2768:	b0 0d       	add	r27, r0
    276a:	e1 1d       	adc	r30, r1
    276c:	f9 1f       	adc	r31, r25
    276e:	63 9f       	mul	r22, r19
    2770:	b0 0d       	add	r27, r0
    2772:	e1 1d       	adc	r30, r1
    2774:	f9 1f       	adc	r31, r25
    2776:	bd 01       	movw	r22, r26
    2778:	cf 01       	movw	r24, r30
    277a:	11 24       	eor	r1, r1
    277c:	08 95       	ret

0000277e <__divmodhi4>:
    277e:	97 fb       	bst	r25, 7
    2780:	09 2e       	mov	r0, r25
    2782:	07 26       	eor	r0, r23
    2784:	0a d0       	rcall	.+20     	; 0x279a <__divmodhi4_neg1>
    2786:	77 fd       	sbrc	r23, 7
    2788:	04 d0       	rcall	.+8      	; 0x2792 <__divmodhi4_neg2>
    278a:	49 d0       	rcall	.+146    	; 0x281e <__udivmodhi4>
    278c:	06 d0       	rcall	.+12     	; 0x279a <__divmodhi4_neg1>
    278e:	00 20       	and	r0, r0
    2790:	1a f4       	brpl	.+6      	; 0x2798 <__divmodhi4_exit>

00002792 <__divmodhi4_neg2>:
    2792:	70 95       	com	r23
    2794:	61 95       	neg	r22
    2796:	7f 4f       	sbci	r23, 0xFF	; 255

00002798 <__divmodhi4_exit>:
    2798:	08 95       	ret

0000279a <__divmodhi4_neg1>:
    279a:	f6 f7       	brtc	.-4      	; 0x2798 <__divmodhi4_exit>
    279c:	90 95       	com	r25
    279e:	81 95       	neg	r24
    27a0:	9f 4f       	sbci	r25, 0xFF	; 255
    27a2:	08 95       	ret

000027a4 <__udivmodsi4>:
    27a4:	a1 e2       	ldi	r26, 0x21	; 33
    27a6:	1a 2e       	mov	r1, r26
    27a8:	aa 1b       	sub	r26, r26
    27aa:	bb 1b       	sub	r27, r27
    27ac:	fd 01       	movw	r30, r26
    27ae:	0d c0       	rjmp	.+26     	; 0x27ca <__udivmodsi4_ep>

000027b0 <__udivmodsi4_loop>:
    27b0:	aa 1f       	adc	r26, r26
    27b2:	bb 1f       	adc	r27, r27
    27b4:	ee 1f       	adc	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	a2 17       	cp	r26, r18
    27ba:	b3 07       	cpc	r27, r19
    27bc:	e4 07       	cpc	r30, r20
    27be:	f5 07       	cpc	r31, r21
    27c0:	20 f0       	brcs	.+8      	; 0x27ca <__udivmodsi4_ep>
    27c2:	a2 1b       	sub	r26, r18
    27c4:	b3 0b       	sbc	r27, r19
    27c6:	e4 0b       	sbc	r30, r20
    27c8:	f5 0b       	sbc	r31, r21

000027ca <__udivmodsi4_ep>:
    27ca:	66 1f       	adc	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 1f       	adc	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	1a 94       	dec	r1
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <__udivmodsi4_loop>
    27d6:	60 95       	com	r22
    27d8:	70 95       	com	r23
    27da:	80 95       	com	r24
    27dc:	90 95       	com	r25
    27de:	9b 01       	movw	r18, r22
    27e0:	ac 01       	movw	r20, r24
    27e2:	bd 01       	movw	r22, r26
    27e4:	cf 01       	movw	r24, r30
    27e6:	08 95       	ret

000027e8 <__divmodsi4>:
    27e8:	97 fb       	bst	r25, 7
    27ea:	09 2e       	mov	r0, r25
    27ec:	05 26       	eor	r0, r21
    27ee:	0e d0       	rcall	.+28     	; 0x280c <__divmodsi4_neg1>
    27f0:	57 fd       	sbrc	r21, 7
    27f2:	04 d0       	rcall	.+8      	; 0x27fc <__divmodsi4_neg2>
    27f4:	d7 df       	rcall	.-82     	; 0x27a4 <__udivmodsi4>
    27f6:	0a d0       	rcall	.+20     	; 0x280c <__divmodsi4_neg1>
    27f8:	00 1c       	adc	r0, r0
    27fa:	38 f4       	brcc	.+14     	; 0x280a <__divmodsi4_exit>

000027fc <__divmodsi4_neg2>:
    27fc:	50 95       	com	r21
    27fe:	40 95       	com	r20
    2800:	30 95       	com	r19
    2802:	21 95       	neg	r18
    2804:	3f 4f       	sbci	r19, 0xFF	; 255
    2806:	4f 4f       	sbci	r20, 0xFF	; 255
    2808:	5f 4f       	sbci	r21, 0xFF	; 255

0000280a <__divmodsi4_exit>:
    280a:	08 95       	ret

0000280c <__divmodsi4_neg1>:
    280c:	f6 f7       	brtc	.-4      	; 0x280a <__divmodsi4_exit>
    280e:	90 95       	com	r25
    2810:	80 95       	com	r24
    2812:	70 95       	com	r23
    2814:	61 95       	neg	r22
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	8f 4f       	sbci	r24, 0xFF	; 255
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	08 95       	ret

0000281e <__udivmodhi4>:
    281e:	aa 1b       	sub	r26, r26
    2820:	bb 1b       	sub	r27, r27
    2822:	51 e1       	ldi	r21, 0x11	; 17
    2824:	07 c0       	rjmp	.+14     	; 0x2834 <__udivmodhi4_ep>

00002826 <__udivmodhi4_loop>:
    2826:	aa 1f       	adc	r26, r26
    2828:	bb 1f       	adc	r27, r27
    282a:	a6 17       	cp	r26, r22
    282c:	b7 07       	cpc	r27, r23
    282e:	10 f0       	brcs	.+4      	; 0x2834 <__udivmodhi4_ep>
    2830:	a6 1b       	sub	r26, r22
    2832:	b7 0b       	sbc	r27, r23

00002834 <__udivmodhi4_ep>:
    2834:	88 1f       	adc	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	5a 95       	dec	r21
    283a:	a9 f7       	brne	.-22     	; 0x2826 <__udivmodhi4_loop>
    283c:	80 95       	com	r24
    283e:	90 95       	com	r25
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	08 95       	ret

00002846 <__tablejump2__>:
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31

0000284a <__tablejump__>:
    284a:	05 90       	lpm	r0, Z+
    284c:	f4 91       	lpm	r31, Z+
    284e:	e0 2d       	mov	r30, r0
    2850:	09 94       	ijmp

00002852 <__prologue_saves__>:
    2852:	2f 92       	push	r2
    2854:	3f 92       	push	r3
    2856:	4f 92       	push	r4
    2858:	5f 92       	push	r5
    285a:	6f 92       	push	r6
    285c:	7f 92       	push	r7
    285e:	8f 92       	push	r8
    2860:	9f 92       	push	r9
    2862:	af 92       	push	r10
    2864:	bf 92       	push	r11
    2866:	cf 92       	push	r12
    2868:	df 92       	push	r13
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	ca 1b       	sub	r28, r26
    287c:	db 0b       	sbc	r29, r27
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	09 94       	ijmp

0000288a <__epilogue_restores__>:
    288a:	2a 88       	ldd	r2, Y+18	; 0x12
    288c:	39 88       	ldd	r3, Y+17	; 0x11
    288e:	48 88       	ldd	r4, Y+16	; 0x10
    2890:	5f 84       	ldd	r5, Y+15	; 0x0f
    2892:	6e 84       	ldd	r6, Y+14	; 0x0e
    2894:	7d 84       	ldd	r7, Y+13	; 0x0d
    2896:	8c 84       	ldd	r8, Y+12	; 0x0c
    2898:	9b 84       	ldd	r9, Y+11	; 0x0b
    289a:	aa 84       	ldd	r10, Y+10	; 0x0a
    289c:	b9 84       	ldd	r11, Y+9	; 0x09
    289e:	c8 84       	ldd	r12, Y+8	; 0x08
    28a0:	df 80       	ldd	r13, Y+7	; 0x07
    28a2:	ee 80       	ldd	r14, Y+6	; 0x06
    28a4:	fd 80       	ldd	r15, Y+5	; 0x05
    28a6:	0c 81       	ldd	r16, Y+4	; 0x04
    28a8:	1b 81       	ldd	r17, Y+3	; 0x03
    28aa:	aa 81       	ldd	r26, Y+2	; 0x02
    28ac:	b9 81       	ldd	r27, Y+1	; 0x01
    28ae:	ce 0f       	add	r28, r30
    28b0:	d1 1d       	adc	r29, r1
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	ed 01       	movw	r28, r26
    28be:	08 95       	ret

000028c0 <__do_global_dtors>:
    28c0:	11 e0       	ldi	r17, 0x01	; 1
    28c2:	c6 e8       	ldi	r28, 0x86	; 134
    28c4:	d1 e0       	ldi	r29, 0x01	; 1
    28c6:	04 c0       	rjmp	.+8      	; 0x28d0 <.do_global_dtors_start>

000028c8 <.do_global_dtors_loop>:
    28c8:	fe 01       	movw	r30, r28
    28ca:	0e 94 25 14 	call	0x284a	; 0x284a <__tablejump__>
    28ce:	22 96       	adiw	r28, 0x02	; 2

000028d0 <.do_global_dtors_start>:
    28d0:	c8 38       	cpi	r28, 0x88	; 136
    28d2:	d1 07       	cpc	r29, r17
    28d4:	c9 f7       	brne	.-14     	; 0x28c8 <.do_global_dtors_loop>
    28d6:	f8 94       	cli

000028d8 <__stop_program>:
    28d8:	ff cf       	rjmp	.-2      	; 0x28d8 <__stop_program>
