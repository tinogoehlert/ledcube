
ledcube_firm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00001eda  00001f6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  008001fe  008001fe  0000206c  2**0
                  ALLOC
  3 .debug_aranges 00000748  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000114d  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007248  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000187e  00000000  00000000  0000ab49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040d6  00000000  00000000  0000c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cf0  00000000  00000000  000104a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d47  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004336  00000000  00000000  00012ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006f8  00000000  00000000  0001720d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	this->_milli  = 100;
}

Effect::~Effect() {

}
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>

}

LedSquare::~LedSquare() {
	// TODO Auto-generated destructor stub
}
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  TCCR1B = _BV(WGM13);        // set mode 8: phase and frequency correct pwm, stop the timer
  setPeriod(microseconds);
}


void TimerOne::setPeriod(long microseconds)		// AR modified for atomic access
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
}

LedCube::~LedCube()
{

}
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_13>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_18>
      4c:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	07 02       	muls	r16, r23
      c4:	84 0c       	add	r8, r4

000000c6 <__ctors_end>:
      c6:	14 02       	muls	r17, r20

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ea ed       	ldi	r30, 0xDA	; 218
      dc:	fe e1       	ldi	r31, 0x1E	; 30
      de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
      e4:	ae 3f       	cpi	r26, 0xFE	; 254
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
      ea:	12 e0       	ldi	r17, 0x02	; 2
      ec:	ae ef       	ldi	r26, 0xFE	; 254
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a4 3e       	cpi	r26, 0xE4	; 228
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c6 ec       	ldi	r28, 0xC6	; 198
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <.do_global_ctors_start>

00000102 <.do_global_ctors_loop>:
     102:	22 97       	sbiw	r28, 0x02	; 2
     104:	fe 01       	movw	r30, r28
     106:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__tablejump__>

0000010a <.do_global_ctors_start>:
     10a:	c2 3c       	cpi	r28, 0xC2	; 194
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <.do_global_ctors_loop>
     110:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <main>
     114:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <malloc>:
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	bc 01       	movw	r22, r24
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	91 05       	cpc	r25, r1
     126:	10 f4       	brcc	.+4      	; 0x12c <malloc+0x10>
     128:	62 e0       	ldi	r22, 0x02	; 2
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	a0 91 e2 02 	lds	r26, 0x02E2
     130:	b0 91 e3 02 	lds	r27, 0x02E3
     134:	ed 01       	movw	r28, r26
     136:	e0 e0       	ldi	r30, 0x00	; 0
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	21 c0       	rjmp	.+66     	; 0x182 <malloc+0x66>
     140:	88 81       	ld	r24, Y
     142:	99 81       	ldd	r25, Y+1	; 0x01
     144:	86 17       	cp	r24, r22
     146:	97 07       	cpc	r25, r23
     148:	69 f4       	brne	.+26     	; 0x164 <malloc+0x48>
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	30 97       	sbiw	r30, 0x00	; 0
     150:	19 f0       	breq	.+6      	; 0x158 <malloc+0x3c>
     152:	93 83       	std	Z+3, r25	; 0x03
     154:	82 83       	std	Z+2, r24	; 0x02
     156:	04 c0       	rjmp	.+8      	; 0x160 <malloc+0x44>
     158:	90 93 e3 02 	sts	0x02E3, r25
     15c:	80 93 e2 02 	sts	0x02E2, r24
     160:	fe 01       	movw	r30, r28
     162:	34 c0       	rjmp	.+104    	; 0x1cc <malloc+0xb0>
     164:	68 17       	cp	r22, r24
     166:	79 07       	cpc	r23, r25
     168:	38 f4       	brcc	.+14     	; 0x178 <malloc+0x5c>
     16a:	41 15       	cp	r20, r1
     16c:	51 05       	cpc	r21, r1
     16e:	19 f0       	breq	.+6      	; 0x176 <malloc+0x5a>
     170:	84 17       	cp	r24, r20
     172:	95 07       	cpc	r25, r21
     174:	08 f4       	brcc	.+2      	; 0x178 <malloc+0x5c>
     176:	ac 01       	movw	r20, r24
     178:	fe 01       	movw	r30, r28
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	9b 81       	ldd	r25, Y+3	; 0x03
     17e:	9c 01       	movw	r18, r24
     180:	e9 01       	movw	r28, r18
     182:	20 97       	sbiw	r28, 0x00	; 0
     184:	e9 f6       	brne	.-70     	; 0x140 <malloc+0x24>
     186:	41 15       	cp	r20, r1
     188:	51 05       	cpc	r21, r1
     18a:	a9 f1       	breq	.+106    	; 0x1f6 <malloc+0xda>
     18c:	ca 01       	movw	r24, r20
     18e:	86 1b       	sub	r24, r22
     190:	97 0b       	sbc	r25, r23
     192:	04 97       	sbiw	r24, 0x04	; 4
     194:	08 f4       	brcc	.+2      	; 0x198 <malloc+0x7c>
     196:	ba 01       	movw	r22, r20
     198:	e0 e0       	ldi	r30, 0x00	; 0
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	2a c0       	rjmp	.+84     	; 0x1f2 <malloc+0xd6>
     19e:	8d 91       	ld	r24, X+
     1a0:	9c 91       	ld	r25, X
     1a2:	11 97       	sbiw	r26, 0x01	; 1
     1a4:	84 17       	cp	r24, r20
     1a6:	95 07       	cpc	r25, r21
     1a8:	f9 f4       	brne	.+62     	; 0x1e8 <malloc+0xcc>
     1aa:	64 17       	cp	r22, r20
     1ac:	75 07       	cpc	r23, r21
     1ae:	81 f4       	brne	.+32     	; 0x1d0 <malloc+0xb4>
     1b0:	12 96       	adiw	r26, 0x02	; 2
     1b2:	8d 91       	ld	r24, X+
     1b4:	9c 91       	ld	r25, X
     1b6:	13 97       	sbiw	r26, 0x03	; 3
     1b8:	30 97       	sbiw	r30, 0x00	; 0
     1ba:	19 f0       	breq	.+6      	; 0x1c2 <malloc+0xa6>
     1bc:	93 83       	std	Z+3, r25	; 0x03
     1be:	82 83       	std	Z+2, r24	; 0x02
     1c0:	04 c0       	rjmp	.+8      	; 0x1ca <malloc+0xae>
     1c2:	90 93 e3 02 	sts	0x02E3, r25
     1c6:	80 93 e2 02 	sts	0x02E2, r24
     1ca:	fd 01       	movw	r30, r26
     1cc:	32 96       	adiw	r30, 0x02	; 2
     1ce:	4c c0       	rjmp	.+152    	; 0x268 <malloc+0x14c>
     1d0:	ca 01       	movw	r24, r20
     1d2:	86 1b       	sub	r24, r22
     1d4:	97 0b       	sbc	r25, r23
     1d6:	fd 01       	movw	r30, r26
     1d8:	e8 0f       	add	r30, r24
     1da:	f9 1f       	adc	r31, r25
     1dc:	61 93       	st	Z+, r22
     1de:	71 93       	st	Z+, r23
     1e0:	02 97       	sbiw	r24, 0x02	; 2
     1e2:	8d 93       	st	X+, r24
     1e4:	9c 93       	st	X, r25
     1e6:	40 c0       	rjmp	.+128    	; 0x268 <malloc+0x14c>
     1e8:	fd 01       	movw	r30, r26
     1ea:	82 81       	ldd	r24, Z+2	; 0x02
     1ec:	93 81       	ldd	r25, Z+3	; 0x03
     1ee:	9c 01       	movw	r18, r24
     1f0:	d9 01       	movw	r26, r18
     1f2:	10 97       	sbiw	r26, 0x00	; 0
     1f4:	a1 f6       	brne	.-88     	; 0x19e <malloc+0x82>
     1f6:	80 91 e0 02 	lds	r24, 0x02E0
     1fa:	90 91 e1 02 	lds	r25, 0x02E1
     1fe:	89 2b       	or	r24, r25
     200:	41 f4       	brne	.+16     	; 0x212 <malloc+0xf6>
     202:	80 91 08 01 	lds	r24, 0x0108
     206:	90 91 09 01 	lds	r25, 0x0109
     20a:	90 93 e1 02 	sts	0x02E1, r25
     20e:	80 93 e0 02 	sts	0x02E0, r24
     212:	40 91 0a 01 	lds	r20, 0x010A
     216:	50 91 0b 01 	lds	r21, 0x010B
     21a:	41 15       	cp	r20, r1
     21c:	51 05       	cpc	r21, r1
     21e:	41 f4       	brne	.+16     	; 0x230 <malloc+0x114>
     220:	4d b7       	in	r20, 0x3d	; 61
     222:	5e b7       	in	r21, 0x3e	; 62
     224:	80 91 06 01 	lds	r24, 0x0106
     228:	90 91 07 01 	lds	r25, 0x0107
     22c:	48 1b       	sub	r20, r24
     22e:	59 0b       	sbc	r21, r25
     230:	20 91 e0 02 	lds	r18, 0x02E0
     234:	30 91 e1 02 	lds	r19, 0x02E1
     238:	ca 01       	movw	r24, r20
     23a:	82 1b       	sub	r24, r18
     23c:	93 0b       	sbc	r25, r19
     23e:	86 17       	cp	r24, r22
     240:	97 07       	cpc	r25, r23
     242:	80 f0       	brcs	.+32     	; 0x264 <malloc+0x148>
     244:	ab 01       	movw	r20, r22
     246:	4e 5f       	subi	r20, 0xFE	; 254
     248:	5f 4f       	sbci	r21, 0xFF	; 255
     24a:	84 17       	cp	r24, r20
     24c:	95 07       	cpc	r25, r21
     24e:	50 f0       	brcs	.+20     	; 0x264 <malloc+0x148>
     250:	42 0f       	add	r20, r18
     252:	53 1f       	adc	r21, r19
     254:	50 93 e1 02 	sts	0x02E1, r21
     258:	40 93 e0 02 	sts	0x02E0, r20
     25c:	f9 01       	movw	r30, r18
     25e:	61 93       	st	Z+, r22
     260:	71 93       	st	Z+, r23
     262:	02 c0       	rjmp	.+4      	; 0x268 <malloc+0x14c>
     264:	e0 e0       	ldi	r30, 0x00	; 0
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	cf 01       	movw	r24, r30
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <free>:
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 97       	sbiw	r24, 0x00	; 0
     276:	09 f4       	brne	.+2      	; 0x27a <free+0xa>
     278:	50 c0       	rjmp	.+160    	; 0x31a <free+0xaa>
     27a:	ec 01       	movw	r28, r24
     27c:	22 97       	sbiw	r28, 0x02	; 2
     27e:	1b 82       	std	Y+3, r1	; 0x03
     280:	1a 82       	std	Y+2, r1	; 0x02
     282:	a0 91 e2 02 	lds	r26, 0x02E2
     286:	b0 91 e3 02 	lds	r27, 0x02E3
     28a:	10 97       	sbiw	r26, 0x00	; 0
     28c:	09 f1       	breq	.+66     	; 0x2d0 <free+0x60>
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	ac 17       	cp	r26, r28
     294:	bd 07       	cpc	r27, r29
     296:	08 f1       	brcs	.+66     	; 0x2da <free+0x6a>
     298:	bb 83       	std	Y+3, r27	; 0x03
     29a:	aa 83       	std	Y+2, r26	; 0x02
     29c:	fe 01       	movw	r30, r28
     29e:	21 91       	ld	r18, Z+
     2a0:	31 91       	ld	r19, Z+
     2a2:	e2 0f       	add	r30, r18
     2a4:	f3 1f       	adc	r31, r19
     2a6:	ae 17       	cp	r26, r30
     2a8:	bf 07       	cpc	r27, r31
     2aa:	79 f4       	brne	.+30     	; 0x2ca <free+0x5a>
     2ac:	8d 91       	ld	r24, X+
     2ae:	9c 91       	ld	r25, X
     2b0:	11 97       	sbiw	r26, 0x01	; 1
     2b2:	28 0f       	add	r18, r24
     2b4:	39 1f       	adc	r19, r25
     2b6:	2e 5f       	subi	r18, 0xFE	; 254
     2b8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ba:	39 83       	std	Y+1, r19	; 0x01
     2bc:	28 83       	st	Y, r18
     2be:	12 96       	adiw	r26, 0x02	; 2
     2c0:	8d 91       	ld	r24, X+
     2c2:	9c 91       	ld	r25, X
     2c4:	13 97       	sbiw	r26, 0x03	; 3
     2c6:	9b 83       	std	Y+3, r25	; 0x03
     2c8:	8a 83       	std	Y+2, r24	; 0x02
     2ca:	41 15       	cp	r20, r1
     2cc:	51 05       	cpc	r21, r1
     2ce:	71 f4       	brne	.+28     	; 0x2ec <free+0x7c>
     2d0:	d0 93 e3 02 	sts	0x02E3, r29
     2d4:	c0 93 e2 02 	sts	0x02E2, r28
     2d8:	20 c0       	rjmp	.+64     	; 0x31a <free+0xaa>
     2da:	12 96       	adiw	r26, 0x02	; 2
     2dc:	8d 91       	ld	r24, X+
     2de:	9c 91       	ld	r25, X
     2e0:	13 97       	sbiw	r26, 0x03	; 3
     2e2:	ad 01       	movw	r20, r26
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	11 f0       	breq	.+4      	; 0x2ec <free+0x7c>
     2e8:	dc 01       	movw	r26, r24
     2ea:	d3 cf       	rjmp	.-90     	; 0x292 <free+0x22>
     2ec:	fa 01       	movw	r30, r20
     2ee:	d3 83       	std	Z+3, r29	; 0x03
     2f0:	c2 83       	std	Z+2, r28	; 0x02
     2f2:	21 91       	ld	r18, Z+
     2f4:	31 91       	ld	r19, Z+
     2f6:	e2 0f       	add	r30, r18
     2f8:	f3 1f       	adc	r31, r19
     2fa:	ce 17       	cp	r28, r30
     2fc:	df 07       	cpc	r29, r31
     2fe:	69 f4       	brne	.+26     	; 0x31a <free+0xaa>
     300:	88 81       	ld	r24, Y
     302:	99 81       	ldd	r25, Y+1	; 0x01
     304:	28 0f       	add	r18, r24
     306:	39 1f       	adc	r19, r25
     308:	2e 5f       	subi	r18, 0xFE	; 254
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	fa 01       	movw	r30, r20
     30e:	31 83       	std	Z+1, r19	; 0x01
     310:	20 83       	st	Z, r18
     312:	8a 81       	ldd	r24, Y+2	; 0x02
     314:	9b 81       	ldd	r25, Y+3	; 0x03
     316:	93 83       	std	Z+3, r25	; 0x03
     318:	82 83       	std	Z+2, r24	; 0x02
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <do_random>:
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e6 e9       	ldi	r30, 0x96	; 150
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__prologue_saves__+0x10>
     32c:	ec 01       	movw	r28, r24
     32e:	a8 80       	ld	r10, Y
     330:	b9 80       	ldd	r11, Y+1	; 0x01
     332:	ca 80       	ldd	r12, Y+2	; 0x02
     334:	db 80       	ldd	r13, Y+3	; 0x03
     336:	a1 14       	cp	r10, r1
     338:	b1 04       	cpc	r11, r1
     33a:	c1 04       	cpc	r12, r1
     33c:	d1 04       	cpc	r13, r1
     33e:	41 f4       	brne	.+16     	; 0x350 <do_random+0x30>
     340:	84 e2       	ldi	r24, 0x24	; 36
     342:	a8 2e       	mov	r10, r24
     344:	89 ed       	ldi	r24, 0xD9	; 217
     346:	b8 2e       	mov	r11, r24
     348:	8b e5       	ldi	r24, 0x5B	; 91
     34a:	c8 2e       	mov	r12, r24
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	d8 2e       	mov	r13, r24
     350:	c6 01       	movw	r24, r12
     352:	b5 01       	movw	r22, r10
     354:	2d e1       	ldi	r18, 0x1D	; 29
     356:	33 ef       	ldi	r19, 0xF3	; 243
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__divmodsi4>
     360:	27 ea       	ldi	r18, 0xA7	; 167
     362:	31 e4       	ldi	r19, 0x41	; 65
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__mulsi3>
     36c:	7b 01       	movw	r14, r22
     36e:	8c 01       	movw	r16, r24
     370:	c6 01       	movw	r24, r12
     372:	b5 01       	movw	r22, r10
     374:	2d e1       	ldi	r18, 0x1D	; 29
     376:	33 ef       	ldi	r19, 0xF3	; 243
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__divmodsi4>
     380:	ca 01       	movw	r24, r20
     382:	b9 01       	movw	r22, r18
     384:	2c ee       	ldi	r18, 0xEC	; 236
     386:	34 ef       	ldi	r19, 0xF4	; 244
     388:	4f ef       	ldi	r20, 0xFF	; 255
     38a:	5f ef       	ldi	r21, 0xFF	; 255
     38c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__mulsi3>
     390:	6e 0d       	add	r22, r14
     392:	7f 1d       	adc	r23, r15
     394:	80 1f       	adc	r24, r16
     396:	91 1f       	adc	r25, r17
     398:	97 ff       	sbrs	r25, 7
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <do_random+0x84>
     39c:	61 50       	subi	r22, 0x01	; 1
     39e:	70 40       	sbci	r23, 0x00	; 0
     3a0:	80 40       	sbci	r24, 0x00	; 0
     3a2:	90 48       	sbci	r25, 0x80	; 128
     3a4:	68 83       	st	Y, r22
     3a6:	79 83       	std	Y+1, r23	; 0x01
     3a8:	8a 83       	std	Y+2, r24	; 0x02
     3aa:	9b 83       	std	Y+3, r25	; 0x03
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	5f 77       	andi	r21, 0x7F	; 127
     3b2:	b9 01       	movw	r22, r18
     3b4:	ca 01       	movw	r24, r20
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	ea e0       	ldi	r30, 0x0A	; 10
     3bc:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__epilogue_restores__+0x10>

000003c0 <random_r>:
     3c0:	0e 94 90 01 	call	0x320	; 0x320 <do_random>
     3c4:	08 95       	ret

000003c6 <random>:
     3c6:	8c e0       	ldi	r24, 0x0C	; 12
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 90 01 	call	0x320	; 0x320 <do_random>
     3ce:	08 95       	ret

000003d0 <srandom>:
     3d0:	60 93 0c 01 	sts	0x010C, r22
     3d4:	70 93 0d 01 	sts	0x010D, r23
     3d8:	80 93 0e 01 	sts	0x010E, r24
     3dc:	90 93 0f 01 	sts	0x010F, r25
     3e0:	08 95       	ret

000003e2 <strcpy>:
     3e2:	fb 01       	movw	r30, r22
     3e4:	dc 01       	movw	r26, r24
     3e6:	01 90       	ld	r0, Z+
     3e8:	0d 92       	st	X+, r0
     3ea:	00 20       	and	r0, r0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <strcpy+0x4>
     3ee:	08 95       	ret

000003f0 <_ZN6EffectD1Ev>:

Effect::Effect() {
	this->_milli  = 100;
}

Effect::~Effect() {
     3f0:	fc 01       	movw	r30, r24
     3f2:	8a ee       	ldi	r24, 0xEA	; 234
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	80 83       	st	Z, r24

}
     3fa:	08 95       	ret

000003fc <_ZN6Effect6setmodEh>:

void Effect::setmod(byte mod)
     3fc:	fc 01       	movw	r30, r24
			break;
		case MOD_SLIDE:
			_framecount = 5;
			break;
		default:
			_framecount = 5;
     3fe:	85 e0       	ldi	r24, 0x05	; 5
     400:	86 83       	std	Z+6, r24	; 0x06
			break;
		}

	this->_mod = mod;
     402:	64 83       	std	Z+4, r22	; 0x04
}
     404:	08 95       	ret

00000406 <_ZN6Effect8setspeedEj>:
	LedCube::setpixel(x,y,z);
}

void Effect::setspeed(unsigned int t)
{
	this->_milli  = t;
     406:	fc 01       	movw	r30, r24
     408:	73 83       	std	Z+3, r23	; 0x03
     40a:	62 83       	std	Z+2, r22	; 0x02
}
     40c:	08 95       	ret

0000040e <_GLOBAL__I_ascii_map>:
		{0,1,2,3,4}
};

Effect Effect1;

Effect::Effect() {
     40e:	8a ee       	ldi	r24, 0xEA	; 234
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	90 93 ff 01 	sts	0x01FF, r25
     416:	80 93 fe 01 	sts	0x01FE, r24
	this->_milli  = 100;
     41a:	84 e6       	ldi	r24, 0x64	; 100
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	90 93 01 02 	sts	0x0201, r25
     422:	80 93 00 02 	sts	0x0200, r24
			LedCube::setpixel(x,y,z);
			if(this->_milli > 1)
				delay(this->_milli/2);
	}
	delay(this->_milli);
}
     426:	08 95       	ret

00000428 <_GLOBAL__D_ascii_map>:

Effect::Effect() {
	this->_milli  = 100;
}

Effect::~Effect() {
     428:	8a ee       	ldi	r24, 0xEA	; 234
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	90 93 ff 01 	sts	0x01FF, r25
     430:	80 93 fe 01 	sts	0x01FE, r24
			LedCube::setpixel(x,y,z);
			if(this->_milli > 1)
				delay(this->_milli/2);
	}
	delay(this->_milli);
}
     434:	08 95       	ret

00000436 <_ZN6Effect17renderfunc_rotateEm>:
				x--;
			}
		}
}

void Effect::renderfunc_rotate(uint32_t matrix)
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	7a 01       	movw	r14, r20
     450:	8b 01       	movw	r16, r22
{
	byte i = 0,z=4;
	switch(_frame){
     452:	fc 01       	movw	r30, r24
     454:	85 81       	ldd	r24, Z+5	; 0x05
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	09 f4       	brne	.+2      	; 0x45c <_ZN6Effect17renderfunc_rotateEm+0x26>
     45a:	73 c1       	rjmp	.+742    	; 0x742 <_ZN6Effect17renderfunc_rotateEm+0x30c>
     45c:	83 30       	cpi	r24, 0x03	; 3
     45e:	30 f4       	brcc	.+12     	; 0x46c <_ZN6Effect17renderfunc_rotateEm+0x36>
     460:	88 23       	and	r24, r24
     462:	59 f0       	breq	.+22     	; 0x47a <_ZN6Effect17renderfunc_rotateEm+0x44>
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	09 f0       	breq	.+2      	; 0x46a <_ZN6Effect17renderfunc_rotateEm+0x34>
     468:	81 c3       	rjmp	.+1794   	; 0xb6c <__stack+0x26d>
     46a:	b9 c0       	rjmp	.+370    	; 0x5de <_ZN6Effect17renderfunc_rotateEm+0x1a8>
     46c:	83 30       	cpi	r24, 0x03	; 3
     46e:	09 f4       	brne	.+2      	; 0x472 <_ZN6Effect17renderfunc_rotateEm+0x3c>
     470:	1a c2       	rjmp	.+1076   	; 0x8a6 <_ZN6Effect17renderfunc_rotateEm+0x470>
     472:	84 30       	cpi	r24, 0x04	; 4
     474:	09 f0       	breq	.+2      	; 0x478 <_ZN6Effect17renderfunc_rotateEm+0x42>
     476:	7a c3       	rjmp	.+1780   	; 0xb6c <__stack+0x26d>
     478:	c8 c2       	rjmp	.+1424   	; 0xa0a <__stack+0x10b>
     47a:	f4 e0       	ldi	r31, 0x04	; 4
     47c:	df 2e       	mov	r13, r31
     47e:	c0 e0       	ldi	r28, 0x00	; 0
     480:	d0 e0       	ldi	r29, 0x00	; 0
	case 0:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     482:	e1 e0       	ldi	r30, 0x01	; 1
     484:	8e 2e       	mov	r8, r30
     486:	91 2c       	mov	r9, r1
     488:	a1 2c       	mov	r10, r1
     48a:	b1 2c       	mov	r11, r1
}

void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
     48c:	cc 2e       	mov	r12, r28
     48e:	9e 01       	movw	r18, r28
     490:	2c 5f       	subi	r18, 0xFC	; 252
     492:	3f 4f       	sbci	r19, 0xFF	; 255
	case 0:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     494:	d5 01       	movw	r26, r10
     496:	c4 01       	movw	r24, r8
     498:	02 2e       	mov	r0, r18
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <_ZN6Effect17renderfunc_rotateEm+0x6e>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	aa 1f       	adc	r26, r26
     4a2:	bb 1f       	adc	r27, r27
     4a4:	0a 94       	dec	r0
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <_ZN6Effect17renderfunc_rotateEm+0x66>
     4a8:	8e 21       	and	r24, r14
     4aa:	9f 21       	and	r25, r15
     4ac:	a0 23       	and	r26, r16
     4ae:	b1 23       	and	r27, r17
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <_ZN6Effect17renderfunc_rotateEm+0x84>
     4b2:	b6 95       	lsr	r27
     4b4:	a7 95       	ror	r26
     4b6:	97 95       	ror	r25
     4b8:	87 95       	ror	r24
     4ba:	2a 95       	dec	r18
     4bc:	d2 f7       	brpl	.-12     	; 0x4b2 <_ZN6Effect17renderfunc_rotateEm+0x7c>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	a1 05       	cpc	r26, r1
     4c2:	b1 05       	cpc	r27, r1
     4c4:	29 f4       	brne	.+10     	; 0x4d0 <_ZN6Effect17renderfunc_rotateEm+0x9a>
					LedCube::setpixel(4,2,z);
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	4d 2d       	mov	r20, r13
     4cc:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     4d0:	9e 01       	movw	r18, r28
     4d2:	2d 5f       	subi	r18, 0xFD	; 253
     4d4:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     4d6:	d5 01       	movw	r26, r10
     4d8:	c4 01       	movw	r24, r8
     4da:	02 2e       	mov	r0, r18
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <_ZN6Effect17renderfunc_rotateEm+0xb0>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	aa 1f       	adc	r26, r26
     4e4:	bb 1f       	adc	r27, r27
     4e6:	0a 94       	dec	r0
     4e8:	d2 f7       	brpl	.-12     	; 0x4de <_ZN6Effect17renderfunc_rotateEm+0xa8>
     4ea:	8e 21       	and	r24, r14
     4ec:	9f 21       	and	r25, r15
     4ee:	a0 23       	and	r26, r16
     4f0:	b1 23       	and	r27, r17
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <_ZN6Effect17renderfunc_rotateEm+0xc6>
     4f4:	b6 95       	lsr	r27
     4f6:	a7 95       	ror	r26
     4f8:	97 95       	ror	r25
     4fa:	87 95       	ror	r24
     4fc:	2a 95       	dec	r18
     4fe:	d2 f7       	brpl	.-12     	; 0x4f4 <_ZN6Effect17renderfunc_rotateEm+0xbe>
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 05       	cpc	r26, r1
     504:	b1 05       	cpc	r27, r1
     506:	29 f4       	brne	.+10     	; 0x512 <_ZN6Effect17renderfunc_rotateEm+0xdc>
					LedCube::setpixel(3,2,z);
     508:	83 e0       	ldi	r24, 0x03	; 3
     50a:	62 e0       	ldi	r22, 0x02	; 2
     50c:	4d 2d       	mov	r20, r13
     50e:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     512:	9e 01       	movw	r18, r28
     514:	2e 5f       	subi	r18, 0xFE	; 254
     516:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     518:	d5 01       	movw	r26, r10
     51a:	c4 01       	movw	r24, r8
     51c:	02 2e       	mov	r0, r18
     51e:	04 c0       	rjmp	.+8      	; 0x528 <_ZN6Effect17renderfunc_rotateEm+0xf2>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	aa 1f       	adc	r26, r26
     526:	bb 1f       	adc	r27, r27
     528:	0a 94       	dec	r0
     52a:	d2 f7       	brpl	.-12     	; 0x520 <_ZN6Effect17renderfunc_rotateEm+0xea>
     52c:	8e 21       	and	r24, r14
     52e:	9f 21       	and	r25, r15
     530:	a0 23       	and	r26, r16
     532:	b1 23       	and	r27, r17
     534:	04 c0       	rjmp	.+8      	; 0x53e <_ZN6Effect17renderfunc_rotateEm+0x108>
     536:	b6 95       	lsr	r27
     538:	a7 95       	ror	r26
     53a:	97 95       	ror	r25
     53c:	87 95       	ror	r24
     53e:	2a 95       	dec	r18
     540:	d2 f7       	brpl	.-12     	; 0x536 <_ZN6Effect17renderfunc_rotateEm+0x100>
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	a1 05       	cpc	r26, r1
     546:	b1 05       	cpc	r27, r1
     548:	29 f4       	brne	.+10     	; 0x554 <_ZN6Effect17renderfunc_rotateEm+0x11e>
					LedCube::setpixel(2,2,z);
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	62 e0       	ldi	r22, 0x02	; 2
     54e:	4d 2d       	mov	r20, r13
     550:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     554:	9e 01       	movw	r18, r28
     556:	2f 5f       	subi	r18, 0xFF	; 255
     558:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     55a:	d5 01       	movw	r26, r10
     55c:	c4 01       	movw	r24, r8
     55e:	02 2e       	mov	r0, r18
     560:	04 c0       	rjmp	.+8      	; 0x56a <_ZN6Effect17renderfunc_rotateEm+0x134>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	aa 1f       	adc	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	0a 94       	dec	r0
     56c:	d2 f7       	brpl	.-12     	; 0x562 <_ZN6Effect17renderfunc_rotateEm+0x12c>
     56e:	8e 21       	and	r24, r14
     570:	9f 21       	and	r25, r15
     572:	a0 23       	and	r26, r16
     574:	b1 23       	and	r27, r17
     576:	04 c0       	rjmp	.+8      	; 0x580 <_ZN6Effect17renderfunc_rotateEm+0x14a>
     578:	b6 95       	lsr	r27
     57a:	a7 95       	ror	r26
     57c:	97 95       	ror	r25
     57e:	87 95       	ror	r24
     580:	2a 95       	dec	r18
     582:	d2 f7       	brpl	.-12     	; 0x578 <_ZN6Effect17renderfunc_rotateEm+0x142>
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	a1 05       	cpc	r26, r1
     588:	b1 05       	cpc	r27, r1
     58a:	29 f4       	brne	.+10     	; 0x596 <_ZN6Effect17renderfunc_rotateEm+0x160>
					LedCube::setpixel(1,2,z);
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	62 e0       	ldi	r22, 0x02	; 2
     590:	4d 2d       	mov	r20, r13
     592:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     596:	d5 01       	movw	r26, r10
     598:	c4 01       	movw	r24, r8
     59a:	0c 2c       	mov	r0, r12
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <_ZN6Effect17renderfunc_rotateEm+0x170>
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	aa 1f       	adc	r26, r26
     5a4:	bb 1f       	adc	r27, r27
     5a6:	0a 94       	dec	r0
     5a8:	d2 f7       	brpl	.-12     	; 0x59e <_ZN6Effect17renderfunc_rotateEm+0x168>
     5aa:	8e 21       	and	r24, r14
     5ac:	9f 21       	and	r25, r15
     5ae:	a0 23       	and	r26, r16
     5b0:	b1 23       	and	r27, r17
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <_ZN6Effect17renderfunc_rotateEm+0x186>
     5b4:	b6 95       	lsr	r27
     5b6:	a7 95       	ror	r26
     5b8:	97 95       	ror	r25
     5ba:	87 95       	ror	r24
     5bc:	ca 94       	dec	r12
     5be:	d2 f7       	brpl	.-12     	; 0x5b4 <_ZN6Effect17renderfunc_rotateEm+0x17e>
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	a1 05       	cpc	r26, r1
     5c4:	b1 05       	cpc	r27, r1
     5c6:	29 f4       	brne	.+10     	; 0x5d2 <_ZN6Effect17renderfunc_rotateEm+0x19c>
					LedCube::setpixel(0,2,z);
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	4d 2d       	mov	r20, r13
     5ce:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     5d2:	25 96       	adiw	r28, 0x05	; 5
void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
	case 0:
		for(;i<CUBESIZE;i++,z--){
     5d4:	dd 20       	and	r13, r13
     5d6:	09 f4       	brne	.+2      	; 0x5da <_ZN6Effect17renderfunc_rotateEm+0x1a4>
     5d8:	c9 c2       	rjmp	.+1426   	; 0xb6c <__stack+0x26d>
     5da:	da 94       	dec	r13
     5dc:	57 cf       	rjmp	.-338    	; 0x48c <_ZN6Effect17renderfunc_rotateEm+0x56>
     5de:	74 e0       	ldi	r23, 0x04	; 4
     5e0:	d7 2e       	mov	r13, r23
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	86 2e       	mov	r8, r22
     5ea:	91 2c       	mov	r9, r1
     5ec:	a1 2c       	mov	r10, r1
     5ee:	b1 2c       	mov	r11, r1
void Effect::renderfunc_rotate(uint32_t matrix)
{
	byte i = 0,z=4;
	switch(_frame){
	case 0:
		for(;i<CUBESIZE;i++,z--){
     5f0:	cc 2e       	mov	r12, r28
     5f2:	9e 01       	movw	r18, r28
     5f4:	2c 5f       	subi	r18, 0xFC	; 252
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     5f8:	d5 01       	movw	r26, r10
     5fa:	c4 01       	movw	r24, r8
     5fc:	02 2e       	mov	r0, r18
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <_ZN6Effect17renderfunc_rotateEm+0x1d2>
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	aa 1f       	adc	r26, r26
     606:	bb 1f       	adc	r27, r27
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <_ZN6Effect17renderfunc_rotateEm+0x1ca>
     60c:	8e 21       	and	r24, r14
     60e:	9f 21       	and	r25, r15
     610:	a0 23       	and	r26, r16
     612:	b1 23       	and	r27, r17
     614:	04 c0       	rjmp	.+8      	; 0x61e <_ZN6Effect17renderfunc_rotateEm+0x1e8>
     616:	b6 95       	lsr	r27
     618:	a7 95       	ror	r26
     61a:	97 95       	ror	r25
     61c:	87 95       	ror	r24
     61e:	2a 95       	dec	r18
     620:	d2 f7       	brpl	.-12     	; 0x616 <_ZN6Effect17renderfunc_rotateEm+0x1e0>
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	a1 05       	cpc	r26, r1
     626:	b1 05       	cpc	r27, r1
     628:	29 f4       	brne	.+10     	; 0x634 <_ZN6Effect17renderfunc_rotateEm+0x1fe>
					LedCube::setpixel(4,4,z);
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	64 e0       	ldi	r22, 0x04	; 4
     62e:	4d 2d       	mov	r20, r13
     630:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     634:	9e 01       	movw	r18, r28
     636:	2d 5f       	subi	r18, 0xFD	; 253
     638:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     63a:	d5 01       	movw	r26, r10
     63c:	c4 01       	movw	r24, r8
     63e:	02 2e       	mov	r0, r18
     640:	04 c0       	rjmp	.+8      	; 0x64a <_ZN6Effect17renderfunc_rotateEm+0x214>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	aa 1f       	adc	r26, r26
     648:	bb 1f       	adc	r27, r27
     64a:	0a 94       	dec	r0
     64c:	d2 f7       	brpl	.-12     	; 0x642 <_ZN6Effect17renderfunc_rotateEm+0x20c>
     64e:	8e 21       	and	r24, r14
     650:	9f 21       	and	r25, r15
     652:	a0 23       	and	r26, r16
     654:	b1 23       	and	r27, r17
     656:	04 c0       	rjmp	.+8      	; 0x660 <_ZN6Effect17renderfunc_rotateEm+0x22a>
     658:	b6 95       	lsr	r27
     65a:	a7 95       	ror	r26
     65c:	97 95       	ror	r25
     65e:	87 95       	ror	r24
     660:	2a 95       	dec	r18
     662:	d2 f7       	brpl	.-12     	; 0x658 <_ZN6Effect17renderfunc_rotateEm+0x222>
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	a1 05       	cpc	r26, r1
     668:	b1 05       	cpc	r27, r1
     66a:	29 f4       	brne	.+10     	; 0x676 <_ZN6Effect17renderfunc_rotateEm+0x240>
					LedCube::setpixel(3,3,z);
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	4d 2d       	mov	r20, r13
     672:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     676:	9e 01       	movw	r18, r28
     678:	2e 5f       	subi	r18, 0xFE	; 254
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     67c:	d5 01       	movw	r26, r10
     67e:	c4 01       	movw	r24, r8
     680:	02 2e       	mov	r0, r18
     682:	04 c0       	rjmp	.+8      	; 0x68c <_ZN6Effect17renderfunc_rotateEm+0x256>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	aa 1f       	adc	r26, r26
     68a:	bb 1f       	adc	r27, r27
     68c:	0a 94       	dec	r0
     68e:	d2 f7       	brpl	.-12     	; 0x684 <_ZN6Effect17renderfunc_rotateEm+0x24e>
     690:	8e 21       	and	r24, r14
     692:	9f 21       	and	r25, r15
     694:	a0 23       	and	r26, r16
     696:	b1 23       	and	r27, r17
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <_ZN6Effect17renderfunc_rotateEm+0x26c>
     69a:	b6 95       	lsr	r27
     69c:	a7 95       	ror	r26
     69e:	97 95       	ror	r25
     6a0:	87 95       	ror	r24
     6a2:	2a 95       	dec	r18
     6a4:	d2 f7       	brpl	.-12     	; 0x69a <_ZN6Effect17renderfunc_rotateEm+0x264>
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	a1 05       	cpc	r26, r1
     6aa:	b1 05       	cpc	r27, r1
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <_ZN6Effect17renderfunc_rotateEm+0x282>
					LedCube::setpixel(2,2,z);
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	4d 2d       	mov	r20, r13
     6b4:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     6b8:	9e 01       	movw	r18, r28
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     6be:	d5 01       	movw	r26, r10
     6c0:	c4 01       	movw	r24, r8
     6c2:	02 2e       	mov	r0, r18
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <_ZN6Effect17renderfunc_rotateEm+0x298>
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	aa 1f       	adc	r26, r26
     6cc:	bb 1f       	adc	r27, r27
     6ce:	0a 94       	dec	r0
     6d0:	d2 f7       	brpl	.-12     	; 0x6c6 <_ZN6Effect17renderfunc_rotateEm+0x290>
     6d2:	8e 21       	and	r24, r14
     6d4:	9f 21       	and	r25, r15
     6d6:	a0 23       	and	r26, r16
     6d8:	b1 23       	and	r27, r17
     6da:	04 c0       	rjmp	.+8      	; 0x6e4 <_ZN6Effect17renderfunc_rotateEm+0x2ae>
     6dc:	b6 95       	lsr	r27
     6de:	a7 95       	ror	r26
     6e0:	97 95       	ror	r25
     6e2:	87 95       	ror	r24
     6e4:	2a 95       	dec	r18
     6e6:	d2 f7       	brpl	.-12     	; 0x6dc <_ZN6Effect17renderfunc_rotateEm+0x2a6>
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	a1 05       	cpc	r26, r1
     6ec:	b1 05       	cpc	r27, r1
     6ee:	29 f4       	brne	.+10     	; 0x6fa <_ZN6Effect17renderfunc_rotateEm+0x2c4>
					LedCube::setpixel(1,1,z);
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	4d 2d       	mov	r20, r13
     6f6:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     6fa:	d5 01       	movw	r26, r10
     6fc:	c4 01       	movw	r24, r8
     6fe:	0c 2c       	mov	r0, r12
     700:	04 c0       	rjmp	.+8      	; 0x70a <_ZN6Effect17renderfunc_rotateEm+0x2d4>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	aa 1f       	adc	r26, r26
     708:	bb 1f       	adc	r27, r27
     70a:	0a 94       	dec	r0
     70c:	d2 f7       	brpl	.-12     	; 0x702 <_ZN6Effect17renderfunc_rotateEm+0x2cc>
     70e:	8e 21       	and	r24, r14
     710:	9f 21       	and	r25, r15
     712:	a0 23       	and	r26, r16
     714:	b1 23       	and	r27, r17
     716:	04 c0       	rjmp	.+8      	; 0x720 <_ZN6Effect17renderfunc_rotateEm+0x2ea>
     718:	b6 95       	lsr	r27
     71a:	a7 95       	ror	r26
     71c:	97 95       	ror	r25
     71e:	87 95       	ror	r24
     720:	ca 94       	dec	r12
     722:	d2 f7       	brpl	.-12     	; 0x718 <_ZN6Effect17renderfunc_rotateEm+0x2e2>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 05       	cpc	r26, r1
     728:	b1 05       	cpc	r27, r1
     72a:	29 f4       	brne	.+10     	; 0x736 <_ZN6Effect17renderfunc_rotateEm+0x300>
					LedCube::setpixel(0,0,z);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	4d 2d       	mov	r20, r13
     732:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     736:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
     738:	dd 20       	and	r13, r13
     73a:	09 f4       	brne	.+2      	; 0x73e <_ZN6Effect17renderfunc_rotateEm+0x308>
     73c:	17 c2       	rjmp	.+1070   	; 0xb6c <__stack+0x26d>
     73e:	da 94       	dec	r13
     740:	57 cf       	rjmp	.-338    	; 0x5f0 <_ZN6Effect17renderfunc_rotateEm+0x1ba>
     742:	54 e0       	ldi	r21, 0x04	; 4
     744:	d5 2e       	mov	r13, r21
     746:	c0 e0       	ldi	r28, 0x00	; 0
     748:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	84 2e       	mov	r8, r20
     74e:	91 2c       	mov	r9, r1
     750:	a1 2c       	mov	r10, r1
     752:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,2,z);
			}
		break;
	case 1:
		for(;i<CUBESIZE;i++,z--){
     754:	cc 2e       	mov	r12, r28
     756:	9e 01       	movw	r18, r28
     758:	2c 5f       	subi	r18, 0xFC	; 252
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     75c:	d5 01       	movw	r26, r10
     75e:	c4 01       	movw	r24, r8
     760:	02 2e       	mov	r0, r18
     762:	04 c0       	rjmp	.+8      	; 0x76c <_ZN6Effect17renderfunc_rotateEm+0x336>
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	aa 1f       	adc	r26, r26
     76a:	bb 1f       	adc	r27, r27
     76c:	0a 94       	dec	r0
     76e:	d2 f7       	brpl	.-12     	; 0x764 <_ZN6Effect17renderfunc_rotateEm+0x32e>
     770:	8e 21       	and	r24, r14
     772:	9f 21       	and	r25, r15
     774:	a0 23       	and	r26, r16
     776:	b1 23       	and	r27, r17
     778:	04 c0       	rjmp	.+8      	; 0x782 <_ZN6Effect17renderfunc_rotateEm+0x34c>
     77a:	b6 95       	lsr	r27
     77c:	a7 95       	ror	r26
     77e:	97 95       	ror	r25
     780:	87 95       	ror	r24
     782:	2a 95       	dec	r18
     784:	d2 f7       	brpl	.-12     	; 0x77a <_ZN6Effect17renderfunc_rotateEm+0x344>
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	a1 05       	cpc	r26, r1
     78a:	b1 05       	cpc	r27, r1
     78c:	29 f4       	brne	.+10     	; 0x798 <_ZN6Effect17renderfunc_rotateEm+0x362>
					LedCube::setpixel(2,4,z);
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	4d 2d       	mov	r20, r13
     794:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     798:	9e 01       	movw	r18, r28
     79a:	2d 5f       	subi	r18, 0xFD	; 253
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     79e:	d5 01       	movw	r26, r10
     7a0:	c4 01       	movw	r24, r8
     7a2:	02 2e       	mov	r0, r18
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <_ZN6Effect17renderfunc_rotateEm+0x378>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	aa 1f       	adc	r26, r26
     7ac:	bb 1f       	adc	r27, r27
     7ae:	0a 94       	dec	r0
     7b0:	d2 f7       	brpl	.-12     	; 0x7a6 <_ZN6Effect17renderfunc_rotateEm+0x370>
     7b2:	8e 21       	and	r24, r14
     7b4:	9f 21       	and	r25, r15
     7b6:	a0 23       	and	r26, r16
     7b8:	b1 23       	and	r27, r17
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <_ZN6Effect17renderfunc_rotateEm+0x38e>
     7bc:	b6 95       	lsr	r27
     7be:	a7 95       	ror	r26
     7c0:	97 95       	ror	r25
     7c2:	87 95       	ror	r24
     7c4:	2a 95       	dec	r18
     7c6:	d2 f7       	brpl	.-12     	; 0x7bc <_ZN6Effect17renderfunc_rotateEm+0x386>
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	29 f4       	brne	.+10     	; 0x7da <_ZN6Effect17renderfunc_rotateEm+0x3a4>
					LedCube::setpixel(2,3,z);
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	63 e0       	ldi	r22, 0x03	; 3
     7d4:	4d 2d       	mov	r20, r13
     7d6:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     7da:	9e 01       	movw	r18, r28
     7dc:	2e 5f       	subi	r18, 0xFE	; 254
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     7e0:	d5 01       	movw	r26, r10
     7e2:	c4 01       	movw	r24, r8
     7e4:	02 2e       	mov	r0, r18
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <_ZN6Effect17renderfunc_rotateEm+0x3ba>
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	aa 1f       	adc	r26, r26
     7ee:	bb 1f       	adc	r27, r27
     7f0:	0a 94       	dec	r0
     7f2:	d2 f7       	brpl	.-12     	; 0x7e8 <_ZN6Effect17renderfunc_rotateEm+0x3b2>
     7f4:	8e 21       	and	r24, r14
     7f6:	9f 21       	and	r25, r15
     7f8:	a0 23       	and	r26, r16
     7fa:	b1 23       	and	r27, r17
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <_ZN6Effect17renderfunc_rotateEm+0x3d0>
     7fe:	b6 95       	lsr	r27
     800:	a7 95       	ror	r26
     802:	97 95       	ror	r25
     804:	87 95       	ror	r24
     806:	2a 95       	dec	r18
     808:	d2 f7       	brpl	.-12     	; 0x7fe <_ZN6Effect17renderfunc_rotateEm+0x3c8>
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	a1 05       	cpc	r26, r1
     80e:	b1 05       	cpc	r27, r1
     810:	29 f4       	brne	.+10     	; 0x81c <_ZN6Effect17renderfunc_rotateEm+0x3e6>
					LedCube::setpixel(2,2,z);
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	62 e0       	ldi	r22, 0x02	; 2
     816:	4d 2d       	mov	r20, r13
     818:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     81c:	9e 01       	movw	r18, r28
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     822:	d5 01       	movw	r26, r10
     824:	c4 01       	movw	r24, r8
     826:	02 2e       	mov	r0, r18
     828:	04 c0       	rjmp	.+8      	; 0x832 <_ZN6Effect17renderfunc_rotateEm+0x3fc>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	aa 1f       	adc	r26, r26
     830:	bb 1f       	adc	r27, r27
     832:	0a 94       	dec	r0
     834:	d2 f7       	brpl	.-12     	; 0x82a <_ZN6Effect17renderfunc_rotateEm+0x3f4>
     836:	8e 21       	and	r24, r14
     838:	9f 21       	and	r25, r15
     83a:	a0 23       	and	r26, r16
     83c:	b1 23       	and	r27, r17
     83e:	04 c0       	rjmp	.+8      	; 0x848 <_ZN6Effect17renderfunc_rotateEm+0x412>
     840:	b6 95       	lsr	r27
     842:	a7 95       	ror	r26
     844:	97 95       	ror	r25
     846:	87 95       	ror	r24
     848:	2a 95       	dec	r18
     84a:	d2 f7       	brpl	.-12     	; 0x840 <_ZN6Effect17renderfunc_rotateEm+0x40a>
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	a1 05       	cpc	r26, r1
     850:	b1 05       	cpc	r27, r1
     852:	29 f4       	brne	.+10     	; 0x85e <_ZN6Effect17renderfunc_rotateEm+0x428>
					LedCube::setpixel(2,1,z);
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	4d 2d       	mov	r20, r13
     85a:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     85e:	d5 01       	movw	r26, r10
     860:	c4 01       	movw	r24, r8
     862:	0c 2c       	mov	r0, r12
     864:	04 c0       	rjmp	.+8      	; 0x86e <_ZN6Effect17renderfunc_rotateEm+0x438>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	aa 1f       	adc	r26, r26
     86c:	bb 1f       	adc	r27, r27
     86e:	0a 94       	dec	r0
     870:	d2 f7       	brpl	.-12     	; 0x866 <_ZN6Effect17renderfunc_rotateEm+0x430>
     872:	8e 21       	and	r24, r14
     874:	9f 21       	and	r25, r15
     876:	a0 23       	and	r26, r16
     878:	b1 23       	and	r27, r17
     87a:	04 c0       	rjmp	.+8      	; 0x884 <_ZN6Effect17renderfunc_rotateEm+0x44e>
     87c:	b6 95       	lsr	r27
     87e:	a7 95       	ror	r26
     880:	97 95       	ror	r25
     882:	87 95       	ror	r24
     884:	ca 94       	dec	r12
     886:	d2 f7       	brpl	.-12     	; 0x87c <_ZN6Effect17renderfunc_rotateEm+0x446>
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	29 f4       	brne	.+10     	; 0x89a <_ZN6Effect17renderfunc_rotateEm+0x464>
					LedCube::setpixel(2,0,z);
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	4d 2d       	mov	r20, r13
     896:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     89a:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
     89c:	dd 20       	and	r13, r13
     89e:	09 f4       	brne	.+2      	; 0x8a2 <_ZN6Effect17renderfunc_rotateEm+0x46c>
     8a0:	65 c1       	rjmp	.+714    	; 0xb6c <__stack+0x26d>
     8a2:	da 94       	dec	r13
     8a4:	57 cf       	rjmp	.-338    	; 0x754 <_ZN6Effect17renderfunc_rotateEm+0x31e>
     8a6:	34 e0       	ldi	r19, 0x04	; 4
     8a8:	d3 2e       	mov	r13, r19
     8aa:	c0 e0       	ldi	r28, 0x00	; 0
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	82 2e       	mov	r8, r18
     8b2:	91 2c       	mov	r9, r1
     8b4:	a1 2c       	mov	r10, r1
     8b6:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,0,z);
			}
		break;
	case 2:
		for(;i<CUBESIZE;i++,z--){
     8b8:	cc 2e       	mov	r12, r28
     8ba:	9e 01       	movw	r18, r28
     8bc:	2c 5f       	subi	r18, 0xFC	; 252
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     8c0:	d5 01       	movw	r26, r10
     8c2:	c4 01       	movw	r24, r8
     8c4:	02 2e       	mov	r0, r18
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <_ZN6Effect17renderfunc_rotateEm+0x49a>
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	aa 1f       	adc	r26, r26
     8ce:	bb 1f       	adc	r27, r27
     8d0:	0a 94       	dec	r0
     8d2:	d2 f7       	brpl	.-12     	; 0x8c8 <_ZN6Effect17renderfunc_rotateEm+0x492>
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <_ZN6Effect17renderfunc_rotateEm+0x4b0>
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	2a 95       	dec	r18
     8e8:	d2 f7       	brpl	.-12     	; 0x8de <_ZN6Effect17renderfunc_rotateEm+0x4a8>
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	a1 05       	cpc	r26, r1
     8ee:	b1 05       	cpc	r27, r1
     8f0:	29 f4       	brne	.+10     	; 0x8fc <_ZN6Effect17renderfunc_rotateEm+0x4c6>
					LedCube::setpixel(4,0,z);
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	4d 2d       	mov	r20, r13
     8f8:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     8fc:	9e 01       	movw	r18, r28
     8fe:	2d 5f       	subi	r18, 0xFD	; 253
     900:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     902:	d5 01       	movw	r26, r10
     904:	c4 01       	movw	r24, r8
     906:	02 2e       	mov	r0, r18
     908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0x13>
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	aa 1f       	adc	r26, r26
     910:	bb 1f       	adc	r27, r27
     912:	0a 94       	dec	r0
     914:	d2 f7       	brpl	.-12     	; 0x90a <__stack+0xb>
     916:	8e 21       	and	r24, r14
     918:	9f 21       	and	r25, r15
     91a:	a0 23       	and	r26, r16
     91c:	b1 23       	and	r27, r17
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
     920:	b6 95       	lsr	r27
     922:	a7 95       	ror	r26
     924:	97 95       	ror	r25
     926:	87 95       	ror	r24
     928:	2a 95       	dec	r18
     92a:	d2 f7       	brpl	.-12     	; 0x920 <__stack+0x21>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	29 f4       	brne	.+10     	; 0x93e <__stack+0x3f>
					LedCube::setpixel(3,1,z);
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	4d 2d       	mov	r20, r13
     93a:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     93e:	9e 01       	movw	r18, r28
     940:	2e 5f       	subi	r18, 0xFE	; 254
     942:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     944:	d5 01       	movw	r26, r10
     946:	c4 01       	movw	r24, r8
     948:	02 2e       	mov	r0, r18
     94a:	04 c0       	rjmp	.+8      	; 0x954 <__stack+0x55>
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	aa 1f       	adc	r26, r26
     952:	bb 1f       	adc	r27, r27
     954:	0a 94       	dec	r0
     956:	d2 f7       	brpl	.-12     	; 0x94c <__stack+0x4d>
     958:	8e 21       	and	r24, r14
     95a:	9f 21       	and	r25, r15
     95c:	a0 23       	and	r26, r16
     95e:	b1 23       	and	r27, r17
     960:	04 c0       	rjmp	.+8      	; 0x96a <__stack+0x6b>
     962:	b6 95       	lsr	r27
     964:	a7 95       	ror	r26
     966:	97 95       	ror	r25
     968:	87 95       	ror	r24
     96a:	2a 95       	dec	r18
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__stack+0x63>
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	29 f4       	brne	.+10     	; 0x980 <__stack+0x81>
					LedCube::setpixel(2,2,z);
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	62 e0       	ldi	r22, 0x02	; 2
     97a:	4d 2d       	mov	r20, r13
     97c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     980:	9e 01       	movw	r18, r28
     982:	2f 5f       	subi	r18, 0xFF	; 255
     984:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     986:	d5 01       	movw	r26, r10
     988:	c4 01       	movw	r24, r8
     98a:	02 2e       	mov	r0, r18
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__stack+0x97>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	aa 1f       	adc	r26, r26
     994:	bb 1f       	adc	r27, r27
     996:	0a 94       	dec	r0
     998:	d2 f7       	brpl	.-12     	; 0x98e <__stack+0x8f>
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__stack+0xad>
     9a4:	b6 95       	lsr	r27
     9a6:	a7 95       	ror	r26
     9a8:	97 95       	ror	r25
     9aa:	87 95       	ror	r24
     9ac:	2a 95       	dec	r18
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__stack+0xa5>
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	a1 05       	cpc	r26, r1
     9b4:	b1 05       	cpc	r27, r1
     9b6:	29 f4       	brne	.+10     	; 0x9c2 <__stack+0xc3>
					LedCube::setpixel(1,3,z);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	63 e0       	ldi	r22, 0x03	; 3
     9bc:	4d 2d       	mov	r20, r13
     9be:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     9c2:	d5 01       	movw	r26, r10
     9c4:	c4 01       	movw	r24, r8
     9c6:	0c 2c       	mov	r0, r12
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__stack+0xd3>
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	aa 1f       	adc	r26, r26
     9d0:	bb 1f       	adc	r27, r27
     9d2:	0a 94       	dec	r0
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__stack+0xcb>
     9d6:	8e 21       	and	r24, r14
     9d8:	9f 21       	and	r25, r15
     9da:	a0 23       	and	r26, r16
     9dc:	b1 23       	and	r27, r17
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__stack+0xe9>
     9e0:	b6 95       	lsr	r27
     9e2:	a7 95       	ror	r26
     9e4:	97 95       	ror	r25
     9e6:	87 95       	ror	r24
     9e8:	ca 94       	dec	r12
     9ea:	d2 f7       	brpl	.-12     	; 0x9e0 <__stack+0xe1>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	a1 05       	cpc	r26, r1
     9f0:	b1 05       	cpc	r27, r1
     9f2:	29 f4       	brne	.+10     	; 0x9fe <__stack+0xff>
					LedCube::setpixel(0,4,z);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	64 e0       	ldi	r22, 0x04	; 4
     9f8:	4d 2d       	mov	r20, r13
     9fa:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     9fe:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
     a00:	dd 20       	and	r13, r13
     a02:	09 f4       	brne	.+2      	; 0xa06 <__stack+0x107>
     a04:	b3 c0       	rjmp	.+358    	; 0xb6c <__stack+0x26d>
     a06:	da 94       	dec	r13
     a08:	57 cf       	rjmp	.-338    	; 0x8b8 <_ZN6Effect17renderfunc_rotateEm+0x482>
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	d9 2e       	mov	r13, r25
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
     a10:	d0 e0       	ldi	r29, 0x00	; 0
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	88 2e       	mov	r8, r24
     a16:	91 2c       	mov	r9, r1
     a18:	a1 2c       	mov	r10, r1
     a1a:	b1 2c       	mov	r11, r1
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(2,0,z);
			}
		break;
	case 3:
		for(;i<CUBESIZE;i++,z--){
     a1c:	cc 2e       	mov	r12, r28
     a1e:	9e 01       	movw	r18, r28
     a20:	2c 5f       	subi	r18, 0xFC	; 252
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
				if(BIT(matrix,(4+(i*CUBESIZE))) == 1)
     a24:	d5 01       	movw	r26, r10
     a26:	c4 01       	movw	r24, r8
     a28:	02 2e       	mov	r0, r18
     a2a:	04 c0       	rjmp	.+8      	; 0xa34 <__stack+0x135>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	aa 1f       	adc	r26, r26
     a32:	bb 1f       	adc	r27, r27
     a34:	0a 94       	dec	r0
     a36:	d2 f7       	brpl	.-12     	; 0xa2c <__stack+0x12d>
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__stack+0x14b>
     a42:	b6 95       	lsr	r27
     a44:	a7 95       	ror	r26
     a46:	97 95       	ror	r25
     a48:	87 95       	ror	r24
     a4a:	2a 95       	dec	r18
     a4c:	d2 f7       	brpl	.-12     	; 0xa42 <__stack+0x143>
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	a1 05       	cpc	r26, r1
     a52:	b1 05       	cpc	r27, r1
     a54:	29 f4       	brne	.+10     	; 0xa60 <__stack+0x161>
					LedCube::setpixel(0,2,z);
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	4d 2d       	mov	r20, r13
     a5c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     a60:	9e 01       	movw	r18, r28
     a62:	2d 5f       	subi	r18, 0xFD	; 253
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(3+(i*CUBESIZE))) == 1)
     a66:	d5 01       	movw	r26, r10
     a68:	c4 01       	movw	r24, r8
     a6a:	02 2e       	mov	r0, r18
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__stack+0x177>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	aa 1f       	adc	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	0a 94       	dec	r0
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__stack+0x16f>
     a7a:	8e 21       	and	r24, r14
     a7c:	9f 21       	and	r25, r15
     a7e:	a0 23       	and	r26, r16
     a80:	b1 23       	and	r27, r17
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__stack+0x18d>
     a84:	b6 95       	lsr	r27
     a86:	a7 95       	ror	r26
     a88:	97 95       	ror	r25
     a8a:	87 95       	ror	r24
     a8c:	2a 95       	dec	r18
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__stack+0x185>
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	a1 05       	cpc	r26, r1
     a94:	b1 05       	cpc	r27, r1
     a96:	29 f4       	brne	.+10     	; 0xaa2 <__stack+0x1a3>
					LedCube::setpixel(1,2,z);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	62 e0       	ldi	r22, 0x02	; 2
     a9c:	4d 2d       	mov	r20, r13
     a9e:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     aa2:	9e 01       	movw	r18, r28
     aa4:	2e 5f       	subi	r18, 0xFE	; 254
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(2+(i*CUBESIZE))) == 1)
     aa8:	d5 01       	movw	r26, r10
     aaa:	c4 01       	movw	r24, r8
     aac:	02 2e       	mov	r0, r18
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__stack+0x1b9>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	aa 1f       	adc	r26, r26
     ab6:	bb 1f       	adc	r27, r27
     ab8:	0a 94       	dec	r0
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <__stack+0x1b1>
     abc:	8e 21       	and	r24, r14
     abe:	9f 21       	and	r25, r15
     ac0:	a0 23       	and	r26, r16
     ac2:	b1 23       	and	r27, r17
     ac4:	04 c0       	rjmp	.+8      	; 0xace <__stack+0x1cf>
     ac6:	b6 95       	lsr	r27
     ac8:	a7 95       	ror	r26
     aca:	97 95       	ror	r25
     acc:	87 95       	ror	r24
     ace:	2a 95       	dec	r18
     ad0:	d2 f7       	brpl	.-12     	; 0xac6 <__stack+0x1c7>
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	a1 05       	cpc	r26, r1
     ad6:	b1 05       	cpc	r27, r1
     ad8:	29 f4       	brne	.+10     	; 0xae4 <__stack+0x1e5>
					LedCube::setpixel(2,2,z);
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	4d 2d       	mov	r20, r13
     ae0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     ae4:	9e 01       	movw	r18, r28
     ae6:	2f 5f       	subi	r18, 0xFF	; 255
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
				if(BIT(matrix,(1+(i*CUBESIZE))) == 1)
     aea:	d5 01       	movw	r26, r10
     aec:	c4 01       	movw	r24, r8
     aee:	02 2e       	mov	r0, r18
     af0:	04 c0       	rjmp	.+8      	; 0xafa <__stack+0x1fb>
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	aa 1f       	adc	r26, r26
     af8:	bb 1f       	adc	r27, r27
     afa:	0a 94       	dec	r0
     afc:	d2 f7       	brpl	.-12     	; 0xaf2 <__stack+0x1f3>
     afe:	8e 21       	and	r24, r14
     b00:	9f 21       	and	r25, r15
     b02:	a0 23       	and	r26, r16
     b04:	b1 23       	and	r27, r17
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <__stack+0x211>
     b08:	b6 95       	lsr	r27
     b0a:	a7 95       	ror	r26
     b0c:	97 95       	ror	r25
     b0e:	87 95       	ror	r24
     b10:	2a 95       	dec	r18
     b12:	d2 f7       	brpl	.-12     	; 0xb08 <__stack+0x209>
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	a1 05       	cpc	r26, r1
     b18:	b1 05       	cpc	r27, r1
     b1a:	29 f4       	brne	.+10     	; 0xb26 <__stack+0x227>
					LedCube::setpixel(3,2,z);
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	62 e0       	ldi	r22, 0x02	; 2
     b20:	4d 2d       	mov	r20, r13
     b22:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
     b26:	d5 01       	movw	r26, r10
     b28:	c4 01       	movw	r24, r8
     b2a:	0c 2c       	mov	r0, r12
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x237>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	aa 1f       	adc	r26, r26
     b34:	bb 1f       	adc	r27, r27
     b36:	0a 94       	dec	r0
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x22f>
     b3a:	8e 21       	and	r24, r14
     b3c:	9f 21       	and	r25, r15
     b3e:	a0 23       	and	r26, r16
     b40:	b1 23       	and	r27, r17
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <__stack+0x24d>
     b44:	b6 95       	lsr	r27
     b46:	a7 95       	ror	r26
     b48:	97 95       	ror	r25
     b4a:	87 95       	ror	r24
     b4c:	ca 94       	dec	r12
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <__stack+0x245>
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	29 f4       	brne	.+10     	; 0xb62 <__stack+0x263>
					LedCube::setpixel(4,2,z);
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	4d 2d       	mov	r20, r13
     b5e:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     b62:	25 96       	adiw	r28, 0x05	; 5
				if(BIT(matrix,(0+(i*CUBESIZE))) == 1)
					LedCube::setpixel(0,4,z);
			}
		break;
	case 4:
		for(;i<CUBESIZE;i++,z--){
     b64:	dd 20       	and	r13, r13
     b66:	11 f0       	breq	.+4      	; 0xb6c <__stack+0x26d>
     b68:	da 94       	dec	r13
     b6a:	58 cf       	rjmp	.-336    	; 0xa1c <__stack+0x11d>
					LedCube::setpixel(4,2,z);
			}
		break;
	}

}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	bf 90       	pop	r11
     b7e:	af 90       	pop	r10
     b80:	9f 90       	pop	r9
     b82:	8f 90       	pop	r8
     b84:	08 95       	ret

00000b86 <_ZN6Effect16renderfunc_slideEm>:
	default:
		break;
	}
}

void Effect::renderfunc_slide(uint32_t matrix)
     b86:	4f 92       	push	r4
     b88:	5f 92       	push	r5
     b8a:	6f 92       	push	r6
     b8c:	7f 92       	push	r7
     b8e:	8f 92       	push	r8
     b90:	9f 92       	push	r9
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	2c 01       	movw	r4, r24
     ba8:	5a 01       	movw	r10, r20
     baa:	6b 01       	movw	r12, r22
     bac:	14 e0       	ldi	r17, 0x04	; 4
     bae:	e1 2e       	mov	r14, r17
     bb0:	04 e0       	ldi	r16, 0x04	; 4
     bb2:	10 e0       	ldi	r17, 0x00	; 0
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
			byte x=CUBESIZE;
			while(x>0){
				if(BIT(matrix,((x-1)+(i*CUBESIZE))) == 1)
     bb4:	b1 e0       	ldi	r27, 0x01	; 1
     bb6:	6b 2e       	mov	r6, r27
     bb8:	71 2c       	mov	r7, r1
     bba:	81 2c       	mov	r8, r1
     bbc:	91 2c       	mov	r9, r1
     bbe:	2a c0       	rjmp	.+84     	; 0xc14 <_ZN6Effect16renderfunc_slideEm+0x8e>
     bc0:	d4 01       	movw	r26, r8
     bc2:	c3 01       	movw	r24, r6
     bc4:	0c 2e       	mov	r0, r28
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <_ZN6Effect16renderfunc_slideEm+0x4a>
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	aa 1f       	adc	r26, r26
     bce:	bb 1f       	adc	r27, r27
     bd0:	0a 94       	dec	r0
     bd2:	d2 f7       	brpl	.-12     	; 0xbc8 <_ZN6Effect16renderfunc_slideEm+0x42>
     bd4:	8a 21       	and	r24, r10
     bd6:	9b 21       	and	r25, r11
     bd8:	ac 21       	and	r26, r12
     bda:	bd 21       	and	r27, r13
     bdc:	0c 2e       	mov	r0, r28
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <_ZN6Effect16renderfunc_slideEm+0x62>
     be0:	b6 95       	lsr	r27
     be2:	a7 95       	ror	r26
     be4:	97 95       	ror	r25
     be6:	87 95       	ror	r24
     be8:	0a 94       	dec	r0
     bea:	d2 f7       	brpl	.-12     	; 0xbe0 <_ZN6Effect16renderfunc_slideEm+0x5a>
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	31 f4       	brne	.+12     	; 0xc00 <_ZN6Effect16renderfunc_slideEm+0x7a>
					LedCube::setpixel((x-1),_frame,z);
     bf4:	8f 2d       	mov	r24, r15
     bf6:	f2 01       	movw	r30, r4
     bf8:	65 81       	ldd	r22, Z+5	; 0x05
     bfa:	4e 2d       	mov	r20, r14
     bfc:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
     c00:	fa 94       	dec	r15
     c02:	21 97       	sbiw	r28, 0x01	; 1
void Effect::renderfunc_slide(uint32_t matrix)
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
			byte x=CUBESIZE;
			while(x>0){
     c04:	ff ef       	ldi	r31, 0xFF	; 255
     c06:	ff 16       	cp	r15, r31
     c08:	d9 f6       	brne	.-74     	; 0xbc0 <_ZN6Effect16renderfunc_slideEm+0x3a>
     c0a:	0b 5f       	subi	r16, 0xFB	; 251
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
}

void Effect::renderfunc_slide(uint32_t matrix)
{
	byte i = 0,z=4;
		for(;i<CUBESIZE;i++,z--){
     c0e:	ee 20       	and	r14, r14
     c10:	29 f0       	breq	.+10     	; 0xc1c <_ZN6Effect16renderfunc_slideEm+0x96>
     c12:	ea 94       	dec	r14
     c14:	e8 01       	movw	r28, r16
     c16:	a4 e0       	ldi	r26, 0x04	; 4
     c18:	fa 2e       	mov	r15, r26
     c1a:	d2 cf       	rjmp	.-92     	; 0xbc0 <_ZN6Effect16renderfunc_slideEm+0x3a>
				if(BIT(matrix,((x-1)+(i*CUBESIZE))) == 1)
					LedCube::setpixel((x-1),_frame,z);
				x--;
			}
		}
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	9f 90       	pop	r9
     c32:	8f 90       	pop	r8
     c34:	7f 90       	pop	r7
     c36:	6f 90       	pop	r6
     c38:	5f 90       	pop	r5
     c3a:	4f 90       	pop	r4
     c3c:	08 95       	ret

00000c3e <_ZN6Effect13render_matrixEm>:
			}
		}
	}
}

void Effect::render_matrix(uint32_t matrix)
     c3e:	fc 01       	movw	r30, r24
{
	switch(this->_mod){
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	81 32       	cpi	r24, 0x21	; 33
     c44:	31 f0       	breq	.+12     	; 0xc52 <_ZN6Effect13render_matrixEm+0x14>
     c46:	82 32       	cpi	r24, 0x22	; 34
     c48:	39 f4       	brne	.+14     	; 0xc58 <_ZN6Effect13render_matrixEm+0x1a>
	case MOD_ROTATE:
		this->renderfunc_rotate(matrix);
     c4a:	cf 01       	movw	r24, r30
     c4c:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6Effect17renderfunc_rotateEm>
     c50:	08 95       	ret
		break;
	case MOD_SLIDE:
		this->renderfunc_slide(matrix);
     c52:	cf 01       	movw	r24, r30
     c54:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN6Effect16renderfunc_slideEm>
     c58:	08 95       	ret

00000c5a <_ZN6Effect5debugEhhh>:
{
	LedCube::plane(z);
	LedCube::transfer(number);
}

void Effect::debug(byte x, byte y, byte z)
     c5a:	86 2f       	mov	r24, r22
{
	LedCube::setpixel(x,y,z);
     c5c:	64 2f       	mov	r22, r20
     c5e:	42 2f       	mov	r20, r18
     c60:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
}
     c64:	08 95       	ret

00000c66 <_ZN6Effect7bubblesEv>:
	LedCube::plane(random(5));
	LedCube::transfer(random(25));
	delay(this->_milli);
}

void Effect::bubbles()
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	ec 01       	movw	r28, r24
{
	byte x = random(5),y=random(5);
     c72:	65 e0       	ldi	r22, 0x05	; 5
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_Z6randoml>
     c7e:	f6 2e       	mov	r15, r22
     c80:	65 e0       	ldi	r22, 0x05	; 5
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <_Z6randoml>
     c8c:	06 2f       	mov	r16, r22
     c8e:	10 e0       	ldi	r17, 0x00	; 0
	for(byte z=0;z<5;z++){
			LedCube::setpixel(x,y,z);
     c90:	8f 2d       	mov	r24, r15
     c92:	60 2f       	mov	r22, r16
     c94:	41 2f       	mov	r20, r17
     c96:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
			if(this->_milli > 1)
     c9a:	6a 81       	ldd	r22, Y+2	; 0x02
     c9c:	7b 81       	ldd	r23, Y+3	; 0x03
     c9e:	62 30       	cpi	r22, 0x02	; 2
     ca0:	71 05       	cpc	r23, r1
     ca2:	30 f0       	brcs	.+12     	; 0xcb0 <_ZN6Effect7bubblesEv+0x4a>
				delay(this->_milli/2);
     ca4:	76 95       	lsr	r23
     ca6:	67 95       	ror	r22
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <delay>
}

void Effect::bubbles()
{
	byte x = random(5),y=random(5);
	for(byte z=0;z<5;z++){
     cb0:	1f 5f       	subi	r17, 0xFF	; 255
     cb2:	15 30       	cpi	r17, 0x05	; 5
     cb4:	69 f7       	brne	.-38     	; 0xc90 <_ZN6Effect7bubblesEv+0x2a>
			LedCube::setpixel(x,y,z);
			if(this->_milli > 1)
				delay(this->_milli/2);
	}
	delay(this->_milli);
     cb6:	6a 81       	ldd	r22, Y+2	; 0x02
     cb8:	7b 81       	ldd	r23, Y+3	; 0x03
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <delay>
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	08 95       	ret

00000cce <_ZN6Effect5debugEhh>:
		}

	this->_mod = mod;
}

void Effect::debug(byte number, byte z)
     cce:	1f 93       	push	r17
     cd0:	16 2f       	mov	r17, r22
     cd2:	84 2f       	mov	r24, r20
{
	LedCube::plane(z);
     cd4:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7LedCube5planeEh>
	LedCube::transfer(number);
     cd8:	81 2f       	mov	r24, r17
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
}
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret

00000ce4 <_ZN6Effect6bounceEv>:
	}
}



void Effect::bounce()
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
{
	  unsigned int milli = this->_milli + 1;
     cfc:	fc 01       	movw	r30, r24
     cfe:	02 81       	ldd	r16, Z+2	; 0x02
     d00:	13 81       	ldd	r17, Z+3	; 0x03
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255

	   unsigned long t = millis();
     d06:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24
     d0e:	ce ef       	ldi	r28, 0xFE	; 254
     d10:	df ef       	ldi	r29, 0xFF	; 255

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
	     while(millis() < t + milli){
     d12:	48 01       	movw	r8, r16
     d14:	aa 24       	eor	r10, r10
     d16:	bb 24       	eor	r11, r11
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <_ZN6Effect6bounceEv+0x84>
	       LedSquare::displaycenter(constrain(z+2, 0, 4));
     d1a:	c3 30       	cpi	r28, 0x03	; 3
     d1c:	d1 05       	cpc	r29, r1
     d1e:	1c f0       	brlt	.+6      	; 0xd26 <_ZN6Effect6bounceEv+0x42>
     d20:	84 e0       	ldi	r24, 0x04	; 4
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <_ZN6Effect6bounceEv+0x46>
     d26:	ce 01       	movw	r24, r28
     d28:	02 96       	adiw	r24, 0x02	; 2
     d2a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN9LedSquare13displaycenterEi>
	       LedSquare::displaysmall(constrain(z+1, 0, 4));
     d2e:	ff ef       	ldi	r31, 0xFF	; 255
     d30:	ce 3f       	cpi	r28, 0xFE	; 254
     d32:	df 07       	cpc	r29, r31
     d34:	19 f4       	brne	.+6      	; 0xd3c <_ZN6Effect6bounceEv+0x58>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	08 c0       	rjmp	.+16     	; 0xd4c <_ZN6Effect6bounceEv+0x68>
     d3c:	c4 30       	cpi	r28, 0x04	; 4
     d3e:	d1 05       	cpc	r29, r1
     d40:	19 f4       	brne	.+6      	; 0xd48 <_ZN6Effect6bounceEv+0x64>
     d42:	84 e0       	ldi	r24, 0x04	; 4
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <_ZN6Effect6bounceEv+0x68>
     d48:	ce 01       	movw	r24, r28
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9LedSquare12displaysmallEi>
	       LedSquare::displaybig(constrain(z  , 0, 4));
     d50:	ce 01       	movw	r24, r28
     d52:	c5 30       	cpi	r28, 0x05	; 5
     d54:	d1 05       	cpc	r29, r1
     d56:	14 f0       	brlt	.+4      	; 0xd5c <_ZN6Effect6bounceEv+0x78>
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	97 ff       	sbrs	r25, 7
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <_ZN6Effect6bounceEv+0x80>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN9LedSquare10displaybigEi>
	  unsigned int milli = this->_milli + 1;

	   unsigned long t = millis();

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
	     while(millis() < t + milli){
     d68:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     d6c:	a7 01       	movw	r20, r14
     d6e:	96 01       	movw	r18, r12
     d70:	28 0d       	add	r18, r8
     d72:	39 1d       	adc	r19, r9
     d74:	4a 1d       	adc	r20, r10
     d76:	5b 1d       	adc	r21, r11
     d78:	62 17       	cp	r22, r18
     d7a:	73 07       	cpc	r23, r19
     d7c:	84 07       	cpc	r24, r20
     d7e:	95 07       	cpc	r25, r21
     d80:	60 f2       	brcs	.-104    	; 0xd1a <_ZN6Effect6bounceEv+0x36>
{
	  unsigned int milli = this->_milli + 1;

	   unsigned long t = millis();

	  for(int z = -2; z < LEDS_PER_ROW; t = millis(), z++){
     d82:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     d86:	6b 01       	movw	r12, r22
     d88:	7c 01       	movw	r14, r24
     d8a:	21 96       	adiw	r28, 0x01	; 1
     d8c:	c5 30       	cpi	r28, 0x05	; 5
     d8e:	d1 05       	cpc	r29, r1
     d90:	59 f7       	brne	.-42     	; 0xd68 <_ZN6Effect6bounceEv+0x84>
	       LedSquare::displaysmall(constrain(z+1, 0, 4));
	       LedSquare::displaybig(constrain(z  , 0, 4));
	     }
	  }

	  t = millis();
     d92:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     d96:	7b 01       	movw	r14, r22
     d98:	8c 01       	movw	r16, r24
     d9a:	c4 e0       	ldi	r28, 0x04	; 4
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
     d9e:	27 c0       	rjmp	.+78     	; 0xdee <_ZN6Effect6bounceEv+0x10a>
	  for(int z = 4; z > -3; t = millis(), z--){
	     while(millis() < t + milli){
	    	 LedSquare::displaybig(constrain(z+2, 0, 4));
     da0:	c3 30       	cpi	r28, 0x03	; 3
     da2:	d1 05       	cpc	r29, r1
     da4:	1c f0       	brlt	.+6      	; 0xdac <_ZN6Effect6bounceEv+0xc8>
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <_ZN6Effect6bounceEv+0xcc>
     dac:	ce 01       	movw	r24, r28
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN9LedSquare10displaybigEi>
	    	 LedSquare::displaysmall(constrain(z+1, 0, 4));
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	ce 3f       	cpi	r28, 0xFE	; 254
     db8:	d8 07       	cpc	r29, r24
     dba:	19 f4       	brne	.+6      	; 0xdc2 <_ZN6Effect6bounceEv+0xde>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	08 c0       	rjmp	.+16     	; 0xdd2 <_ZN6Effect6bounceEv+0xee>
     dc2:	c4 30       	cpi	r28, 0x04	; 4
     dc4:	d1 05       	cpc	r29, r1
     dc6:	19 f4       	brne	.+6      	; 0xdce <_ZN6Effect6bounceEv+0xea>
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <_ZN6Effect6bounceEv+0xee>
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9LedSquare12displaysmallEi>
	    	 LedSquare::displaycenter(constrain(z  , 0, 4));
     dd6:	ce 01       	movw	r24, r28
     dd8:	c5 30       	cpi	r28, 0x05	; 5
     dda:	d1 05       	cpc	r29, r1
     ddc:	14 f0       	brlt	.+4      	; 0xde2 <_ZN6Effect6bounceEv+0xfe>
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	97 ff       	sbrs	r25, 7
     de4:	02 c0       	rjmp	.+4      	; 0xdea <_ZN6Effect6bounceEv+0x106>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN9LedSquare13displaycenterEi>
	     }
	  }

	  t = millis();
	  for(int z = 4; z > -3; t = millis(), z--){
	     while(millis() < t + milli){
     dee:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     df2:	a8 01       	movw	r20, r16
     df4:	97 01       	movw	r18, r14
     df6:	28 0d       	add	r18, r8
     df8:	39 1d       	adc	r19, r9
     dfa:	4a 1d       	adc	r20, r10
     dfc:	5b 1d       	adc	r21, r11
     dfe:	62 17       	cp	r22, r18
     e00:	73 07       	cpc	r23, r19
     e02:	84 07       	cpc	r24, r20
     e04:	95 07       	cpc	r25, r21
     e06:	60 f2       	brcs	.-104    	; 0xda0 <_ZN6Effect6bounceEv+0xbc>
	       LedSquare::displaybig(constrain(z  , 0, 4));
	     }
	  }

	  t = millis();
	  for(int z = 4; z > -3; t = millis(), z--){
     e08:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     e0c:	7b 01       	movw	r14, r22
     e0e:	8c 01       	movw	r16, r24
     e10:	21 97       	sbiw	r28, 0x01	; 1
     e12:	ef ef       	ldi	r30, 0xFF	; 255
     e14:	cd 3f       	cpi	r28, 0xFD	; 253
     e16:	de 07       	cpc	r29, r30
     e18:	51 f7       	brne	.-44     	; 0xdee <_ZN6Effect6bounceEv+0x10a>
	    	 LedSquare::displaybig(constrain(z+2, 0, 4));
	    	 LedSquare::displaysmall(constrain(z+1, 0, 4));
	    	 LedSquare::displaycenter(constrain(z  , 0, 4));
	     }
	  }
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	bf 90       	pop	r11
     e2c:	af 90       	pop	r10
     e2e:	9f 90       	pop	r9
     e30:	8f 90       	pop	r8
     e32:	08 95       	ret

00000e34 <_ZN6Effect14infinitesquareEv>:
	 		LedCube::draw(data,y,0);
		}
	}
}

void Effect::infinitesquare()
     e34:	2f 92       	push	r2
     e36:	3f 92       	push	r3
     e38:	4f 92       	push	r4
     e3a:	5f 92       	push	r5
     e3c:	6f 92       	push	r6
     e3e:	7f 92       	push	r7
     e40:	8f 92       	push	r8
     e42:	9f 92       	push	r9
     e44:	af 92       	push	r10
     e46:	bf 92       	push	r11
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	3c 01       	movw	r6, r24
{
	unsigned long t = millis();
     e5a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     e5e:	5b 01       	movw	r10, r22
     e60:	6c 01       	movw	r12, r24
     e62:	c0 e0       	ldi	r28, 0x00	; 0
     e64:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i = 0; true ;t = millis(), i++){
		unsigned int milli = this->_milli + 1;
     e66:	f3 01       	movw	r30, r6
     e68:	22 81       	ldd	r18, Z+2	; 0x02
     e6a:	33 81       	ldd	r19, Z+3	; 0x03
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
	    while(millis() < t + milli){
	    	LedSquare::displaycenter(((i+2)%LEDS_PER_ROW));
     e70:	ce 01       	movw	r24, r28
     e72:	02 96       	adiw	r24, 0x02	; 2
     e74:	65 e0       	ldi	r22, 0x05	; 5
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divmodhi4>
     e7c:	1c 01       	movw	r2, r24
	    	LedSquare::displaysmall(((i+1)%LEDS_PER_ROW));
     e7e:	ce 01       	movw	r24, r28
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	65 e0       	ldi	r22, 0x05	; 5
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divmodhi4>
     e8a:	2c 01       	movw	r4, r24
	    	LedSquare::displaybig(((i  )%LEDS_PER_ROW));
     e8c:	ce 01       	movw	r24, r28
     e8e:	65 e0       	ldi	r22, 0x05	; 5
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divmodhi4>
     e96:	4c 01       	movw	r8, r24
{
	unsigned long t = millis();
	int i;
	for(i = 0; true ;t = millis(), i++){
		unsigned int milli = this->_milli + 1;
	    while(millis() < t + milli){
     e98:	79 01       	movw	r14, r18
     e9a:	00 e0       	ldi	r16, 0x00	; 0
     e9c:	10 e0       	ldi	r17, 0x00	; 0
     e9e:	ea 0c       	add	r14, r10
     ea0:	fb 1c       	adc	r15, r11
     ea2:	0c 1d       	adc	r16, r12
     ea4:	1d 1d       	adc	r17, r13
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <_ZN6Effect14infinitesquareEv+0x86>
	    	LedSquare::displaycenter(((i+2)%LEDS_PER_ROW));
     ea8:	c1 01       	movw	r24, r2
     eaa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN9LedSquare13displaycenterEi>
	    	LedSquare::displaysmall(((i+1)%LEDS_PER_ROW));
     eae:	c2 01       	movw	r24, r4
     eb0:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9LedSquare12displaysmallEi>
	    	LedSquare::displaybig(((i  )%LEDS_PER_ROW));
     eb4:	c4 01       	movw	r24, r8
     eb6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN9LedSquare10displaybigEi>
{
	unsigned long t = millis();
	int i;
	for(i = 0; true ;t = millis(), i++){
		unsigned int milli = this->_milli + 1;
	    while(millis() < t + milli){
     eba:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     ebe:	6e 15       	cp	r22, r14
     ec0:	7f 05       	cpc	r23, r15
     ec2:	80 07       	cpc	r24, r16
     ec4:	91 07       	cpc	r25, r17
     ec6:	80 f3       	brcs	.-32     	; 0xea8 <_ZN6Effect14infinitesquareEv+0x74>

void Effect::infinitesquare()
{
	unsigned long t = millis();
	int i;
	for(i = 0; true ;t = millis(), i++){
     ec8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     ecc:	5b 01       	movw	r10, r22
     ece:	6c 01       	movw	r12, r24
     ed0:	21 96       	adiw	r28, 0x01	; 1
     ed2:	c9 cf       	rjmp	.-110    	; 0xe66 <_ZN6Effect14infinitesquareEv+0x32>

00000ed4 <_ZN6Effect9heartbeatEv>:
	 		LedCube::draw(smiley_lol,y,this->_mod);
		}
	}
}

void Effect::heartbeat()
     ed4:	6f 92       	push	r6
     ed6:	7f 92       	push	r7
     ed8:	8f 92       	push	r8
     eda:	9f 92       	push	r9
     edc:	bf 92       	push	r11
     ede:	cf 92       	push	r12
     ee0:	df 92       	push	r13
     ee2:	ef 92       	push	r14
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
{
	unsigned int milli = this->_milli + 1;
     eea:	fc 01       	movw	r30, r24
     eec:	02 81       	ldd	r16, Z+2	; 0x02
     eee:	13 81       	ldd	r17, Z+3	; 0x03
     ef0:	0f 5f       	subi	r16, 0xFF	; 255
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
     ef4:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     ef8:	6b 01       	movw	r12, r22
     efa:	7c 01       	movw	r14, r24
     efc:	bb 24       	eor	r11, r11

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
     efe:	38 01       	movw	r6, r16
     f00:	88 24       	eor	r8, r8
     f02:	99 24       	eor	r9, r9
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <_ZN6Effect9heartbeatEv+0x3e>
	 		LedCube::draw(quake_1,y,0);
     f06:	89 eb       	ldi	r24, 0xB9	; 185
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	6b 2d       	mov	r22, r11
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN7LedCube4drawEPhhh>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
     f12:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     f16:	a7 01       	movw	r20, r14
     f18:	96 01       	movw	r18, r12
     f1a:	26 0d       	add	r18, r6
     f1c:	37 1d       	adc	r19, r7
     f1e:	48 1d       	adc	r20, r8
     f20:	59 1d       	adc	r21, r9
     f22:	62 17       	cp	r22, r18
     f24:	73 07       	cpc	r23, r19
     f26:	84 07       	cpc	r24, r20
     f28:	95 07       	cpc	r25, r21
     f2a:	68 f3       	brcs	.-38     	; 0xf06 <_ZN6Effect9heartbeatEv+0x32>
void Effect::heartbeat()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
     f2c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     f30:	6b 01       	movw	r12, r22
     f32:	7c 01       	movw	r14, r24
     f34:	b3 94       	inc	r11
     f36:	f5 e0       	ldi	r31, 0x05	; 5
     f38:	bf 16       	cp	r11, r31
     f3a:	59 f7       	brne	.-42     	; 0xf12 <_ZN6Effect9heartbeatEv+0x3e>
	    while(millis() < t + milli){
	 		LedCube::draw(quake_1,y,0);
		}
	}
}
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	bf 90       	pop	r11
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	7f 90       	pop	r7
     f50:	6f 90       	pop	r6
     f52:	08 95       	ret

00000f54 <_ZN6Effect6smileyEv>:
void Effect::renderfunc_explode(uint32_t matrix)
{

}

void Effect::smiley()
     f54:	6f 92       	push	r6
     f56:	7f 92       	push	r7
     f58:	8f 92       	push	r8
     f5a:	9f 92       	push	r9
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
{
	unsigned int milli = this->_milli + 1;
     f70:	0a 81       	ldd	r16, Y+2	; 0x02
     f72:	1b 81       	ldd	r17, Y+3	; 0x03
     f74:	0f 5f       	subi	r16, 0xFF	; 255
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
     f78:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     f7c:	6b 01       	movw	r12, r22
     f7e:	7c 01       	movw	r14, r24
     f80:	bb 24       	eor	r11, r11

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
     f82:	38 01       	movw	r6, r16
     f84:	88 24       	eor	r8, r8
     f86:	99 24       	eor	r9, r9
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <_ZN6Effect6smileyEv+0x42>
	 		LedCube::draw(smiley_lol,y,this->_mod);
     f8a:	80 ea       	ldi	r24, 0xA0	; 160
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	6b 2d       	mov	r22, r11
     f90:	4c 81       	ldd	r20, Y+4	; 0x04
     f92:	0e 94 43 0a 	call	0x1486	; 0x1486 <_ZN7LedCube4drawEPhhh>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
	    while(millis() < t + milli){
     f96:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     f9a:	a7 01       	movw	r20, r14
     f9c:	96 01       	movw	r18, r12
     f9e:	26 0d       	add	r18, r6
     fa0:	37 1d       	adc	r19, r7
     fa2:	48 1d       	adc	r20, r8
     fa4:	59 1d       	adc	r21, r9
     fa6:	62 17       	cp	r22, r18
     fa8:	73 07       	cpc	r23, r19
     faa:	84 07       	cpc	r24, r20
     fac:	95 07       	cpc	r25, r21
     fae:	68 f3       	brcs	.-38     	; 0xf8a <_ZN6Effect6smileyEv+0x36>
void Effect::smiley()
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte y=0; y < CUBESIZE; t = millis(), y++){
     fb0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
     fb4:	6b 01       	movw	r12, r22
     fb6:	7c 01       	movw	r14, r24
     fb8:	b3 94       	inc	r11
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	b8 16       	cp	r11, r24
     fbe:	59 f7       	brne	.-42     	; 0xf96 <_ZN6Effect6smileyEv+0x42>
	    while(millis() < t + milli){
	 		LedCube::draw(smiley_lol,y,this->_mod);
		}
	}
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	08 95       	ret

00000fdc <_ZN6Effect10drawstringEPKch>:

void Effect::setspeed(unsigned int t)
{
	this->_milli  = t;
}
void Effect::drawstring(const char* str,byte len)
     fdc:	4f 92       	push	r4
     fde:	5f 92       	push	r5
     fe0:	6f 92       	push	r6
     fe2:	7f 92       	push	r7
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	ec 01       	movw	r28, r24
     ffe:	2b 01       	movw	r4, r22
    1000:	c4 2e       	mov	r12, r20
{
	unsigned int milli = this->_milli + 1;
    1002:	0a 81       	ldd	r16, Y+2	; 0x02
    1004:	1b 81       	ldd	r17, Y+3	; 0x03
    1006:	0f 5f       	subi	r16, 0xFF	; 255
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned long t = millis();
    100a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	dd 24       	eor	r13, r13

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
				while(millis() < t + milli){
    1014:	48 01       	movw	r8, r16
    1016:	aa 24       	eor	r10, r10
    1018:	bb 24       	eor	r11, r11
    101a:	48 c0       	rjmp	.+144    	; 0x10ac <_ZN6Effect10drawstringEPKch+0xd0>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
    101c:	1d 82       	std	Y+5, r1	; 0x05
				while(millis() < t + milli){
				if(str[i] == ' '){
    101e:	32 01       	movw	r6, r4
    1020:	6d 0c       	add	r6, r13
    1022:	71 1c       	adc	r7, r1
    1024:	3e c0       	rjmp	.+124    	; 0x10a2 <_ZN6Effect10drawstringEPKch+0xc6>
    1026:	d3 01       	movw	r26, r6
    1028:	ec 91       	ld	r30, X
    102a:	e0 32       	cpi	r30, 0x20	; 32
    102c:	19 f4       	brne	.+6      	; 0x1034 <_ZN6Effect10drawstringEPKch+0x58>
					LedCube::clear();
    102e:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN7LedCube5clearEv>
    1032:	29 c0       	rjmp	.+82     	; 0x1086 <_ZN6Effect10drawstringEPKch+0xaa>
					continue;
				}
				if(str[i] > 47 && str[i] < 58){
    1034:	8e 2f       	mov	r24, r30
    1036:	80 53       	subi	r24, 0x30	; 48
    1038:	8a 30       	cpi	r24, 0x0A	; 10
    103a:	50 f4       	brcc	.+20     	; 0x1050 <_ZN6Effect10drawstringEPKch+0x74>
					render_matrix(ascii_map[str[i]-48]);
    103c:	ff 27       	eor	r31, r31
    103e:	e7 fd       	sbrc	r30, 7
    1040:	f0 95       	com	r31
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	e0 5b       	subi	r30, 0xB0	; 176
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	0d c0       	rjmp	.+26     	; 0x106a <_ZN6Effect10drawstringEPKch+0x8e>
					continue;
				}else if(str[i] > 64 && str[i] < 91){
    1050:	8e 2f       	mov	r24, r30
    1052:	81 54       	subi	r24, 0x41	; 65
    1054:	8a 31       	cpi	r24, 0x1A	; 26
    1056:	b8 f4       	brcc	.+46     	; 0x1086 <_ZN6Effect10drawstringEPKch+0xaa>
					render_matrix(ascii_map[str[i]-55]);
    1058:	ff 27       	eor	r31, r31
    105a:	e7 fd       	sbrc	r30, 7
    105c:	f0 95       	com	r31
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ec 5c       	subi	r30, 0xCC	; 204
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	40 81       	ld	r20, Z
    106c:	51 81       	ldd	r21, Z+1	; 0x01
    106e:	62 81       	ldd	r22, Z+2	; 0x02
    1070:	73 81       	ldd	r23, Z+3	; 0x03
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_ZN6Effect13render_matrixEm>
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <_ZN6Effect10drawstringEPKch+0xaa>
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
				while(millis() < t + milli){
    107a:	79 01       	movw	r14, r18
    107c:	8a 01       	movw	r16, r20
    107e:	e8 0c       	add	r14, r8
    1080:	f9 1c       	adc	r15, r9
    1082:	0a 1d       	adc	r16, r10
    1084:	1b 1d       	adc	r17, r11
    1086:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
    108a:	6e 15       	cp	r22, r14
    108c:	7f 05       	cpc	r23, r15
    108e:	80 07       	cpc	r24, r16
    1090:	91 07       	cpc	r25, r17
    1092:	48 f2       	brcs	.-110    	; 0x1026 <_ZN6Effect10drawstringEPKch+0x4a>
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
		for(_frame=0; _frame < _framecount; t = millis(), _frame++){
    1094:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <millis>
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	98 17       	cp	r25, r24
    10a8:	40 f3       	brcs	.-48     	; 0x107a <_ZN6Effect10drawstringEPKch+0x9e>
void Effect::drawstring(const char* str,byte len)
{
	unsigned int milli = this->_milli + 1;
	unsigned long t = millis();

	for(byte i = 0;i<len;i++){
    10aa:	d3 94       	inc	r13
    10ac:	dc 14       	cp	r13, r12
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <_ZN6Effect10drawstringEPKch+0xd6>
    10b0:	b5 cf       	rjmp	.-150    	; 0x101c <_ZN6Effect10drawstringEPKch+0x40>
					continue;
				}
			}
		}
	}
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	bf 90       	pop	r11
    10c4:	af 90       	pop	r10
    10c6:	9f 90       	pop	r9
    10c8:	8f 90       	pop	r8
    10ca:	7f 90       	pop	r7
    10cc:	6f 90       	pop	r6
    10ce:	5f 90       	pop	r5
    10d0:	4f 90       	pop	r4
    10d2:	08 95       	ret

000010d4 <_ZN6EffectD0Ev>:

Effect::Effect() {
	this->_milli  = 100;
}

Effect::~Effect() {
    10d4:	fc 01       	movw	r30, r24
    10d6:	8a ee       	ldi	r24, 0xEA	; 234
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24

}
    10de:	cf 01       	movw	r24, r30
    10e0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZdlPv>
    10e4:	08 95       	ret

000010e6 <_ZN9LedSquare10displaybigEi>:
  LedCube::transfer(17);
  LedCube::transfer(18);
}

void LedSquare::displaybig(int z){
  LedCube::plane(z);
    10e6:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7LedCube5planeEh>
  LedCube::setpixel(0, 0);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(1, 0);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(2, 0);
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(3, 0);
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 0);
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 1);
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 2);
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	62 e0       	ldi	r22, 0x02	; 2
    111e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 3);
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	63 e0       	ldi	r22, 0x03	; 3
    1126:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(4, 4);
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	64 e0       	ldi	r22, 0x04	; 4
    112e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 4);
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	64 e0       	ldi	r22, 0x04	; 4
    1136:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(1, 4);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	64 e0       	ldi	r22, 0x04	; 4
    113e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(2, 4);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	64 e0       	ldi	r22, 0x04	; 4
    1146:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(3, 4);
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	64 e0       	ldi	r22, 0x04	; 4
    114e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 1);
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 2);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	62 e0       	ldi	r22, 0x02	; 2
    115e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>
  LedCube::setpixel(0, 3);
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	63 e0       	ldi	r22, 0x03	; 3
    1166:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN7LedCube8setpixelEhh>

}
    116a:	08 95       	ret

0000116c <_ZN9LedSquare12displaysmallEi>:
  LedCube::plane(z);
  LedCube::transfer(12);
}

void LedSquare::displaysmall(int z){
  LedCube::plane(z);
    116c:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7LedCube5planeEh>
  LedCube::transfer(6);
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
  LedCube::transfer(7);
    1178:	87 e0       	ldi	r24, 0x07	; 7
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
  LedCube::transfer(8);
    1180:	88 e0       	ldi	r24, 0x08	; 8
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>

  LedCube::transfer(11);
    1188:	8b e0       	ldi	r24, 0x0B	; 11
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
  LedCube::transfer(13);
    1190:	8d e0       	ldi	r24, 0x0D	; 13
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>

  LedCube::transfer(16);
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
  LedCube::transfer(17);
    11a0:	81 e1       	ldi	r24, 0x11	; 17
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
  LedCube::transfer(18);
    11a8:	82 e1       	ldi	r24, 0x12	; 18
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
}
    11b0:	08 95       	ret

000011b2 <_ZN9LedSquare13displaycenterEi>:
	// TODO Auto-generated destructor stub
}

void LedSquare::displaycenter(int z){

  LedCube::plane(z);
    11b2:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7LedCube5planeEh>
  LedCube::transfer(12);
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
}
    11be:	08 95       	ret

000011c0 <_Z9fetchdatav>:
	Effect1.setmod(g_command.mod);
	strcpy(g_command.buf,"RALPH");
	g_command.len = strlen(g_command.buf);
}

void fetchdata()
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	c0 e0       	ldi	r28, 0x00	; 0
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
{
	int i = 0;
	for(;Serial.available() > 0 && i<32;i++) {
    11c8:	88 eb       	ldi	r24, 0xB8	; 184
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN14HardwareSerial9availableEv>
    11d0:	18 16       	cp	r1, r24
    11d2:	19 06       	cpc	r1, r25
    11d4:	6c f4       	brge	.+26     	; 0x11f0 <_Z9fetchdatav+0x30>
    11d6:	c0 32       	cpi	r28, 0x20	; 32
    11d8:	d1 05       	cpc	r29, r1
    11da:	61 f0       	breq	.+24     	; 0x11f4 <_Z9fetchdatav+0x34>
		g_buff[i] = Serial.read();
    11dc:	88 eb       	ldi	r24, 0xB8	; 184
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN14HardwareSerial4readEv>
    11e4:	fe 01       	movw	r30, r28
    11e6:	e6 5f       	subi	r30, 0xF6	; 246
    11e8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ea:	80 83       	st	Z, r24
}

void fetchdata()
{
	int i = 0;
	for(;Serial.available() > 0 && i<32;i++) {
    11ec:	21 96       	adiw	r28, 0x01	; 1
    11ee:	ec cf       	rjmp	.-40     	; 0x11c8 <_Z9fetchdatav+0x8>
		g_buff[i] = Serial.read();
	}

	if(i>1){
    11f0:	22 97       	sbiw	r28, 0x02	; 2
    11f2:	94 f0       	brlt	.+36     	; 0x1218 <_Z9fetchdatav+0x58>
		g_command.cmd = g_buff[0];
    11f4:	80 91 0a 02 	lds	r24, 0x020A
    11f8:	80 93 05 02 	sts	0x0205, r24
		g_command.mod = g_buff[1];
    11fc:	80 91 0b 02 	lds	r24, 0x020B
    1200:	80 93 06 02 	sts	0x0206, r24
		g_command.len = g_buff[2];
    1204:	80 91 0c 02 	lds	r24, 0x020C
    1208:	80 93 07 02 	sts	0x0207, r24
		g_command.buf = g_buff+3;
    120c:	8d e0       	ldi	r24, 0x0D	; 13
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	90 93 09 02 	sts	0x0209, r25
    1214:	80 93 08 02 	sts	0x0208, r24
	}
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <loop>:


void loop() {
	fetchdata();
    121e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_Z9fetchdatav>

	switch(g_command.cmd){
    1222:	80 91 05 02 	lds	r24, 0x0205
    1226:	83 3f       	cpi	r24, 0xF3	; 243
    1228:	39 f1       	breq	.+78     	; 0x1278 <loop+0x5a>
    122a:	84 3f       	cpi	r24, 0xF4	; 244
    122c:	40 f4       	brcc	.+16     	; 0x123e <loop+0x20>
    122e:	81 3f       	cpi	r24, 0xF1	; 241
    1230:	c9 f0       	breq	.+50     	; 0x1264 <loop+0x46>
    1232:	82 3f       	cpi	r24, 0xF2	; 242
    1234:	e0 f4       	brcc	.+56     	; 0x126e <loop+0x50>
    1236:	80 3f       	cpi	r24, 0xF0	; 240
    1238:	09 f0       	breq	.+2      	; 0x123c <loop+0x1e>
    123a:	49 c0       	rjmp	.+146    	; 0x12ce <loop+0xb0>
    123c:	08 c0       	rjmp	.+16     	; 0x124e <loop+0x30>
    123e:	85 3f       	cpi	r24, 0xF5	; 245
    1240:	29 f1       	breq	.+74     	; 0x128c <loop+0x6e>
    1242:	85 3f       	cpi	r24, 0xF5	; 245
    1244:	f0 f0       	brcs	.+60     	; 0x1282 <loop+0x64>
    1246:	86 3f       	cpi	r24, 0xF6	; 246
    1248:	09 f0       	breq	.+2      	; 0x124c <loop+0x2e>
    124a:	41 c0       	rjmp	.+130    	; 0x12ce <loop+0xb0>
    124c:	24 c0       	rjmp	.+72     	; 0x1296 <loop+0x78>
	case CMD_TEXT:
		Effect1.drawstring(g_command.buf,g_command.len);
    124e:	60 91 08 02 	lds	r22, 0x0208
    1252:	70 91 09 02 	lds	r23, 0x0209
    1256:	8e ef       	ldi	r24, 0xFE	; 254
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	40 91 07 02 	lds	r20, 0x0207
    125e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN6Effect10drawstringEPKch>
    1262:	08 95       	ret
		break;
	case CMD_HEART:
		Effect1.heartbeat();
    1264:	8e ef       	ldi	r24, 0xFE	; 254
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN6Effect9heartbeatEv>
    126c:	08 95       	ret
		break;
	case CMD_SMILE:
		Effect1.smiley();
    126e:	8e ef       	ldi	r24, 0xFE	; 254
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 aa 07 	call	0xf54	; 0xf54 <_ZN6Effect6smileyEv>
    1276:	08 95       	ret
		break;
	case CMD_BUBBLES:
		Effect1.bubbles();
    1278:	8e ef       	ldi	r24, 0xFE	; 254
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6Effect7bubblesEv>
    1280:	08 95       	ret
		break;
	case CMD_BOUNCE:
		Effect1.bounce();
    1282:	8e ef       	ldi	r24, 0xFE	; 254
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 72 06 	call	0xce4	; 0xce4 <_ZN6Effect6bounceEv>
    128a:	08 95       	ret
		break;
	case CMD_INFINITE:
		Effect1.infinitesquare();
    128c:	8e ef       	ldi	r24, 0xFE	; 254
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZN6Effect14infinitesquareEv>
    1294:	08 95       	ret
		break;
	case CMD_DEBUG:
		if(g_command.mod == MOD_DBG_COORD)
    1296:	80 91 06 02 	lds	r24, 0x0206
    129a:	84 32       	cpi	r24, 0x24	; 36
    129c:	61 f4       	brne	.+24     	; 0x12b6 <loop+0x98>
			Effect1.debug((byte)g_command.buf[0],
						  (byte)g_command.buf[1],
						  (byte)g_command.buf[2]);
    129e:	e0 91 08 02 	lds	r30, 0x0208
    12a2:	f0 91 09 02 	lds	r31, 0x0209
    12a6:	8e ef       	ldi	r24, 0xFE	; 254
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	60 81       	ld	r22, Z
    12ac:	41 81       	ldd	r20, Z+1	; 0x01
    12ae:	22 81       	ldd	r18, Z+2	; 0x02
    12b0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN6Effect5debugEhhh>
    12b4:	08 95       	ret
		else if(g_command.mod == MOD_DBG_NUMBER)
    12b6:	85 32       	cpi	r24, 0x25	; 37
    12b8:	51 f4       	brne	.+20     	; 0x12ce <loop+0xb0>
			Effect1.debug((byte)g_command.buf[0],(byte)g_command.buf[0]);
    12ba:	e0 91 08 02 	lds	r30, 0x0208
    12be:	f0 91 09 02 	lds	r31, 0x0209
    12c2:	40 81       	ld	r20, Z
    12c4:	8e ef       	ldi	r24, 0xFE	; 254
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	64 2f       	mov	r22, r20
    12ca:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN6Effect5debugEhh>
    12ce:	08 95       	ret

000012d0 <setup>:
	char*  buf;
}g_command;

char g_buff[32];

void setup() {
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
	g_command.mod = MOD_ROTATE;
    12d4:	82 e2       	ldi	r24, 0x22	; 34
    12d6:	80 93 06 02 	sts	0x0206, r24
	g_command.cmd = CMD_HEART;
    12da:	81 ef       	ldi	r24, 0xF1	; 241
    12dc:	80 93 05 02 	sts	0x0205, r24

	Serial.begin(9600);
    12e0:	88 eb       	ldi	r24, 0xB8	; 184
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	55 e2       	ldi	r21, 0x25	; 37
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN14HardwareSerial5beginEm>
	LedCube::init();
    12f0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN7LedCube4initEv>

	Effect1.setspeed(150);
    12f4:	0e ef       	ldi	r16, 0xFE	; 254
    12f6:	11 e0       	ldi	r17, 0x01	; 1
    12f8:	c8 01       	movw	r24, r16
    12fa:	66 e9       	ldi	r22, 0x96	; 150
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 03 02 	call	0x406	; 0x406 <_ZN6Effect8setspeedEj>
	Effect1.setmod(g_command.mod);
    1302:	c8 01       	movw	r24, r16
    1304:	60 91 06 02 	lds	r22, 0x0206
    1308:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN6Effect6setmodEh>
	strcpy(g_command.buf,"RALPH");
    130c:	80 91 08 02 	lds	r24, 0x0208
    1310:	90 91 09 02 	lds	r25, 0x0209
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	71 e0       	ldi	r23, 0x01	; 1
    1318:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <strcpy>
	g_command.len = strlen(g_command.buf);
    131c:	a0 91 08 02 	lds	r26, 0x0208
    1320:	b0 91 09 02 	lds	r27, 0x0209
    1324:	fd 01       	movw	r30, r26
    1326:	01 90       	ld	r0, Z+
    1328:	00 20       	and	r0, r0
    132a:	e9 f7       	brne	.-6      	; 0x1326 <setup+0x56>
    132c:	31 97       	sbiw	r30, 0x01	; 1
    132e:	ea 1b       	sub	r30, r26
    1330:	fb 0b       	sbc	r31, r27
    1332:	e0 93 07 02 	sts	0x0207, r30
}
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <__vector_13>:

#include "TimerOne.h"

TimerOne Timer1;              // preinstatiate

ISR(TIMER1_OVF_vect)          // interrupt service routine that wraps a user defined function supplied by attachInterrupt
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
{
  Timer1.isrCallback();
    135e:	e0 91 2e 02 	lds	r30, 0x022E
    1362:	f0 91 2f 02 	lds	r31, 0x022F
    1366:	09 95       	icall
}
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <_ZN7LedCube5planeEh>:
		if(matrix[4+(i*CUBESIZE)] == 1)
			LedCube::setpixel(0,y,z);
	}
}

void LedCube::plane(byte z)
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	d8 2e       	mov	r13, r24
    139a:	0c ed       	ldi	r16, 0xDC	; 220
    139c:	11 e0       	ldi	r17, 0x01	; 1
    139e:	c0 e0       	ldi	r28, 0x00	; 0
    13a0:	d0 e0       	ldi	r29, 0x00	; 0
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
	    if(i == z || z >= LEDS_PER_ROW){
    13a2:	e8 2e       	mov	r14, r24
    13a4:	ff 24       	eor	r15, r15
    13a6:	ce 15       	cp	r28, r14
    13a8:	df 05       	cpc	r29, r15
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <_ZN7LedCube5planeEh+0x28>
    13ac:	84 e0       	ldi	r24, 0x04	; 4
    13ae:	8d 15       	cp	r24, r13
    13b0:	20 f4       	brcc	.+8      	; 0x13ba <_ZN7LedCube5planeEh+0x30>
	      digitalWrite(cathodePins[i], HIGH);
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 81       	ld	r24, Z
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <_ZN7LedCube5planeEh+0x36>
	    }else{
	       digitalWrite(cathodePins[i], LOW);
    13ba:	f8 01       	movw	r30, r16
    13bc:	80 81       	ld	r24, Z
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <digitalWrite>
}

void LedCube::plane(byte z)
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
    13c4:	21 96       	adiw	r28, 0x01	; 1
    13c6:	0e 5f       	subi	r16, 0xFE	; 254
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	c5 30       	cpi	r28, 0x05	; 5
    13cc:	d1 05       	cpc	r29, r1
    13ce:	59 f7       	brne	.-42     	; 0x13a6 <_ZN7LedCube5planeEh+0x1c>
	      digitalWrite(cathodePins[i], HIGH);
	    }else{
	       digitalWrite(cathodePins[i], LOW);
	    }
	  }
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	08 95       	ret

000013e0 <_ZN7LedCube8transferEi>:
	//enable decoders
	pinMode(pEN, OUTPUT);
	digitalWrite(pEN, HIGH);
}

void LedCube::transfer(int num)
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
{
	  int weight=1,pin=0;
	  num = constrain(num, 0, 24);
    13f0:	89 31       	cpi	r24, 0x19	; 25
    13f2:	91 05       	cpc	r25, r1
    13f4:	14 f0       	brlt	.+4      	; 0x13fa <_ZN7LedCube8transferEi+0x1a>
    13f6:	88 e1       	ldi	r24, 0x18	; 24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	6c 01       	movw	r12, r24
    13fc:	97 ff       	sbrs	r25, 7
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <_ZN7LedCube8transferEi+0x24>
    1400:	cc 24       	eor	r12, r12
    1402:	dd 24       	eor	r13, r13
    1404:	92 ed       	ldi	r25, 0xD2	; 210
    1406:	e9 2e       	mov	r14, r25
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	f9 2e       	mov	r15, r25
    140c:	01 e0       	ldi	r16, 0x01	; 1
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	c0 e0       	ldi	r28, 0x00	; 0
    1412:	d0 e0       	ldi	r29, 0x00	; 0

	  for(; pin < DECODER_BITS; weight*=2, pin++)
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);
    1414:	b8 01       	movw	r22, r16
    1416:	6c 21       	and	r22, r12
    1418:	7d 21       	and	r23, r13
    141a:	0c 2e       	mov	r0, r28
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <_ZN7LedCube8transferEi+0x42>
    141e:	75 95       	asr	r23
    1420:	67 95       	ror	r22
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <_ZN7LedCube8transferEi+0x3e>
    1426:	f7 01       	movw	r30, r14
    1428:	80 81       	ld	r24, Z
    142a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <digitalWrite>
void LedCube::transfer(int num)
{
	  int weight=1,pin=0;
	  num = constrain(num, 0, 24);

	  for(; pin < DECODER_BITS; weight*=2, pin++)
    142e:	00 0f       	add	r16, r16
    1430:	11 1f       	adc	r17, r17
    1432:	21 96       	adiw	r28, 0x01	; 1
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	e8 0e       	add	r14, r24
    143a:	f9 1e       	adc	r15, r25
    143c:	c5 30       	cpi	r28, 0x05	; 5
    143e:	d1 05       	cpc	r29, r1
    1440:	49 f7       	brne	.-46     	; 0x1414 <_ZN7LedCube8transferEi+0x34>
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);

	  delayMicroseconds(MICRO);
    1442:	8e e1       	ldi	r24, 0x1E	; 30
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <delayMicroseconds>
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	08 95       	ret

0000145c <_ZN7LedCube8setpixelEhhh>:
void LedCube::setpixel(byte x,byte y)
{
	transfer((y * LEDS_PER_ROW) + x);
}

void LedCube::setpixel(byte x,byte y,byte z)
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	f8 2e       	mov	r15, r24
    1464:	06 2f       	mov	r16, r22
    1466:	84 2f       	mov	r24, r20
{
	plane(z);
    1468:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7LedCube5planeEh>
	transfer((y * LEDS_PER_ROW) + x);
    146c:	85 e0       	ldi	r24, 0x05	; 5
    146e:	08 9f       	mul	r16, r24
    1470:	80 01       	movw	r16, r0
    1472:	11 24       	eor	r1, r1
    1474:	c8 01       	movw	r24, r16
    1476:	8f 0d       	add	r24, r15
    1478:	91 1d       	adc	r25, r1
    147a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
}
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	08 95       	ret

00001486 <_ZN7LedCube4drawEPhhh>:
	    digitalWrite(decoderPins[pin] ,(num & weight) >> pin);

	  delayMicroseconds(MICRO);
}

void LedCube::draw(byte* matrix,byte y, byte mod)
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	06 2f       	mov	r16, r22
    1490:	ec 01       	movw	r28, r24
    1492:	14 e0       	ldi	r17, 0x04	; 4
{
	byte i = 0,z=4;
	for(;i<CUBESIZE;i++,z--){
		if(matrix[0+(i*CUBESIZE)] == 1)
    1494:	88 81       	ld	r24, Y
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	29 f4       	brne	.+10     	; 0x14a4 <_ZN7LedCube4drawEPhhh+0x1e>
			LedCube::setpixel(4,y,z);
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	60 2f       	mov	r22, r16
    149e:	41 2f       	mov	r20, r17
    14a0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
		if(matrix[1+(i*CUBESIZE)] == 1)
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <_ZN7LedCube4drawEPhhh+0x2e>
			LedCube::setpixel(3,y,z);
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	60 2f       	mov	r22, r16
    14ae:	41 2f       	mov	r20, r17
    14b0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
		if(matrix[2+(i*CUBESIZE)] == 1)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <_ZN7LedCube4drawEPhhh+0x3e>
			LedCube::setpixel(2,y,z);
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	60 2f       	mov	r22, r16
    14be:	41 2f       	mov	r20, r17
    14c0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
		if(matrix[3+(i*CUBESIZE)] == 1)
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <_ZN7LedCube4drawEPhhh+0x4c>
			LedCube::setpixel(1,y,z);
    14ca:	60 2f       	mov	r22, r16
    14cc:	41 2f       	mov	r20, r17
    14ce:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
		if(matrix[4+(i*CUBESIZE)] == 1)
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <_ZN7LedCube4drawEPhhh+0x5c>
			LedCube::setpixel(0,y,z);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	60 2f       	mov	r22, r16
    14dc:	41 2f       	mov	r20, r17
    14de:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7LedCube8setpixelEhhh>
    14e2:	25 96       	adiw	r28, 0x05	; 5
}

void LedCube::draw(byte* matrix,byte y, byte mod)
{
	byte i = 0,z=4;
	for(;i<CUBESIZE;i++,z--){
    14e4:	11 23       	and	r17, r17
    14e6:	11 f0       	breq	.+4      	; 0x14ec <_ZN7LedCube4drawEPhhh+0x66>
    14e8:	11 50       	subi	r17, 0x01	; 1
    14ea:	d4 cf       	rjmp	.-88     	; 0x1494 <_ZN7LedCube4drawEPhhh+0xe>
		if(matrix[3+(i*CUBESIZE)] == 1)
			LedCube::setpixel(1,y,z);
		if(matrix[4+(i*CUBESIZE)] == 1)
			LedCube::setpixel(0,y,z);
	}
}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <_ZN7LedCube8setpixelEhh>:
	  }
}

void LedCube::setpixel(byte x,byte y)
{
	transfer((y * LEDS_PER_ROW) + x);
    14f6:	95 e0       	ldi	r25, 0x05	; 5
    14f8:	69 9f       	mul	r22, r25
    14fa:	b0 01       	movw	r22, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	9b 01       	movw	r18, r22
    1500:	28 0f       	add	r18, r24
    1502:	31 1d       	adc	r19, r1
    1504:	c9 01       	movw	r24, r18
    1506:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
}
    150a:	08 95       	ret

0000150c <_ZN7LedCube5clearEv>:
	       digitalWrite(cathodePins[i], LOW);
	    }
	  }
}

void LedCube::clear()
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	cc ed       	ldi	r28, 0xDC	; 220
    1512:	d1 e0       	ldi	r29, 0x01	; 1
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
	       digitalWrite(cathodePins[i], LOW);
    1514:	88 81       	ld	r24, Y
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <digitalWrite>
	       transfer(0);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN7LedCube8transferEi>
    1524:	22 96       	adiw	r28, 0x02	; 2
}

void LedCube::clear()
{
	int i = 0;
	  for(; i < LEDS_PER_ROW; i++){
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	c6 3e       	cpi	r28, 0xE6	; 230
    152a:	d8 07       	cpc	r29, r24
    152c:	99 f7       	brne	.-26     	; 0x1514 <_ZN7LedCube5clearEv+0x8>
	       digitalWrite(cathodePins[i], LOW);
	       transfer(0);

	  }
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <_ZN7LedCube4initEv>:
LedCube::~LedCube()
{

}

void LedCube::init()
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	c2 ed       	ldi	r28, 0xD2	; 210
    153a:	d1 e0       	ldi	r29, 0x01	; 1
{
	for(int i =0; i < DECODER_BITS; i++){
		pinMode(decoderPins[i], OUTPUT);
    153c:	88 81       	ld	r24, Y
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <pinMode>
		digitalWrite(decoderPins[i], LOW);
    1544:	88 81       	ld	r24, Y
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <digitalWrite>
    154c:	22 96       	adiw	r28, 0x02	; 2

}

void LedCube::init()
{
	for(int i =0; i < DECODER_BITS; i++){
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	cc 3d       	cpi	r28, 0xDC	; 220
    1552:	d8 07       	cpc	r29, r24
    1554:	99 f7       	brne	.-26     	; 0x153c <_ZN7LedCube4initEv+0x8>
    1556:	cc ed       	ldi	r28, 0xDC	; 220
    1558:	d1 e0       	ldi	r29, 0x01	; 1
		pinMode(decoderPins[i], OUTPUT);
		digitalWrite(decoderPins[i], LOW);
	}
	for(int i = 0; i < LEDS_PER_ROW; i++){
		pinMode(cathodePins[i], OUTPUT);
    155a:	88 81       	ld	r24, Y
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <pinMode>
		digitalWrite(cathodePins[i], LOW);
    1562:	88 81       	ld	r24, Y
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <digitalWrite>
    156a:	22 96       	adiw	r28, 0x02	; 2
{
	for(int i =0; i < DECODER_BITS; i++){
		pinMode(decoderPins[i], OUTPUT);
		digitalWrite(decoderPins[i], LOW);
	}
	for(int i = 0; i < LEDS_PER_ROW; i++){
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	c6 3e       	cpi	r28, 0xE6	; 230
    1570:	d8 07       	cpc	r29, r24
    1572:	99 f7       	brne	.-26     	; 0x155a <_ZN7LedCube4initEv+0x26>
		pinMode(cathodePins[i], OUTPUT);
		digitalWrite(cathodePins[i], LOW);
	}

	//enable decoders
	pinMode(pEN, OUTPUT);
    1574:	8c e0       	ldi	r24, 0x0C	; 12
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <pinMode>
	digitalWrite(pEN, HIGH);
    157c:	8c e0       	ldi	r24, 0x0C	; 12
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <digitalWrite>
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    158a:	08 95       	ret

0000158c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    15a4:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    15a8:	20 91 70 02 	lds	r18, 0x0270
    15ac:	30 91 71 02 	lds	r19, 0x0271
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	2f 73       	andi	r18, 0x3F	; 63
    15b6:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    15b8:	80 91 72 02 	lds	r24, 0x0272
    15bc:	90 91 73 02 	lds	r25, 0x0273
    15c0:	28 17       	cp	r18, r24
    15c2:	39 07       	cpc	r19, r25
    15c4:	59 f0       	breq	.+22     	; 0x15dc <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    15c6:	e0 91 70 02 	lds	r30, 0x0270
    15ca:	f0 91 71 02 	lds	r31, 0x0271
    15ce:	e0 5d       	subi	r30, 0xD0	; 208
    15d0:	fd 4f       	sbci	r31, 0xFD	; 253
    15d2:	40 83       	st	Z, r20
    buffer->head = i;
    15d4:	30 93 71 02 	sts	0x0271, r19
    15d8:	20 93 70 02 	sts	0x0270, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    15dc:	ff 91       	pop	r31
    15de:	ef 91       	pop	r30
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    15f4:	e0 91 c4 02 	lds	r30, 0x02C4
    15f8:	f0 91 c5 02 	lds	r31, 0x02C5
    15fc:	e0 5c       	subi	r30, 0xC0	; 192
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	81 91       	ld	r24, Z+
    1602:	91 91       	ld	r25, Z+
    1604:	20 81       	ld	r18, Z
    1606:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1608:	82 1b       	sub	r24, r18
    160a:	93 0b       	sbc	r25, r19
    160c:	8f 73       	andi	r24, 0x3F	; 63
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	89 2b       	or	r24, r25
    1612:	11 f0       	breq	.+4      	; 0x1618 <_Z14serialEventRunv+0x24>
    1614:	0e 94 c5 0a 	call	0x158a	; 0x158a <_Z11serialEventv>
    1618:	08 95       	ret

0000161a <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    161a:	1f 92       	push	r1
    161c:	0f 92       	push	r0
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    163c:	20 91 b4 02 	lds	r18, 0x02B4
    1640:	30 91 b5 02 	lds	r19, 0x02B5
    1644:	80 91 b6 02 	lds	r24, 0x02B6
    1648:	90 91 b7 02 	lds	r25, 0x02B7
    164c:	28 17       	cp	r18, r24
    164e:	39 07       	cpc	r19, r25
    1650:	31 f4       	brne	.+12     	; 0x165e <__vector_19+0x44>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1652:	80 91 c1 00 	lds	r24, 0x00C1
    1656:	8f 7d       	andi	r24, 0xDF	; 223
    1658:	80 93 c1 00 	sts	0x00C1, r24
    165c:	16 c0       	rjmp	.+44     	; 0x168a <__vector_19+0x70>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    165e:	e0 91 b6 02 	lds	r30, 0x02B6
    1662:	f0 91 b7 02 	lds	r31, 0x02B7
    1666:	ec 58       	subi	r30, 0x8C	; 140
    1668:	fd 4f       	sbci	r31, 0xFD	; 253
    166a:	40 81       	ld	r20, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    166c:	80 91 b6 02 	lds	r24, 0x02B6
    1670:	90 91 b7 02 	lds	r25, 0x02B7
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	60 e4       	ldi	r22, 0x40	; 64
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divmodhi4>
    167e:	90 93 b7 02 	sts	0x02B7, r25
    1682:	80 93 b6 02 	sts	0x02B6, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1686:	40 93 c6 00 	sts	0x00C6, r20
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ec 01       	movw	r28, r24
    16c0:	7a 01       	movw	r14, r20
    16c2:	8b 01       	movw	r16, r22
    16c4:	dd 24       	eor	r13, r13
    16c6:	40 30       	cpi	r20, 0x00	; 0
    16c8:	81 ee       	ldi	r24, 0xE1	; 225
    16ca:	58 07       	cpc	r21, r24
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	68 07       	cpc	r22, r24
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	78 07       	cpc	r23, r24
    16d4:	11 f0       	breq	.+4      	; 0x16da <_ZN14HardwareSerial5beginEm+0x2e>
    16d6:	dd 24       	eor	r13, r13
    16d8:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	a9 2e       	mov	r10, r25
    16de:	b1 2c       	mov	r11, r1
    16e0:	ec 89       	ldd	r30, Y+20	; 0x14
    16e2:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    16e4:	dd 20       	and	r13, r13
    16e6:	69 f0       	breq	.+26     	; 0x1702 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    16e8:	c5 01       	movw	r24, r10
    16ea:	0e 8c       	ldd	r0, Y+30	; 0x1e
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <_ZN14HardwareSerial5beginEm+0x46>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <_ZN14HardwareSerial5beginEm+0x42>
    16f6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	79 e0       	ldi	r23, 0x09	; 9
    16fc:	8d e3       	ldi	r24, 0x3D	; 61
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	05 c0       	rjmp	.+10     	; 0x170c <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1702:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1704:	60 e8       	ldi	r22, 0x80	; 128
    1706:	74 e8       	ldi	r23, 0x84	; 132
    1708:	8e e1       	ldi	r24, 0x1E	; 30
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a8 01       	movw	r20, r16
    170e:	97 01       	movw	r18, r14
    1710:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__udivmodsi4>
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	30 40       	sbci	r19, 0x00	; 0
    1718:	40 40       	sbci	r20, 0x00	; 0
    171a:	50 40       	sbci	r21, 0x00	; 0
    171c:	56 95       	lsr	r21
    171e:	47 95       	ror	r20
    1720:	37 95       	ror	r19
    1722:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1724:	80 e1       	ldi	r24, 0x10	; 16
    1726:	20 30       	cpi	r18, 0x00	; 0
    1728:	38 07       	cpc	r19, r24
    172a:	20 f0       	brcs	.+8      	; 0x1734 <_ZN14HardwareSerial5beginEm+0x88>
    172c:	dd 20       	and	r13, r13
    172e:	11 f0       	breq	.+4      	; 0x1734 <_ZN14HardwareSerial5beginEm+0x88>
    1730:	dd 24       	eor	r13, r13
    1732:	d6 cf       	rjmp	.-84     	; 0x16e0 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1734:	e8 89       	ldd	r30, Y+16	; 0x10
    1736:	f9 89       	ldd	r31, Y+17	; 0x11
    1738:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    173a:	ea 89       	ldd	r30, Y+18	; 0x12
    173c:	fb 89       	ldd	r31, Y+19	; 0x13
    173e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1740:	ee 89       	ldd	r30, Y+22	; 0x16
    1742:	ff 89       	ldd	r31, Y+23	; 0x17
    1744:	40 81       	ld	r20, Z
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	c9 01       	movw	r24, r18
    174c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <_ZN14HardwareSerial5beginEm+0xa8>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <_ZN14HardwareSerial5beginEm+0xa4>
    1758:	48 2b       	or	r20, r24
    175a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    175c:	ee 89       	ldd	r30, Y+22	; 0x16
    175e:	ff 89       	ldd	r31, Y+23	; 0x17
    1760:	40 81       	ld	r20, Z
    1762:	c9 01       	movw	r24, r18
    1764:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1766:	02 c0       	rjmp	.+4      	; 0x176c <_ZN14HardwareSerial5beginEm+0xc0>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <_ZN14HardwareSerial5beginEm+0xbc>
    1770:	48 2b       	or	r20, r24
    1772:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1774:	ee 89       	ldd	r30, Y+22	; 0x16
    1776:	ff 89       	ldd	r31, Y+23	; 0x17
    1778:	40 81       	ld	r20, Z
    177a:	c9 01       	movw	r24, r18
    177c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <_ZN14HardwareSerial5beginEm+0xd8>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <_ZN14HardwareSerial5beginEm+0xd4>
    1788:	48 2b       	or	r20, r24
    178a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    178c:	ee 89       	ldd	r30, Y+22	; 0x16
    178e:	ff 89       	ldd	r31, Y+23	; 0x17
    1790:	80 81       	ld	r24, Z
    1792:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1794:	02 c0       	rjmp	.+4      	; 0x179a <_ZN14HardwareSerial5beginEm+0xee>
    1796:	22 0f       	add	r18, r18
    1798:	33 1f       	adc	r19, r19
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <_ZN14HardwareSerial5beginEm+0xea>
    179e:	20 95       	com	r18
    17a0:	28 23       	and	r18, r24
    17a2:	20 83       	st	Z, r18
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	08 95       	ret

000017b8 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    17b8:	dc 01       	movw	r26, r24
    17ba:	1c 96       	adiw	r26, 0x0c	; 12
    17bc:	ed 91       	ld	r30, X+
    17be:	fc 91       	ld	r31, X
    17c0:	1d 97       	sbiw	r26, 0x0d	; 13
    17c2:	e0 5c       	subi	r30, 0xC0	; 192
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	21 91       	ld	r18, Z+
    17c8:	31 91       	ld	r19, Z+
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	28 1b       	sub	r18, r24
    17d0:	39 0b       	sbc	r19, r25
    17d2:	2f 73       	andi	r18, 0x3F	; 63
    17d4:	30 70       	andi	r19, 0x00	; 0
}
    17d6:	c9 01       	movw	r24, r18
    17d8:	08 95       	ret

000017da <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    17da:	dc 01       	movw	r26, r24
    17dc:	1c 96       	adiw	r26, 0x0c	; 12
    17de:	ed 91       	ld	r30, X+
    17e0:	fc 91       	ld	r31, X
    17e2:	1d 97       	sbiw	r26, 0x0d	; 13
    17e4:	e0 5c       	subi	r30, 0xC0	; 192
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	20 81       	ld	r18, Z
    17ea:	31 81       	ldd	r19, Z+1	; 0x01
    17ec:	e0 54       	subi	r30, 0x40	; 64
    17ee:	f0 40       	sbci	r31, 0x00	; 0
    17f0:	df 01       	movw	r26, r30
    17f2:	ae 5b       	subi	r26, 0xBE	; 190
    17f4:	bf 4f       	sbci	r27, 0xFF	; 255
    17f6:	8d 91       	ld	r24, X+
    17f8:	9c 91       	ld	r25, X
    17fa:	11 97       	sbiw	r26, 0x01	; 1
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	19 f4       	brne	.+6      	; 0x1808 <_ZN14HardwareSerial4peekEv+0x2e>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	07 c0       	rjmp	.+14     	; 0x1816 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1808:	8d 91       	ld	r24, X+
    180a:	9c 91       	ld	r25, X
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	80 81       	ld	r24, Z
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1816:	c9 01       	movw	r24, r18
    1818:	08 95       	ret

0000181a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    181a:	dc 01       	movw	r26, r24
    181c:	1c 96       	adiw	r26, 0x0c	; 12
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	1d 97       	sbiw	r26, 0x0d	; 13
    1824:	e0 5c       	subi	r30, 0xC0	; 192
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	20 81       	ld	r18, Z
    182a:	31 81       	ldd	r19, Z+1	; 0x01
    182c:	e0 54       	subi	r30, 0x40	; 64
    182e:	f0 40       	sbci	r31, 0x00	; 0
    1830:	df 01       	movw	r26, r30
    1832:	ae 5b       	subi	r26, 0xBE	; 190
    1834:	bf 4f       	sbci	r27, 0xFF	; 255
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	11 97       	sbiw	r26, 0x01	; 1
    183c:	28 17       	cp	r18, r24
    183e:	39 07       	cpc	r19, r25
    1840:	19 f4       	brne	.+6      	; 0x1848 <_ZN14HardwareSerial4readEv+0x2e>
    1842:	2f ef       	ldi	r18, 0xFF	; 255
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	10 c0       	rjmp	.+32     	; 0x1868 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1848:	8d 91       	ld	r24, X+
    184a:	9c 91       	ld	r25, X
    184c:	11 97       	sbiw	r26, 0x01	; 1
    184e:	e8 0f       	add	r30, r24
    1850:	f9 1f       	adc	r31, r25
    1852:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1854:	8d 91       	ld	r24, X+
    1856:	9c 91       	ld	r25, X
    1858:	11 97       	sbiw	r26, 0x01	; 1
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	8f 73       	andi	r24, 0x3F	; 63
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	11 96       	adiw	r26, 0x01	; 1
    1862:	9c 93       	st	X, r25
    1864:	8e 93       	st	-X, r24
    return c;
    1866:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1868:	c9 01       	movw	r24, r18
    186a:	08 95       	ret

0000186c <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    186c:	fc 01       	movw	r30, r24
    186e:	86 85       	ldd	r24, Z+14	; 0x0e
    1870:	97 85       	ldd	r25, Z+15	; 0x0f
    1872:	dc 01       	movw	r26, r24
    1874:	a0 5c       	subi	r26, 0xC0	; 192
    1876:	bf 4f       	sbci	r27, 0xFF	; 255
    1878:	fc 01       	movw	r30, r24
    187a:	ee 5b       	subi	r30, 0xBE	; 190
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	2d 91       	ld	r18, X+
    1880:	3c 91       	ld	r19, X
    1882:	11 97       	sbiw	r26, 0x01	; 1
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	28 17       	cp	r18, r24
    188a:	39 07       	cpc	r19, r25
    188c:	c1 f7       	brne	.-16     	; 0x187e <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    188e:	08 95       	ret

00001890 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	46 2f       	mov	r20, r22
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1898:	ee 85       	ldd	r30, Y+14	; 0x0e
    189a:	ff 85       	ldd	r31, Y+15	; 0x0f
    189c:	e0 5c       	subi	r30, 0xC0	; 192
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	e0 54       	subi	r30, 0x40	; 64
    18a6:	f0 40       	sbci	r31, 0x00	; 0
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	60 e4       	ldi	r22, 0x40	; 64
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__divmodhi4>
    18b2:	9c 01       	movw	r18, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    18b4:	df 01       	movw	r26, r30
    18b6:	ae 5b       	subi	r26, 0xBE	; 190
    18b8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ba:	8d 91       	ld	r24, X+
    18bc:	9c 91       	ld	r25, X
    18be:	11 97       	sbiw	r26, 0x01	; 1
    18c0:	28 17       	cp	r18, r24
    18c2:	39 07       	cpc	r19, r25
    18c4:	d1 f3       	breq	.-12     	; 0x18ba <_ZN14HardwareSerial5writeEh+0x2a>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    18c6:	e0 5c       	subi	r30, 0xC0	; 192
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	e0 54       	subi	r30, 0x40	; 64
    18d0:	f0 40       	sbci	r31, 0x00	; 0
    18d2:	e8 0f       	add	r30, r24
    18d4:	f9 1f       	adc	r31, r25
    18d6:	40 83       	st	Z, r20
  _tx_buffer->head = i;
    18d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    18da:	ff 85       	ldd	r31, Y+15	; 0x0f
    18dc:	e0 5c       	subi	r30, 0xC0	; 192
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	31 83       	std	Z+1, r19	; 0x01
    18e2:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    18e4:	ee 89       	ldd	r30, Y+22	; 0x16
    18e6:	ff 89       	ldd	r31, Y+23	; 0x17
    18e8:	20 81       	ld	r18, Z
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0d 8c       	ldd	r0, Y+29	; 0x1d
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <_ZN14HardwareSerial5writeEh+0x66>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <_ZN14HardwareSerial5writeEh+0x62>
    18fa:	28 2b       	or	r18, r24
    18fc:	20 83       	st	Z, r18
  
  return 1;
}
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1908:	10 92 bb 02 	sts	0x02BB, r1
    190c:	10 92 ba 02 	sts	0x02BA, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1910:	88 ee       	ldi	r24, 0xE8	; 232
    1912:	93 e0       	ldi	r25, 0x03	; 3
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	80 93 bc 02 	sts	0x02BC, r24
    191c:	90 93 bd 02 	sts	0x02BD, r25
    1920:	a0 93 be 02 	sts	0x02BE, r26
    1924:	b0 93 bf 02 	sts	0x02BF, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1928:	82 ef       	ldi	r24, 0xF2	; 242
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	90 93 b9 02 	sts	0x02B9, r25
    1930:	80 93 b8 02 	sts	0x02B8, r24
{
  _rx_buffer = rx_buffer;
    1934:	80 e3       	ldi	r24, 0x30	; 48
    1936:	92 e0       	ldi	r25, 0x02	; 2
    1938:	90 93 c5 02 	sts	0x02C5, r25
    193c:	80 93 c4 02 	sts	0x02C4, r24
  _tx_buffer = tx_buffer;
    1940:	84 e7       	ldi	r24, 0x74	; 116
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	90 93 c7 02 	sts	0x02C7, r25
    1948:	80 93 c6 02 	sts	0x02C6, r24
  _ubrrh = ubrrh;
    194c:	85 ec       	ldi	r24, 0xC5	; 197
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	90 93 c9 02 	sts	0x02C9, r25
    1954:	80 93 c8 02 	sts	0x02C8, r24
  _ubrrl = ubrrl;
    1958:	84 ec       	ldi	r24, 0xC4	; 196
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	90 93 cb 02 	sts	0x02CB, r25
    1960:	80 93 ca 02 	sts	0x02CA, r24
  _ucsra = ucsra;
    1964:	80 ec       	ldi	r24, 0xC0	; 192
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	90 93 cd 02 	sts	0x02CD, r25
    196c:	80 93 cc 02 	sts	0x02CC, r24
  _ucsrb = ucsrb;
    1970:	81 ec       	ldi	r24, 0xC1	; 193
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	90 93 cf 02 	sts	0x02CF, r25
    1978:	80 93 ce 02 	sts	0x02CE, r24
  _udr = udr;
    197c:	86 ec       	ldi	r24, 0xC6	; 198
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	90 93 d1 02 	sts	0x02D1, r25
    1984:	80 93 d0 02 	sts	0x02D0, r24
  _rxen = rxen;
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	80 93 d2 02 	sts	0x02D2, r24
  _txen = txen;
    198e:	83 e0       	ldi	r24, 0x03	; 3
    1990:	80 93 d3 02 	sts	0x02D3, r24
  _rxcie = rxcie;
    1994:	87 e0       	ldi	r24, 0x07	; 7
    1996:	80 93 d4 02 	sts	0x02D4, r24
  _udrie = udrie;
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	80 93 d5 02 	sts	0x02D5, r24
  _u2x = u2x;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	80 93 d6 02 	sts	0x02D6, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    19a6:	08 95       	ret

000019a8 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	7c 01       	movw	r14, r24
    19ba:	6b 01       	movw	r12, r22
    19bc:	8a 01       	movw	r16, r20
    19be:	c0 e0       	ldi	r28, 0x00	; 0
    19c0:	d0 e0       	ldi	r29, 0x00	; 0
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    19c4:	d6 01       	movw	r26, r12
    19c6:	6d 91       	ld	r22, X+
    19c8:	6d 01       	movw	r12, r26
    19ca:	d7 01       	movw	r26, r14
    19cc:	ed 91       	ld	r30, X+
    19ce:	fc 91       	ld	r31, X
    19d0:	01 90       	ld	r0, Z+
    19d2:	f0 81       	ld	r31, Z
    19d4:	e0 2d       	mov	r30, r0
    19d6:	c7 01       	movw	r24, r14
    19d8:	09 95       	icall
    19da:	c8 0f       	add	r28, r24
    19dc:	d9 1f       	adc	r29, r25
    19de:	01 50       	subi	r16, 0x01	; 1
    19e0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    19e2:	01 15       	cp	r16, r1
    19e4:	11 05       	cpc	r17, r1
    19e6:	71 f7       	brne	.-36     	; 0x19c4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    19e8:	ce 01       	movw	r24, r28
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	08 95       	ret

000019fc <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	7b 01       	movw	r14, r22
    1a06:	8c 01       	movw	r16, r24
{
  if (howbig == 0) {
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	81 05       	cpc	r24, r1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	29 f4       	brne	.+10     	; 0x1a1c <_Z6randoml+0x20>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	0b c0       	rjmp	.+22     	; 0x1a32 <_Z6randoml+0x36>
    return 0;
  }
  return random() % howbig;
    1a1c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <random>
    1a20:	a8 01       	movw	r20, r16
    1a22:	97 01       	movw	r18, r14
    1a24:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__divmodsi4>
    1a28:	ac 01       	movw	r20, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	da 01       	movw	r26, r20
    1a2e:	9c 01       	movw	r18, r24
    1a30:	ad 01       	movw	r20, r26
}
    1a32:	b9 01       	movw	r22, r18
    1a34:	ca 01       	movw	r24, r20
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	08 95       	ret

00001a40 <main>:
#include <Arduino.h>

int main(void)
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
{
	init();
    1a44:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    1a48:	0e 94 68 09 	call	0x12d0	; 0x12d0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1a4c:	ca ef       	ldi	r28, 0xFA	; 250
    1a4e:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    1a50:	0e 94 0f 09 	call	0x121e	; 0x121e <loop>
		if (serialEventRun) serialEventRun();
    1a54:	20 97       	sbiw	r28, 0x00	; 0
    1a56:	e1 f3       	breq	.-8      	; 0x1a50 <main+0x10>
    1a58:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_Z14serialEventRunv>
    1a5c:	f9 cf       	rjmp	.-14     	; 0x1a50 <main+0x10>

00001a5e <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    1a5e:	0e 94 38 01 	call	0x270	; 0x270 <free>
} 
    1a62:	08 95       	ret

00001a64 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	8f 93       	push	r24
    1a74:	9f 93       	push	r25
    1a76:	af 93       	push	r26
    1a78:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1a7a:	80 91 db 02 	lds	r24, 0x02DB
    1a7e:	90 91 dc 02 	lds	r25, 0x02DC
    1a82:	a0 91 dd 02 	lds	r26, 0x02DD
    1a86:	b0 91 de 02 	lds	r27, 0x02DE
	unsigned char f = timer0_fract;
    1a8a:	30 91 df 02 	lds	r19, 0x02DF

	m += MILLIS_INC;
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1a94:	23 2f       	mov	r18, r19
    1a96:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1a98:	2d 37       	cpi	r18, 0x7D	; 125
    1a9a:	20 f0       	brcs	.+8      	; 0x1aa4 <__vector_16+0x40>
		f -= FRACT_MAX;
    1a9c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	a1 1d       	adc	r26, r1
    1aa2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1aa4:	20 93 df 02 	sts	0x02DF, r18
	timer0_millis = m;
    1aa8:	80 93 db 02 	sts	0x02DB, r24
    1aac:	90 93 dc 02 	sts	0x02DC, r25
    1ab0:	a0 93 dd 02 	sts	0x02DD, r26
    1ab4:	b0 93 de 02 	sts	0x02DE, r27
	timer0_overflow_count++;
    1ab8:	80 91 d7 02 	lds	r24, 0x02D7
    1abc:	90 91 d8 02 	lds	r25, 0x02D8
    1ac0:	a0 91 d9 02 	lds	r26, 0x02D9
    1ac4:	b0 91 da 02 	lds	r27, 0x02DA
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	a1 1d       	adc	r26, r1
    1acc:	b1 1d       	adc	r27, r1
    1ace:	80 93 d7 02 	sts	0x02D7, r24
    1ad2:	90 93 d8 02 	sts	0x02D8, r25
    1ad6:	a0 93 d9 02 	sts	0x02D9, r26
    1ada:	b0 93 da 02 	sts	0x02DA, r27
}
    1ade:	bf 91       	pop	r27
    1ae0:	af 91       	pop	r26
    1ae2:	9f 91       	pop	r25
    1ae4:	8f 91       	pop	r24
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	0f 90       	pop	r0
    1af0:	1f 90       	pop	r1
    1af2:	18 95       	reti

00001af4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1af4:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1af6:	f8 94       	cli
	m = timer0_millis;
    1af8:	20 91 db 02 	lds	r18, 0x02DB
    1afc:	30 91 dc 02 	lds	r19, 0x02DC
    1b00:	40 91 dd 02 	lds	r20, 0x02DD
    1b04:	50 91 de 02 	lds	r21, 0x02DE
	SREG = oldSREG;
    1b08:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1b0a:	b9 01       	movw	r22, r18
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	08 95       	ret

00001b10 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1b14:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1b16:	f8 94       	cli
	m = timer0_overflow_count;
    1b18:	80 91 d7 02 	lds	r24, 0x02D7
    1b1c:	90 91 d8 02 	lds	r25, 0x02D8
    1b20:	a0 91 d9 02 	lds	r26, 0x02D9
    1b24:	b0 91 da 02 	lds	r27, 0x02DA
#if defined(TCNT0)
	t = TCNT0;
    1b28:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1b2a:	a8 9b       	sbis	0x15, 0	; 21
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <delay+0x28>
    1b2e:	6f 3f       	cpi	r22, 0xFF	; 255
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <delay+0x28>
		m++;
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	a1 1d       	adc	r26, r1
    1b36:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1b38:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1b3a:	ba 2f       	mov	r27, r26
    1b3c:	a9 2f       	mov	r26, r25
    1b3e:	98 2f       	mov	r25, r24
    1b40:	88 27       	eor	r24, r24
    1b42:	86 0f       	add	r24, r22
    1b44:	91 1d       	adc	r25, r1
    1b46:	a1 1d       	adc	r26, r1
    1b48:	b1 1d       	adc	r27, r1
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	aa 1f       	adc	r26, r26
    1b52:	bb 1f       	adc	r27, r27
    1b54:	6a 95       	dec	r22
    1b56:	d1 f7       	brne	.-12     	; 0x1b4c <delay+0x3c>
    1b58:	bc 01       	movw	r22, r24
    1b5a:	2d c0       	rjmp	.+90     	; 0x1bb6 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1b5c:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1b5e:	f8 94       	cli
	m = timer0_overflow_count;
    1b60:	80 91 d7 02 	lds	r24, 0x02D7
    1b64:	90 91 d8 02 	lds	r25, 0x02D8
    1b68:	a0 91 d9 02 	lds	r26, 0x02D9
    1b6c:	b0 91 da 02 	lds	r27, 0x02DA
#if defined(TCNT0)
	t = TCNT0;
    1b70:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1b72:	a8 9b       	sbis	0x15, 0	; 21
    1b74:	05 c0       	rjmp	.+10     	; 0x1b80 <delay+0x70>
    1b76:	ef 3f       	cpi	r30, 0xFF	; 255
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <delay+0x70>
		m++;
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	a1 1d       	adc	r26, r1
    1b7e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1b80:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1b82:	ba 2f       	mov	r27, r26
    1b84:	a9 2f       	mov	r26, r25
    1b86:	98 2f       	mov	r25, r24
    1b88:	88 27       	eor	r24, r24
    1b8a:	8e 0f       	add	r24, r30
    1b8c:	91 1d       	adc	r25, r1
    1b8e:	a1 1d       	adc	r26, r1
    1b90:	b1 1d       	adc	r27, r1
    1b92:	e2 e0       	ldi	r30, 0x02	; 2
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	aa 1f       	adc	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	ea 95       	dec	r30
    1b9e:	d1 f7       	brne	.-12     	; 0x1b94 <delay+0x84>
    1ba0:	86 1b       	sub	r24, r22
    1ba2:	97 0b       	sbc	r25, r23
    1ba4:	88 5e       	subi	r24, 0xE8	; 232
    1ba6:	93 40       	sbci	r25, 0x03	; 3
    1ba8:	c8 f2       	brcs	.-78     	; 0x1b5c <delay+0x4c>
			ms--;
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	30 40       	sbci	r19, 0x00	; 0
    1bae:	40 40       	sbci	r20, 0x00	; 0
    1bb0:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1bb2:	68 51       	subi	r22, 0x18	; 24
    1bb4:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1bb6:	21 15       	cp	r18, r1
    1bb8:	31 05       	cpc	r19, r1
    1bba:	41 05       	cpc	r20, r1
    1bbc:	51 05       	cpc	r21, r1
    1bbe:	71 f6       	brne	.-100    	; 0x1b5c <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1bc0:	08 95       	ret

00001bc2 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	39 f0       	breq	.+14     	; 0x1bd4 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1bce:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <delayMicroseconds+0xe>
    1bd4:	08 95       	ret

00001bd6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1bd6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1bd8:	84 b5       	in	r24, 0x24	; 36
    1bda:	82 60       	ori	r24, 0x02	; 2
    1bdc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1bde:	84 b5       	in	r24, 0x24	; 36
    1be0:	81 60       	ori	r24, 0x01	; 1
    1be2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1be4:	85 b5       	in	r24, 0x25	; 37
    1be6:	82 60       	ori	r24, 0x02	; 2
    1be8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1bea:	85 b5       	in	r24, 0x25	; 37
    1bec:	81 60       	ori	r24, 0x01	; 1
    1bee:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1bf0:	ee e6       	ldi	r30, 0x6E	; 110
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	81 60       	ori	r24, 0x01	; 1
    1bf8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1bfa:	e1 e8       	ldi	r30, 0x81	; 129
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1c00:	80 81       	ld	r24, Z
    1c02:	82 60       	ori	r24, 0x02	; 2
    1c04:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1c06:	80 81       	ld	r24, Z
    1c08:	81 60       	ori	r24, 0x01	; 1
    1c0a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1c0c:	e0 e8       	ldi	r30, 0x80	; 128
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	81 60       	ori	r24, 0x01	; 1
    1c14:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1c16:	e1 eb       	ldi	r30, 0xB1	; 177
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	84 60       	ori	r24, 0x04	; 4
    1c1e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1c20:	e0 eb       	ldi	r30, 0xB0	; 176
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	81 60       	ori	r24, 0x01	; 1
    1c28:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1c2a:	ea e7       	ldi	r30, 0x7A	; 122
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	84 60       	ori	r24, 0x04	; 4
    1c32:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1c34:	80 81       	ld	r24, Z
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1c3a:	80 81       	ld	r24, Z
    1c3c:	81 60       	ori	r24, 0x01	; 1
    1c3e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1c40:	80 81       	ld	r24, Z
    1c42:	80 68       	ori	r24, 0x80	; 128
    1c44:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1c46:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1c4a:	08 95       	ret

00001c4c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	ca 01       	movw	r24, r20
    1c52:	86 56       	subi	r24, 0x66	; 102
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	fc 01       	movw	r30, r24
    1c58:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    1c5a:	4a 57       	subi	r20, 0x7A	; 122
    1c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5e:	fa 01       	movw	r30, r20
    1c60:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    1c62:	88 23       	and	r24, r24
    1c64:	c1 f0       	breq	.+48     	; 0x1c96 <pinMode+0x4a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1c66:	e8 2f       	mov	r30, r24
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	ee 0f       	add	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	e8 59       	subi	r30, 0x98	; 152
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	a5 91       	lpm	r26, Z+
    1c74:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
    1c76:	66 23       	and	r22, r22
    1c78:	41 f4       	brne	.+16     	; 0x1c8a <pinMode+0x3e>
		uint8_t oldSREG = SREG;
    1c7a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c7c:	f8 94       	cli
		*reg &= ~bit;
    1c7e:	8c 91       	ld	r24, X
    1c80:	20 95       	com	r18
    1c82:	82 23       	and	r24, r18
    1c84:	8c 93       	st	X, r24
		SREG = oldSREG;
    1c86:	9f bf       	out	0x3f, r25	; 63
    1c88:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    1c8a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c8c:	f8 94       	cli
		*reg |= bit;
    1c8e:	8c 91       	ld	r24, X
    1c90:	82 2b       	or	r24, r18
    1c92:	8c 93       	st	X, r24
		SREG = oldSREG;
    1c94:	9f bf       	out	0x3f, r25	; 63
    1c96:	08 95       	ret

00001c98 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1c98:	48 2f       	mov	r20, r24
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	82 55       	subi	r24, 0x52	; 82
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	86 56       	subi	r24, 0x66	; 102
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	fc 01       	movw	r30, r24
    1cae:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1cb0:	4a 57       	subi	r20, 0x7A	; 122
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	fa 01       	movw	r30, r20
    1cb6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1cb8:	33 23       	and	r19, r19
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <digitalWrite+0x26>
    1cbc:	40 c0       	rjmp	.+128    	; 0x1d3e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1cbe:	22 23       	and	r18, r18
    1cc0:	51 f1       	breq	.+84     	; 0x1d16 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1cc2:	23 30       	cpi	r18, 0x03	; 3
    1cc4:	71 f0       	breq	.+28     	; 0x1ce2 <digitalWrite+0x4a>
    1cc6:	24 30       	cpi	r18, 0x04	; 4
    1cc8:	28 f4       	brcc	.+10     	; 0x1cd4 <digitalWrite+0x3c>
    1cca:	21 30       	cpi	r18, 0x01	; 1
    1ccc:	a1 f0       	breq	.+40     	; 0x1cf6 <digitalWrite+0x5e>
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	11 f5       	brne	.+68     	; 0x1d16 <digitalWrite+0x7e>
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <digitalWrite+0x64>
    1cd4:	26 30       	cpi	r18, 0x06	; 6
    1cd6:	b1 f0       	breq	.+44     	; 0x1d04 <digitalWrite+0x6c>
    1cd8:	27 30       	cpi	r18, 0x07	; 7
    1cda:	c1 f0       	breq	.+48     	; 0x1d0c <digitalWrite+0x74>
    1cdc:	24 30       	cpi	r18, 0x04	; 4
    1cde:	d9 f4       	brne	.+54     	; 0x1d16 <digitalWrite+0x7e>
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1ce2:	80 91 80 00 	lds	r24, 0x0080
    1ce6:	8f 77       	andi	r24, 0x7F	; 127
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1cea:	80 91 80 00 	lds	r24, 0x0080
    1cee:	8f 7d       	andi	r24, 0xDF	; 223
    1cf0:	80 93 80 00 	sts	0x0080, r24
    1cf4:	10 c0       	rjmp	.+32     	; 0x1d16 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1cf6:	84 b5       	in	r24, 0x24	; 36
    1cf8:	8f 77       	andi	r24, 0x7F	; 127
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1cfc:	84 b5       	in	r24, 0x24	; 36
    1cfe:	8f 7d       	andi	r24, 0xDF	; 223
    1d00:	84 bd       	out	0x24, r24	; 36
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1d04:	80 91 b0 00 	lds	r24, 0x00B0
    1d08:	8f 77       	andi	r24, 0x7F	; 127
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1d0c:	80 91 b0 00 	lds	r24, 0x00B0
    1d10:	8f 7d       	andi	r24, 0xDF	; 223
    1d12:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1d16:	e3 2f       	mov	r30, r19
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	ee 0f       	add	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	ee 58       	subi	r30, 0x8E	; 142
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	a5 91       	lpm	r26, Z+
    1d24:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1d26:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1d28:	f8 94       	cli

	if (val == LOW) {
    1d2a:	66 23       	and	r22, r22
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <digitalWrite+0x9e>
		*out &= ~bit;
    1d2e:	8c 91       	ld	r24, X
    1d30:	90 95       	com	r25
    1d32:	89 23       	and	r24, r25
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1d36:	8c 91       	ld	r24, X
    1d38:	89 2b       	or	r24, r25
    1d3a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1d3c:	2f bf       	out	0x3f, r18	; 63
    1d3e:	08 95       	ret

00001d40 <__mulsi3>:
    1d40:	62 9f       	mul	r22, r18
    1d42:	d0 01       	movw	r26, r0
    1d44:	73 9f       	mul	r23, r19
    1d46:	f0 01       	movw	r30, r0
    1d48:	82 9f       	mul	r24, r18
    1d4a:	e0 0d       	add	r30, r0
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	64 9f       	mul	r22, r20
    1d50:	e0 0d       	add	r30, r0
    1d52:	f1 1d       	adc	r31, r1
    1d54:	92 9f       	mul	r25, r18
    1d56:	f0 0d       	add	r31, r0
    1d58:	83 9f       	mul	r24, r19
    1d5a:	f0 0d       	add	r31, r0
    1d5c:	74 9f       	mul	r23, r20
    1d5e:	f0 0d       	add	r31, r0
    1d60:	65 9f       	mul	r22, r21
    1d62:	f0 0d       	add	r31, r0
    1d64:	99 27       	eor	r25, r25
    1d66:	72 9f       	mul	r23, r18
    1d68:	b0 0d       	add	r27, r0
    1d6a:	e1 1d       	adc	r30, r1
    1d6c:	f9 1f       	adc	r31, r25
    1d6e:	63 9f       	mul	r22, r19
    1d70:	b0 0d       	add	r27, r0
    1d72:	e1 1d       	adc	r30, r1
    1d74:	f9 1f       	adc	r31, r25
    1d76:	bd 01       	movw	r22, r26
    1d78:	cf 01       	movw	r24, r30
    1d7a:	11 24       	eor	r1, r1
    1d7c:	08 95       	ret

00001d7e <__divmodhi4>:
    1d7e:	97 fb       	bst	r25, 7
    1d80:	09 2e       	mov	r0, r25
    1d82:	07 26       	eor	r0, r23
    1d84:	0a d0       	rcall	.+20     	; 0x1d9a <__divmodhi4_neg1>
    1d86:	77 fd       	sbrc	r23, 7
    1d88:	04 d0       	rcall	.+8      	; 0x1d92 <__divmodhi4_neg2>
    1d8a:	49 d0       	rcall	.+146    	; 0x1e1e <__udivmodhi4>
    1d8c:	06 d0       	rcall	.+12     	; 0x1d9a <__divmodhi4_neg1>
    1d8e:	00 20       	and	r0, r0
    1d90:	1a f4       	brpl	.+6      	; 0x1d98 <__divmodhi4_exit>

00001d92 <__divmodhi4_neg2>:
    1d92:	70 95       	com	r23
    1d94:	61 95       	neg	r22
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255

00001d98 <__divmodhi4_exit>:
    1d98:	08 95       	ret

00001d9a <__divmodhi4_neg1>:
    1d9a:	f6 f7       	brtc	.-4      	; 0x1d98 <__divmodhi4_exit>
    1d9c:	90 95       	com	r25
    1d9e:	81 95       	neg	r24
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	08 95       	ret

00001da4 <__udivmodsi4>:
    1da4:	a1 e2       	ldi	r26, 0x21	; 33
    1da6:	1a 2e       	mov	r1, r26
    1da8:	aa 1b       	sub	r26, r26
    1daa:	bb 1b       	sub	r27, r27
    1dac:	fd 01       	movw	r30, r26
    1dae:	0d c0       	rjmp	.+26     	; 0x1dca <__udivmodsi4_ep>

00001db0 <__udivmodsi4_loop>:
    1db0:	aa 1f       	adc	r26, r26
    1db2:	bb 1f       	adc	r27, r27
    1db4:	ee 1f       	adc	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	a2 17       	cp	r26, r18
    1dba:	b3 07       	cpc	r27, r19
    1dbc:	e4 07       	cpc	r30, r20
    1dbe:	f5 07       	cpc	r31, r21
    1dc0:	20 f0       	brcs	.+8      	; 0x1dca <__udivmodsi4_ep>
    1dc2:	a2 1b       	sub	r26, r18
    1dc4:	b3 0b       	sbc	r27, r19
    1dc6:	e4 0b       	sbc	r30, r20
    1dc8:	f5 0b       	sbc	r31, r21

00001dca <__udivmodsi4_ep>:
    1dca:	66 1f       	adc	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	1a 94       	dec	r1
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <__udivmodsi4_loop>
    1dd6:	60 95       	com	r22
    1dd8:	70 95       	com	r23
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	9b 01       	movw	r18, r22
    1de0:	ac 01       	movw	r20, r24
    1de2:	bd 01       	movw	r22, r26
    1de4:	cf 01       	movw	r24, r30
    1de6:	08 95       	ret

00001de8 <__divmodsi4>:
    1de8:	97 fb       	bst	r25, 7
    1dea:	09 2e       	mov	r0, r25
    1dec:	05 26       	eor	r0, r21
    1dee:	0e d0       	rcall	.+28     	; 0x1e0c <__divmodsi4_neg1>
    1df0:	57 fd       	sbrc	r21, 7
    1df2:	04 d0       	rcall	.+8      	; 0x1dfc <__divmodsi4_neg2>
    1df4:	d7 df       	rcall	.-82     	; 0x1da4 <__udivmodsi4>
    1df6:	0a d0       	rcall	.+20     	; 0x1e0c <__divmodsi4_neg1>
    1df8:	00 1c       	adc	r0, r0
    1dfa:	38 f4       	brcc	.+14     	; 0x1e0a <__divmodsi4_exit>

00001dfc <__divmodsi4_neg2>:
    1dfc:	50 95       	com	r21
    1dfe:	40 95       	com	r20
    1e00:	30 95       	com	r19
    1e02:	21 95       	neg	r18
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	4f 4f       	sbci	r20, 0xFF	; 255
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255

00001e0a <__divmodsi4_exit>:
    1e0a:	08 95       	ret

00001e0c <__divmodsi4_neg1>:
    1e0c:	f6 f7       	brtc	.-4      	; 0x1e0a <__divmodsi4_exit>
    1e0e:	90 95       	com	r25
    1e10:	80 95       	com	r24
    1e12:	70 95       	com	r23
    1e14:	61 95       	neg	r22
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	08 95       	ret

00001e1e <__udivmodhi4>:
    1e1e:	aa 1b       	sub	r26, r26
    1e20:	bb 1b       	sub	r27, r27
    1e22:	51 e1       	ldi	r21, 0x11	; 17
    1e24:	07 c0       	rjmp	.+14     	; 0x1e34 <__udivmodhi4_ep>

00001e26 <__udivmodhi4_loop>:
    1e26:	aa 1f       	adc	r26, r26
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	a6 17       	cp	r26, r22
    1e2c:	b7 07       	cpc	r27, r23
    1e2e:	10 f0       	brcs	.+4      	; 0x1e34 <__udivmodhi4_ep>
    1e30:	a6 1b       	sub	r26, r22
    1e32:	b7 0b       	sbc	r27, r23

00001e34 <__udivmodhi4_ep>:
    1e34:	88 1f       	adc	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	5a 95       	dec	r21
    1e3a:	a9 f7       	brne	.-22     	; 0x1e26 <__udivmodhi4_loop>
    1e3c:	80 95       	com	r24
    1e3e:	90 95       	com	r25
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	08 95       	ret

00001e46 <__tablejump2__>:
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31

00001e4a <__tablejump__>:
    1e4a:	05 90       	lpm	r0, Z+
    1e4c:	f4 91       	lpm	r31, Z+
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	09 94       	ijmp

00001e52 <__prologue_saves__>:
    1e52:	2f 92       	push	r2
    1e54:	3f 92       	push	r3
    1e56:	4f 92       	push	r4
    1e58:	5f 92       	push	r5
    1e5a:	6f 92       	push	r6
    1e5c:	7f 92       	push	r7
    1e5e:	8f 92       	push	r8
    1e60:	9f 92       	push	r9
    1e62:	af 92       	push	r10
    1e64:	bf 92       	push	r11
    1e66:	cf 92       	push	r12
    1e68:	df 92       	push	r13
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	ca 1b       	sub	r28, r26
    1e7c:	db 0b       	sbc	r29, r27
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	09 94       	ijmp

00001e8a <__epilogue_restores__>:
    1e8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e8c:	39 88       	ldd	r3, Y+17	; 0x11
    1e8e:	48 88       	ldd	r4, Y+16	; 0x10
    1e90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1ea0:	df 80       	ldd	r13, Y+7	; 0x07
    1ea2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ea6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea8:	1b 81       	ldd	r17, Y+3	; 0x03
    1eaa:	aa 81       	ldd	r26, Y+2	; 0x02
    1eac:	b9 81       	ldd	r27, Y+1	; 0x01
    1eae:	ce 0f       	add	r28, r30
    1eb0:	d1 1d       	adc	r29, r1
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	ed 01       	movw	r28, r26
    1ebe:	08 95       	ret

00001ec0 <__do_global_dtors>:
    1ec0:	10 e0       	ldi	r17, 0x00	; 0
    1ec2:	c6 ec       	ldi	r28, 0xC6	; 198
    1ec4:	d0 e0       	ldi	r29, 0x00	; 0
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <.do_global_dtors_start>

00001ec8 <.do_global_dtors_loop>:
    1ec8:	fe 01       	movw	r30, r28
    1eca:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__tablejump__>
    1ece:	22 96       	adiw	r28, 0x02	; 2

00001ed0 <.do_global_dtors_start>:
    1ed0:	c8 3c       	cpi	r28, 0xC8	; 200
    1ed2:	d1 07       	cpc	r29, r17
    1ed4:	c9 f7       	brne	.-14     	; 0x1ec8 <.do_global_dtors_loop>
    1ed6:	f8 94       	cli

00001ed8 <__stop_program>:
    1ed8:	ff cf       	rjmp	.-2      	; 0x1ed8 <__stop_program>
